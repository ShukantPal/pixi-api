{
	"name": "",
	"type": "RootDoc",
	"members": [
		{
			"name": "PIXI",
			"type": "NSDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "accessibility",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "AccessibilityManager",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasTinter",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "canvasUtils",
					"type": "NSDoc",
					"scope": "static",
					"brief": "<p>Utility methods for Sprite/Texture tinting.</p>",
					"description": "<p>Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\nso be aware of the performance implications.</p>",
					"members": [
						{
							"name": "cacheStepsPerColorChannel",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Number of steps which will be used as a cap when rounding colors.</p>",
							"description": ""
						},
						{
							"name": "canUseMultiply",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.</p>",
							"description": ""
						},
						{
							"name": "convertTintToImage",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Tint cache boolean flag.</p>",
							"description": ""
						},
						{
							"name": "tintMethod",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The tinting method that will be used.</p>",
							"description": ""
						},
						{
							"name": "getTintedCanvas",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Basically this method just needs a sprite and a color and tints the sprite with the given color.</p>",
							"description": ""
						},
						{
							"name": "getTintedPattern",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Basically this method just needs a sprite and a color and tints the sprite with the given color.</p>",
							"description": ""
						},
						{
							"name": "roundColor",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.</p>",
							"description": ""
						},
						{
							"name": "tintWithMultiply",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Tint a texture using the 'multiply' operation.</p>",
							"description": ""
						},
						{
							"name": "tintWithOverlay",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Tint a texture using the 'overlay' operation.</p>",
							"description": ""
						},
						{
							"name": "tintWithPerPixel",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Tint a texture pixel per pixel.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "extract",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "CanvasExtract",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Extract",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "WebGLExtract",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "extras",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>This namespace has been removed. All classes previous nested\nunder this namespace have been moved to the top-level <code>PIXI</code> object.</p>",
					"members": [
						{
							"name": "AnimatedSprite",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "BitmapText",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TilingSprite",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TilingSpriteRenderer",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "filters",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>This namespace contains WebGL-only display filters that can be applied\nto DisplayObjects using the {@link PIXI.DisplayObject#filters filters} property.</p>\n<p>Since PixiJS only had a handful of built-in filters, additional filters\ncan be downloaded {@link https://github.com/pixijs/pixi-filters here} from the\nPixiJS Filters repository.</p>\n<p>All filters must extend {@link PIXI.Filter}.</p>",
					"members": [
						{
							"name": "AlphaFilter",
							"type": "ClassDoc",
							"brief": "<p>Simplest filter - applies alpha.</p>",
							"description": "<p>Use this instead of Container's alpha property to avoid visual layering of individual elements.\nAlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\nIf elements are not opaque, they will blend with each other anyway.</p>\n<p>Very handy if you want to use common features of all filters:</p>\n<ol>\n<li>\n<p>Assign a blendMode to this filter, blend all elements inside display object with background.</p>\n</li>\n<li>\n<p>To use clipping in display coordinates, assign a filterArea to the same container that has this filter.</p>\n</li>\n</ol>",
							"members": [
								{
									"name": "alpha",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Coefficient for alpha multiplication</p>",
									"description": ""
								},
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "BlurFilter",
							"type": "ClassDoc",
							"brief": "<p>The BlurFilter applies a Gaussian blur to an object.</p>",
							"description": "<p>The strength of the blur can be set for the x-axis and y-axis separately.</p>",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "blur",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of both the blurX and blurY properties simultaneously</p>",
									"description": ""
								},
								{
									"name": "blurX",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of the blurX property</p>",
									"description": ""
								},
								{
									"name": "blurY",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of the blurY property</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "quality",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the number of passes for blur. More passes means higher quaility bluring.</p>",
									"description": ""
								},
								{
									"name": "repeatEdgePixels",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If set to true the edge of the target will be clamped</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter.</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "BlurFilterPass",
							"type": "ClassDoc",
							"brief": "<p>The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.</p>",
							"description": "",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "blur",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of both the blur.</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "quality",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Sets the quality of the blur by modifying the number of passes. More passes means higher\nquaility bluring but the lower the performance.</p>"
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter.</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "BlurXFilter",
							"type": "ClassDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "blur",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of both the blur.</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "quality",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Sets the quality of the blur by modifying the number of passes. More passes means higher\nquaility bluring but the lower the performance.</p>"
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter.</p>",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "BlurYFilter",
							"type": "ClassDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "blur",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the strength of both the blur.</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "quality",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Sets the quality of the blur by modifying the number of passes. More passes means higher\nquaility bluring but the lower the performance.</p>"
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter.</p>",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "ColorMatrixFilter",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\ncolor and alpha values of every pixel on your displayObject to produce a result\nwith a new set of RGBA color and alpha values. It's pretty powerful!</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">let</span> colorMatrix = <span class=\"hljs-keyword\">new</span> PIXI.filters.ColorMatrixFilter();\n container.filters = [colorMatrix];\n colorMatrix.contrast(<span class=\"hljs-number\">2</span>);\n</code></pre>",
							"members": [
								{
									"name": "alpha",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The opacity value to use when mixing the original and resultant colors.</p>",
									"description": "<p>When the value is 0, the original color is used without modification.\nWhen the value is 1, the result color is used.\nWhen in the range (0, 1) the color is interpolated between the original and result by this amount.</p>"
								},
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "matrix",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The matrix of the color matrix filter</p>",
									"description": ""
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "_loadMatrix",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Transforms current matrix and set the new one</p>",
									"description": ""
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter</p>",
									"description": ""
								},
								{
									"name": "blackAndWhite",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Set the black and white matrice.</p>",
									"description": ""
								},
								{
									"name": "brightness",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Adjusts brightness</p>",
									"description": ""
								},
								{
									"name": "browni",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Brown delicious browni filter (thanks Dominic Szablewski)</p>",
									"description": ""
								},
								{
									"name": "colorTone",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>We don't know exactly what it does, kind of gradient map, but funny to play with!</p>",
									"description": ""
								},
								{
									"name": "contrast",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Set the contrast matrix, increase the separation between dark and bright\nIncrease contrast : shadows darker and highlights brighter\nDecrease contrast : bring the shadows up and the highlights down</p>"
								},
								{
									"name": "desaturate",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Desaturate image (remove color)</p>",
									"description": "<p>Call the saturate function</p>"
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "greyscale",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Set the matrices in grey scales</p>",
									"description": ""
								},
								{
									"name": "hue",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Set the hue property of the color</p>",
									"description": ""
								},
								{
									"name": "kodachrome",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)</p>",
									"description": ""
								},
								{
									"name": "lsd",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>LSD effect</p>",
									"description": "<p>Multiply the current matrix</p>"
								},
								{
									"name": "negative",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Negative image (inverse of classic rgb matrix)</p>",
									"description": ""
								},
								{
									"name": "night",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Night effect</p>",
									"description": ""
								},
								{
									"name": "polaroid",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Polaroid filter</p>",
									"description": ""
								},
								{
									"name": "predator",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Predator effect</p>",
									"description": "<p>Erase the current matrix by setting a new indepent one</p>"
								},
								{
									"name": "reset",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Erase the current matrix by setting the default one</p>",
									"description": ""
								},
								{
									"name": "saturate",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Set the saturation matrix, increase the separation between colors\nIncrease saturation : increase contrast, brightness, and sharpness</p>"
								},
								{
									"name": "sepia",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Sepia image</p>",
									"description": ""
								},
								{
									"name": "technicolor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Color motion picture process invented in 1916 (thanks Dominic Szablewski)</p>",
									"description": ""
								},
								{
									"name": "toBGR",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Filter who transforms : Red -&gt; Blue and Blue -&gt; Red</p>",
									"description": ""
								},
								{
									"name": "vintage",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Vintage filter (thanks Dominic Szablewski)</p>",
									"description": ""
								},
								{
									"name": "_colorMatrix",
									"type": "MethodDoc",
									"access": "private",
									"scope": "instance",
									"brief": "<p>Create a Float32 Array and normalize the offset component to 0-1</p>",
									"description": ""
								},
								{
									"name": "_multiply",
									"type": "MethodDoc",
									"access": "private",
									"scope": "instance",
									"brief": "<p>Multiplies two mat5's</p>",
									"description": ""
								}
							]
						},
						{
							"name": "DisplacementFilter",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>The DisplacementFilter class uses the pixel values from the specified texture\n(called the displacement map) to perform a displacement of an object.</p>\n<p>You can use this filter to apply all manor of crazy warping effects.\nCurrently the <code>r</code> property of the texture is used to offset the <code>x</code>\nand the <code>g</code> property of the texture is used to offset the <code>y</code>.</p>\n<p>The way it works is it uses the values of the displacement map to look up the\ncorrect pixels to output. This means it's not technically moving the original.\nInstead, it's starting at the output and asking &quot;which pixel from the original goes here&quot;.\nFor example, if a displacement map pixel has <code>red = 1</code> and the filter scale is <code>20</code>,\nthis filter will output the pixel approximately 20 pixels to the right of the original.</p>",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "map",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The texture used for the displacement map. Must be power of 2 sized texture.</p>",
									"description": ""
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "scale",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>scaleX, scaleY for displacements</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter.</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "FXAAFilter",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com\nwith the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.</p>",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter</p>",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "NoiseFilter",
							"type": "ClassDoc",
							"brief": "<p>A Noise effect filter.</p>",
							"description": "<p>original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js</p>",
							"members": [
								{
									"name": "autoFit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
								},
								{
									"name": "blendMode",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Sets the blendmode of the filter</p>",
									"description": ""
								},
								{
									"name": "enabled",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Legacy filters use position and uvs from attributes</p>"
								},
								{
									"name": "noise",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The amount of noise to apply, this value should be in the range (0, 1].</p>",
									"description": ""
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
								},
								{
									"name": "program",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Program that the shader uses</p>",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
								},
								{
									"name": "seed",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>A seed value to apply to the random noise generation. <code>Math.random()</code> is a good value to use.</p>",
									"description": ""
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The WebGL state the filter requires to render</p>"
								},
								{
									"name": "uniforms",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
								},
								{
									"name": "apply",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Applies the filter</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						}
					]
				},
				{
					"name": "groupD8",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Implements the dihedral group D8, which is similar to\n[group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\nD8 is the same but with diagonals, and it is used for texture\nrotations.</p>\n<p>The directions the U- and V- axes after rotation\nof an angle of <code>a: GD8Constant</code> are the vectors <code>(uX(a), uY(a))</code>\nand <code>(vX(a), vY(a))</code>. These aren't necessarily unit vectors.</p>\n<p><strong>Origin:</strong><br>\nThis is the small part of gameofbombs.com portal system. It works.</p>",
					"members": [
						{
							"name": "E",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0°</td>\n<td>East</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "MAIN_DIAGONAL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Reflection about the main diagonal.</p>",
							"description": ""
						},
						{
							"name": "MIRROR_HORIZONTAL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Reflection about X-axis.</p>",
							"description": ""
						},
						{
							"name": "MIRROR_VERTICAL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Reflection about Y-axis.</p>",
							"description": ""
						},
						{
							"name": "N",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-90°/270°↻</td>\n<td>North</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "NE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-45°/315°↻</td>\n<td>Northeast</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "NW",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-135°/225°↻</td>\n<td>Northwest</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "REVERSE_DIAGONAL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Reflection about reverse diagonal.</p>",
							"description": ""
						},
						{
							"name": "S",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90°↻</td>\n<td>South</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "SE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>45°↻</td>\n<td>Southeast</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "SW",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>135°↻</td>\n<td>Southwest</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "W",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<table>\n<thead>\n<tr>\n<th>Rotation</th>\n<th>Direction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>180°</td>\n<td>West</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Composes the two D8 operations.</p>",
							"description": "<p>Taking <code>^</code> as reflection:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>E=0</th>\n<th>S=2</th>\n<th>W=4</th>\n<th>N=6</th>\n<th>E^=8</th>\n<th>S^=10</th>\n<th>W^=12</th>\n<th>N^=14</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E=0</td>\n<td>E</td>\n<td>S</td>\n<td>W</td>\n<td>N</td>\n<td>E^</td>\n<td>S^</td>\n<td>W^</td>\n<td>N^</td>\n</tr>\n<tr>\n<td>S=2</td>\n<td>S</td>\n<td>W</td>\n<td>N</td>\n<td>E</td>\n<td>S^</td>\n<td>W^</td>\n<td>N^</td>\n<td>E^</td>\n</tr>\n<tr>\n<td>W=4</td>\n<td>W</td>\n<td>N</td>\n<td>E</td>\n<td>S</td>\n<td>W^</td>\n<td>N^</td>\n<td>E^</td>\n<td>S^</td>\n</tr>\n<tr>\n<td>N=6</td>\n<td>N</td>\n<td>E</td>\n<td>S</td>\n<td>W</td>\n<td>N^</td>\n<td>E^</td>\n<td>S^</td>\n<td>W^</td>\n</tr>\n<tr>\n<td>E^=8</td>\n<td>E^</td>\n<td>N^</td>\n<td>W^</td>\n<td>S^</td>\n<td>E</td>\n<td>N</td>\n<td>W</td>\n<td>S</td>\n</tr>\n<tr>\n<td>S^=10</td>\n<td>S^</td>\n<td>E^</td>\n<td>N^</td>\n<td>W^</td>\n<td>S</td>\n<td>E</td>\n<td>N</td>\n<td>W</td>\n</tr>\n<tr>\n<td>W^=12</td>\n<td>W^</td>\n<td>S^</td>\n<td>E^</td>\n<td>N^</td>\n<td>W</td>\n<td>S</td>\n<td>E</td>\n<td>N</td>\n</tr>\n<tr>\n<td>N^=14</td>\n<td>N^</td>\n<td>W^</td>\n<td>S^</td>\n<td>E^</td>\n<td>N</td>\n<td>W</td>\n<td>S</td>\n<td>E</td>\n</tr>\n</tbody>\n</table>\n<p>[This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}</p>"
						},
						{
							"name": "byDirection",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Approximates the vector <code>V(dx,dy)</code> into one of the\neight directions provided by <code>groupD8</code>.</p>"
						},
						{
							"name": "inv",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "isVertical",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Checks if the rotation angle is vertical, i.e. south\nor north. It doesn't work for reflections.</p>"
						},
						{
							"name": "matrixAppendRotationInv",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Helps sprite to compensate texture packer rotation.</p>",
							"description": ""
						},
						{
							"name": "rotate180",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Adds 180 degrees to rotation, which is a commutative\noperation.</p>"
						},
						{
							"name": "sub",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Reverse of <code>add</code>.</p>",
							"description": ""
						},
						{
							"name": "uX",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "uY",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "vX",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "vY",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "GroupD8",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "interaction",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "InteractionData",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "InteractionEvent",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "InteractionManager",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "loaders",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>All classes on this namespace have moved to the high-level <code>PIXI</code> object.</p>",
					"members": [
						{
							"name": "Loader",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Resource",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "mesh",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>All classes on this namespace have moved to the high-level <code>PIXI</code> object.</p>",
					"members": [
						{
							"name": "CanvasMeshRenderer",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Mesh",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "MeshRenderer",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "NineSlicePlane",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Plane",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "RawMesh",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Rope",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "particles",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>This namespace has been removed and items have been moved to\nthe top-level <code>PIXI</code> object.</p>",
					"members": [
						{
							"name": "ParticleContainer",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "ParticleRenderer",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "prepare",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "BasePrepare",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "CanvasPrepare",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Prepare",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "WebGLPrepare",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "settings",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>User's customizable globals for overriding the default PIXI settings, such\nas a renderer's default resolution, framerate, float precision, etc.</p>",
					"members": [
						{
							"name": "ANISOTROPIC_LEVEL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Default anisotropic filtering level of textures.\nUsually from 0 to 16</p>"
						},
						{
							"name": "CAN_UPLOAD_SAME_BUFFER",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Can we upload the same buffer in a single frame?</p>",
							"description": ""
						},
						{
							"name": "CREATE_IMAGE_BITMAP",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Enables bitmap creation before image load. This feature is experimental.</p>",
							"description": ""
						},
						{
							"name": "FAIL_IF_MAJOR_PERFORMANCE_CAVEAT",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Should the <code>failIfMajorPerformanceCaveat</code> flag be enabled as a context option used in the <code>isWebGLSupported</code> function.\nFor most scenarios this should be left as true, as otherwise the user may have a poor experience.\nHowever, it can be useful to disable under certain scenarios, such as headless unit tests.</p>"
						},
						{
							"name": "FILTER_RESOLUTION",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default filter resolution.</p>",
							"description": ""
						},
						{
							"name": "GC_MAX_CHECK_COUNT",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default Garbage Collection maximum check count.</p>",
							"description": ""
						},
						{
							"name": "GC_MAX_IDLE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default Garbage Collection max idle.</p>",
							"description": ""
						},
						{
							"name": "GC_MODE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default Garbage Collection mode.</p>",
							"description": ""
						},
						{
							"name": "MESH_CANVAS_PADDING",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default <code>canvasPadding</code> for canvas-based Mesh rendering.</p>",
							"description": ""
						},
						{
							"name": "MIPMAP_TEXTURES",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>If set to true WebGL will attempt make textures mimpaped by default.\nMipmapping will only succeed if the base texture uploaded has power of two dimensions.</p>"
						},
						{
							"name": "PRECISION_FRAGMENT",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Default specify float precision in fragment shader.\niOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742</p>"
						},
						{
							"name": "PRECISION_VERTEX",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default specify float precision in vertex shader.</p>",
							"description": ""
						},
						{
							"name": "PREFER_ENV",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>The maximum support for using WebGL. If a device does not\nsupport WebGL version, for instance WebGL 2, it will still\nattempt to fallback support to WebGL 1. If you want to\nexplicitly remove feature support to target a more stable\nbaseline, prefer a lower environment.</p>\n<p>Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\nwe disable webgl2 by default for all non-apple mobile devices.</p>"
						},
						{
							"name": "RENDER_OPTIONS",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>The default render options if none are supplied to {@link PIXI.Renderer}\nor {@link PIXI.CanvasRenderer}.</p>",
							"members": [
								{
									"name": "antialias",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "autoDensity",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "backgroundColor",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "clearBeforeRender",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "height",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "legacy",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "preserveDrawingBuffer",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "transparent",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "view",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "width",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "RESOLUTION",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default resolution / device pixel ratio of the renderer.</p>",
							"description": ""
						},
						{
							"name": "RETINA_PREFIX",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The prefix that denotes a URL is for a retina asset.</p>",
							"description": ""
						},
						{
							"name": "ROUND_PIXELS",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.</p>"
						},
						{
							"name": "SCALE_MODE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default scale mode for textures.</p>",
							"description": ""
						},
						{
							"name": "SORTABLE_CHILDREN",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Sets the default value for the container property 'sortableChildren'.\nIf set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "SPRITE_BATCH_SIZE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default sprite batch size.</p>",
							"description": "<p>The default aims to balance desktop and mobile devices.</p>"
						},
						{
							"name": "SPRITE_MAX_TEXTURES",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The maximum textures that this device supports.</p>",
							"description": ""
						},
						{
							"name": "STRICT_TEXTURE_CACHE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>If set to <code>true</code>, <em>only</em> Textures and BaseTexture objects stored\nin the caches ({@link PIXI.utils.TextureCache TextureCache} and\n{@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\nused when calling {@link PIXI.Texture.from Texture.from} or\n{@link PIXI.BaseTexture.from BaseTexture.from}.\nOtherwise, these <code>from</code> calls throw an exception. Using this property\ncan be useful if you want to enforce preloading all assets with\n{@link PIXI.Loader Loader}.</p>"
						},
						{
							"name": "TARGET_FPMS",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Target frames per millisecond.</p>",
							"description": ""
						},
						{
							"name": "TRANSFORM_MODE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default transform type.</p>",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "UPLOADS_PER_FRAME",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default number of uploads per frame using prepare plugin.</p>",
							"description": ""
						},
						{
							"name": "WRAP_MODE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Default wrap modes that are supported by pixi.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ticker",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>This namespace has been removed and items have been moved to\nthe top-level <code>PIXI</code> object.</p>",
					"members": [
						{
							"name": "Ticker",
							"type": "ClassDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "shared",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "utils",
					"type": "NSDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Generalized convenience utilities for PIXI.</p>",
					"members": [
						{
							"name": "mixins",
							"type": "NSDoc",
							"scope": "static",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "delayMixin",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "mixin",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "performMixins",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "CanvasRenderTarget",
							"type": "ClassDoc",
							"brief": "<p>Creates a Canvas element of the given size to be used as a target for rendering to.</p>",
							"description": "",
							"members": [
								{
									"name": "canvas",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The Canvas object that belongs to this CanvasRenderTarget.</p>",
									"description": ""
								},
								{
									"name": "context",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>A CanvasRenderingContext2D object representing a two-dimensional rendering context.</p>",
									"description": ""
								},
								{
									"name": "height",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The height of the canvas buffer in pixels.</p>",
									"description": ""
								},
								{
									"name": "width",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The width of the canvas buffer in pixels.</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Destroys this canvas.</p>",
									"description": ""
								},
								{
									"name": "resize",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Resizes the canvas to the specified width and height.</p>",
									"description": ""
								},
								{
									"name": "clear",
									"type": "MethodDoc",
									"access": "private",
									"scope": "instance",
									"brief": "<p>Clears the canvas that was created by the CanvasRenderTarget class.</p>",
									"description": ""
								}
							]
						},
						{
							"name": "EventEmitter",
							"type": "ClassDoc",
							"brief": "<p>A high performance event emitter</p>",
							"description": ""
						},
						{
							"name": "BaseTextureCache",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "ProgramCache",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TextureCache",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "isMobile",
							"type": "PropertyDoc",
							"brief": "<p>A simple JS library that detects mobile devices.</p>",
							"description": "",
							"members": [
								{
									"name": "amazon",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "amazon",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.device - <code>true</code> if any Silk device</p>"
								},
								{
									"name": "amazon",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.tablet - <code>true</code> if any Silk tablet</p>"
								},
								{
									"name": "amazon",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.phone - <code>true</code> if any Silk phone</p>"
								},
								{
									"name": "android",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "android",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.device - <code>true</code> if any Android device</p>"
								},
								{
									"name": "android",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.tablet - <code>true</code> if any Android tablet</p>"
								},
								{
									"name": "android",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.phone - <code>true</code> if any Android phone</p>"
								},
								{
									"name": "any",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p><code>true</code> if current platform is tablet or phone device</p>"
								},
								{
									"name": "apple",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "apple",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.device - <code>true</code> if any Apple device</p>"
								},
								{
									"name": "apple",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.tablet - <code>true</code> if any Apple iPad</p>"
								},
								{
									"name": "apple",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.phone - <code>true</code> if any Apple iPhone</p>"
								},
								{
									"name": "apple",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.ipod - <code>true</code> if any iPod</p>"
								},
								{
									"name": "phone",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p><code>true</code> if current platform small-screen phone device</p>"
								},
								{
									"name": "tablet",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p><code>true</code> if current platform large-screen tablet device</p>"
								},
								{
									"name": "windows",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "windows",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.device - <code>true</code> if any Windows device</p>"
								},
								{
									"name": "windows",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.tablet - <code>true</code> if any Windows tablet</p>"
								},
								{
									"name": "windows",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>.phone - <code>true</code> if any Windows phone</p>"
								}
							]
						},
						{
							"name": "premultiplyBlendMode",
							"type": "PropertyDoc",
							"brief": "",
							"description": "<p>maps premultiply flag and blendMode to adjusted blendMode</p>"
						},
						{
							"name": "url",
							"type": "PropertyDoc",
							"brief": "<p>Node.js compatible URL utilities.</p>",
							"description": ""
						},
						{
							"name": "earcut",
							"type": "MethodDoc",
							"brief": "<p>A polygon triangulation library</p>",
							"description": ""
						},
						{
							"name": "sayHello",
							"type": "FunctionDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Logs out the version and renderer information for this running instance of PIXI.\nIf you don't want to see this message you can run <code>PIXI.utils.skipHello()</code> before\ncreating your renderer. Keep in mind that doing that will forever make you a jerk face.</p>"
						},
						{
							"name": "clearTextureCache",
							"type": "FunctionDoc",
							"brief": "<p>Removes all textures from cache, but does not destroy them</p>",
							"description": ""
						},
						{
							"name": "correctBlendMode",
							"type": "FunctionDoc",
							"brief": "<p>changes blendMode according to texture format</p>",
							"description": ""
						},
						{
							"name": "createIndicesForQuads",
							"type": "FunctionDoc",
							"brief": "<p>Generic Mask Stack data structure</p>",
							"description": ""
						},
						{
							"name": "decomposeDataUri",
							"type": "FunctionDoc",
							"brief": "",
							"description": "<p>Split a data URI into components. Returns undefined if\nparameter <code>dataUri</code> is not a valid data URI.</p>"
						},
						{
							"name": "DecomposedDataUri",
							"type": "InterfaceDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "charset",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "data",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The actual data</p>"
								},
								{
									"name": "encoding",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Data encoding, eg. <code>base64</code></p>"
								},
								{
									"name": "mediaType",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>type, eg. <code>image</code></p>"
								},
								{
									"name": "subType",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Sub type, eg. <code>png</code></p>"
								}
							]
						},
						{
							"name": "deprecation",
							"type": "FunctionDoc",
							"brief": "",
							"description": "<p>Helper for warning developers about deprecated features &amp; settings.\nA stack track for warnings is given; useful for tracking-down where\ndeprecated methods/properties/classes are being used within the code.</p>"
						},
						{
							"name": "destroyTextureCache",
							"type": "FunctionDoc",
							"brief": "<p>Destroys all texture in the cache</p>",
							"description": ""
						},
						{
							"name": "getResolutionOfUrl",
							"type": "FunctionDoc",
							"brief": "",
							"description": "<p>get the resolution / device pixel ratio of an asset by looking for the prefix\nused by spritesheets and image urls</p>"
						},
						{
							"name": "hex2rgb",
							"type": "FunctionDoc",
							"brief": "<p>Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).</p>",
							"description": ""
						},
						{
							"name": "hex2string",
							"type": "FunctionDoc",
							"brief": "<p>Converts a hexadecimal color number to a string.</p>",
							"description": ""
						},
						{
							"name": "isPow2",
							"type": "FunctionDoc",
							"brief": "<p>Checks if a number is a power of two.</p>",
							"description": ""
						},
						{
							"name": "isWebGLSupported",
							"type": "FunctionDoc",
							"brief": "<p>Helper for checking for WebGL support.</p>",
							"description": ""
						},
						{
							"name": "log2",
							"type": "FunctionDoc",
							"brief": "<p>Computes ceil of log base 2</p>",
							"description": ""
						},
						{
							"name": "nextPow2",
							"type": "FunctionDoc",
							"brief": "<p>Rounds to next power of two.</p>",
							"description": ""
						},
						{
							"name": "premultiplyRgba",
							"type": "FunctionDoc",
							"brief": "<p>combines rgb and alpha to out array</p>",
							"description": ""
						},
						{
							"name": "premultiplyTint",
							"type": "FunctionDoc",
							"brief": "<p>premultiplies tint</p>",
							"description": ""
						},
						{
							"name": "premultiplyTintToRgba",
							"type": "FunctionDoc",
							"brief": "<p>converts integer tint and float alpha to vec4 form, premultiplies by default</p>",
							"description": ""
						},
						{
							"name": "removeItems",
							"type": "FunctionDoc",
							"brief": "<p>Remove items from a javascript array without generating garbage</p>",
							"description": ""
						},
						{
							"name": "rgb2hex",
							"type": "FunctionDoc",
							"brief": "<p>Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.</p>",
							"description": ""
						},
						{
							"name": "sign",
							"type": "FunctionDoc",
							"brief": "<p>Returns sign of number</p>",
							"description": ""
						},
						{
							"name": "skipHello",
							"type": "FunctionDoc",
							"brief": "<p>Skips the hello message of renderers that are created after this is run.</p>",
							"description": ""
						},
						{
							"name": "string2hex",
							"type": "FunctionDoc",
							"brief": "",
							"description": "<p>Converts a string to a hexadecimal color number.\nIt can handle:\nhex strings starting with #: &quot;#ffffff&quot;\nhex strings starting with 0x: &quot;0xffffff&quot;\nhex strings without prefix: &quot;ffffff&quot;\ncss colors: &quot;black&quot;</p>"
						},
						{
							"name": "trimCanvas",
							"type": "FunctionDoc",
							"brief": "<p>Trim transparent borders from a canvas</p>",
							"description": ""
						},
						{
							"name": "uid",
							"type": "FunctionDoc",
							"brief": "<p>Gets the next unique identifier</p>",
							"description": ""
						},
						{
							"name": "mapPremultipliedBlendModes",
							"type": "FunctionDoc",
							"access": "private",
							"brief": "<p>Corrects PixiJS blend, takes premultiplied alpha into account</p>",
							"description": ""
						}
					]
				},
				{
					"name": "glCore",
					"type": "NSDoc",
					"access": "private",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "shader",
							"type": "NSDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "defaultValue",
									"type": "MethodDoc",
									"access": "private",
									"brief": "",
									"description": ""
								},
								{
									"name": "mapSize",
									"type": "MethodDoc",
									"access": "private",
									"brief": "",
									"description": ""
								},
								{
									"name": "compileProgram",
									"type": "FunctionDoc",
									"access": "private",
									"brief": "",
									"description": ""
								}
							]
						}
					]
				},
				{
					"name": "brend",
					"type": "NSDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "AggregateUniformsBatch",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Allows usage of uniforms when rendering display-objects in batches. It expects you to\naggregate each display-object's uniforms in an array and that the shader will pick\nthe appropriate uniform at runtime (an index into the uniforms array will be passed).</p>\n<p><strong>Usage in shader:</strong></p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// Your display-objects&#x27; affine transforms are aggregated into this array.</span>\n<span class=\"hljs-keyword\">uniform</span> mat3d affineTransform[];\n\n<span class=\"hljs-comment\">// For WebGL1+ machines, your uniforms may be fetched by the uniform-ID attrib (float).</span>\n<span class=\"hljs-keyword\">varying</span> <span class=\"hljs-type\">float</span> vUniformID;\n\n<span class=\"hljs-comment\">// For WebGL-2 only, to prevent interpolation overhead, you may use the flat in variables. You</span>\n<span class=\"hljs-comment\">// can configure this in AggregateUniformShaderFactory.</span>\n<span class=\"hljs-keyword\">flat</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-type\">int</span> uniformID;\n</code></pre>\n<h1>No Aggregation Mode</h1>\n<p>Aggregating uniforms into arrays requries a uniform-ID attribute to be uploaded as well. This\nmay cost a lot of memory if your uniforms don't really change a lot. For these cases, you can\ndisable uniform aggregation by not passing a <code>uniformIDAttrib</code>. This will make batches <strong>only</strong>\nhave one value for each uniform. The uniforms will still be uploaded as 1-element arrays, however.</p>",
							"members": [
								{
									"name": "geometryOffset",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Index of the first vertex of this batch's geometry in the uploaded geometry.</p>",
									"description": ""
								},
								{
									"name": "renderer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Renderer holding the uniform redirects</p>"
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>State required to render this batch.</p>",
									"description": ""
								},
								{
									"name": "textureBuffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Textures that are used by the display-object's in this batch.</p>",
									"description": ""
								},
								{
									"name": "uidMap",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Map of base-texture UIDs to texture indices into <code>uSamplers</code>.</p>",
									"description": ""
								},
								{
									"name": "uniformBuffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The buffer of uniform arrays of the display-objects</p>"
								},
								{
									"name": "uniformLength",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>No. of uniforms buffered (per uniform name)</p>"
								},
								{
									"name": "uniformMap",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Array mapping the in-batch ID to the uniform ID.</p>"
								},
								{
									"name": "reset",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "upload",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "AggregateUniformsBatchFactory",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Factory for producing aggregate-uniforms batches. This is useful for shaders that\n<strong>must</strong> use uniforms.</p>",
							"members": [
								{
									"name": "_batchBuffer",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_textureBuffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_textureCount",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Textures per display-object</p>"
								},
								{
									"name": "_textureLimit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Max. no of textures per batch (should be &lt;= texture units of GPU)</p>"
								},
								{
									"name": "_textureProperty",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Property in which textures are kept of display-objects</p>"
								},
								{
									"name": "MAX_UNIFORMS",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The max. uniforms until the batch is filled</p>"
								},
								{
									"name": "_batchCount",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Number of batches created since last reset.</p>"
								},
								{
									"name": "_batchPool",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Pool to batch objects into which data is fed.</p>"
								},
								{
									"name": "_renderer",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_createUniformBuffer",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Creates an array for each uniform-name in an object.</p>",
									"description": ""
								},
								{
									"name": "_matchUniforms",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Finds a matching set of uniforms in the buffer.</p>",
									"description": ""
								},
								{
									"name": "_newBatch",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_nextBatch",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_putAllTextures",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_resetUniformBuffer",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Resets each array in the uniform buffer</p>"
								},
								{
									"name": "access",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Returns the built batch pool. The array returned may be larger than the pool\nitself.</p>"
								},
								{
									"name": "build",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Creates the batch object and pushes it into the pool This also resets any state\nso that a new batch can be started again.</p>"
								},
								{
									"name": "put",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Puts the display-object into the current batch, if possible.</p>",
									"description": ""
								},
								{
									"name": "ready",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "reset",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Clears the batch pool.</p>",
									"description": ""
								},
								{
									"name": "size",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Size of the batch pool built since last reset.</p>",
									"description": ""
								},
								{
									"name": "_buildBatch",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_put",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Stores uniforms in the current batch, if possible.</p>",
									"description": "<p>If you want to override this, be sure to return beforehand if <code>super._put</code> returns\nfalse:</p>\n<pre><code class=\"hljs\">_put(displayObject: PIXI.DisplayObject): <span class=\"hljs-keyword\">boolean</span>\n{\n     <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">super</span>._put(displayObject))\n     {\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n     }\n\n     <span class=\"hljs-comment\">// Your logic ...</span>\n}\n</code></pre>"
								}
							]
						},
						{
							"name": "AttributeRedirect",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>This redirect defines an attribute of a display-object's geometry. The attribute\ndata is expected to be stored in a <code>PIXI.ViewableBuffer</code>, in an array, or (if\njust one element) as the property itself.</p>",
							"members": [
								{
									"name": "glSize",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Size of attribute in terms of <code>glType</code>.</p>",
									"description": "<p>Note that <code>glSize * glType &lt;= size * type</code></p>"
								},
								{
									"name": "glslIdentifer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The shader variable that references the resource, e.g. attribute or uniform\nname.</p>"
								},
								{
									"name": "glType",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Type of attribute, when uploading.</p>",
									"description": "<p>Normally, you would use the corresponding type for\nthe view on source. However, to speed up uploads\nyou can aggregate attribute values in larger data\ntypes. For example, an RGBA vec4 (byte-sized channels)\ncan be represented as one <code>Uint32</code>, while having\na <code>glType</code> of <code>UNSIGNED_BYTE</code>.</p>"
								},
								{
									"name": "normalize",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Whether to normalize the attribute values.</p>",
									"description": ""
								},
								{
									"name": "properSize",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>This is equal to <code>size</code> or 1 if size is <code>%notarray%</code>.</p>",
									"description": ""
								},
								{
									"name": "size",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Number of elements to extract out of <code>source</code> with\nthe given view type, for one vertex.</p>\n<p>If source isn't an array (only one element), then\nyou can set this to <code>'%notarray%'</code>.</p>"
								},
								{
									"name": "source",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The property on the display-object that holds the resource.</p>",
									"description": "<p>Instead of a property, you can provide a callback that generates the resource\non invokation.</p>"
								},
								{
									"name": "type",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The type of data stored in the source buffer. This can be any of: <code>int8</code>, <code>uint8</code>,\n<code>int16</code>, <code>uint16</code>, <code>int32</code>, <code>uint32</code>, or (by default) <code>float32</code>.</p>"
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "BatchDrawer",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Executes the final stage of batch rendering - drawing. The drawer can assume that\nall display-objects have been into the batch-factory and the batch-geometry factory.</p>",
							"members": [
								{
									"name": "renderer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "draw",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>This method will be called after all display-object have been fed into the\nbatch and batch-geometry factories.</p>\n<p><strong>Hint</strong>: You will call some form of <code>BatchGeometryFactory#build</code>; be sure to release\nthat geometry for reuse in next render pass via <code>BatchGeometryFactory#release(geom)</code>.</p>"
								}
							]
						},
						{
							"name": "BatchGeometryFactory",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Factory class that generates the geometry for a whole batch by feeding on\nthe individual display-object geometries. This factory is reusable, i.e. you\ncan build another geometry after a {@link build} call.</p>\n<p><strong>Optimizations:</strong> To speed up geometry generation, this compiles an optimized\npacking function that pushes attributes without looping through the attribute\nredirects.</p>\n<p><strong>Default Format:</strong> If you are not using a custom draw-call issuer, then\nthe batch geometry must have an interleaved attribute data buffer and one\nindex buffer.</p>\n<p><strong>Customization:</strong> If you want to customize the batch geometry, then you must\nalso define your draw call issuer.</p>\n<p><strong>inBatchID Support</strong>: If you specified an <code>inBatchID</code> attribute in the batch-renderer,\nthen this will support it automatically. The aggregate-uniforms pipeline doesn't need a custom\ngeometry factory.</p>",
							"members": [
								{
									"name": "_geometryPool",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Batch geometries that can be reused.</p>",
									"description": ""
								},
								{
									"name": "_indexCountProperty",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "geometryMerger",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>This lazy getter returns the geometry-merger function. This function\ntakes one argument - the display-object to be appended to the batch -\nand pushes its geometry to the batch geometry.</p>\n<p>You can overwrite this property with a custom geometry-merger function\nif customizing <code>PIXI.brend.BatchGeometryFactory</code>.</p>"
								},
								{
									"name": "append",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Append's the display-object geometry to this batch's geometry. You must override\nthis you need to &quot;modify&quot; the geometry of the display-object before merging into\nthe composite geometry (for example, adding an ID to a special uniform)</p>"
								},
								{
									"name": "build",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "init",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Ensures this factory has enough space to buffer the given number of vertices\nand indices. This should be called before feeding display-objects from the\nbatch.</p>"
								},
								{
									"name": "release",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "getAttributeBuffer",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Allocates an attribute buffer with sufficient capacity to hold <code>size</code> elements.</p>",
									"description": ""
								},
								{
									"name": "getIndexBuffer",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Allocates an index buffer (<code>Uint16Array</code>) with sufficient capacity to hold <code>size</code> indices.</p>",
									"description": ""
								}
							]
						},
						{
							"name": "BatchRenderer",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>This object renderer renders multiple display-objects in batches. It can greatly\nreduce the number of draw calls issued per frame.</p>\n<h2>Batch Rendering Pipeline</h2>\n<p>The batch rendering pipeline consists of the following stages:</p>\n<ul>\n<li>\n<p><strong>Display-Object Buffering</strong>: Each display-object is kept in a buffer until it fills up or a\nflush is required.</p>\n</li>\n<li>\n<p><strong>Batch Generation</strong>: In a sliding window, display-object batches are generated based off of certain\nconstraints like GPU texture units and the uniforms used in each display-object. This is done using an\ninstance of {@link PIXI.brend.BatchFactory}.</p>\n</li>\n<li>\n<p><strong>Geometry Composition</strong>: The geometries of all display-objects are merged together in a\ncomposite geometry. This is done using an instance of {@link PIXI.brend.BatchGeometryFactory}.</p>\n</li>\n<li>\n<p><strong>Drawing</strong>: Each batch is rendered in-order using <code>gl.draw*</code>. The textures and\nuniforms of each display-object are uploaded as arrays. This is done using an instance of\n{@link PIXI.brend.BatchDrawer}.</p>\n</li>\n</ul>\n<p>Each stage in this pipeline can be configured by overriding the appropriate component and passing that\nclass to <code>BatchRendererPluginFactory.from*</code>.</p>\n<h2>Shaders</h2>\n<h3>Shader templates</h3>\n<p>Since the max. display-object count per batch is not known until the WebGL context is created,\nshaders are generated at runtime by processing shader templates. A shader templates has &quot;%macros%&quot;\nthat are replaced by constants at runtime.</p>\n<p>To use shader templates, simply use {@link PIXI.brend.BatchShaderFactory#derive}. This will generate a\nfunction that derives a shader from your template at runtime.</p>\n<h3>Textures</h3>\n<p>The batch renderer uploads textures in the <code>uniform sampler2D uSamplers[%texturesPerBatch%];</code>. The\n<code>varying float vTextureId</code> defines the index into this array that holds the current display-object's\ntexture.</p>\n<h3>Uniforms</h3>\n<p>This renderer currently does not support customized uniforms for display-objects. This is a\nwork-in-progress feature.</p>\n<h2>Learn more</h2>\n<p>This batch renderer uses the PixiJS object-renderer API to hook itself:</p>\n<ol>\n<li>\n<p>[PIXI.ObjectRenderer]{@link http://pixijs.download/release/docs/PIXI.ObjectRenderer.html}</p>\n</li>\n<li>\n<p>[PIXI.AbstractBatchRenderer]{@link http://pixijs.download/release/docs/PIXI.AbstractBatchRenderer.html}</p>\n</li>\n</ol>",
							"members": [
								{
									"name": "_masterIDAttrib",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>This is an advanced feature that allows you to pack the {@code _texIDAttrib}, {@code _uniformIDAttrib},\n{@code _inBatchIDAttrib}, and other information into one 32-bit float attribute. You can then unpack\nthem in the vertex shader and pass varyings to the fragment shader (because {@code int} varyings are not\nsupported).</p>\n<p>To use it, you must provide your own {@link BatchGeometryFactory} that overrides\n{@link BatchGeometryFactory#append} and sets the {@code _masterIDAttrib}.</p>"
								},
								{
									"name": "renderer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The renderer this manager works for.</p>",
									"description": ""
								},
								{
									"name": "_attribRedirects",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Attribute redirects</p>",
									"description": ""
								},
								{
									"name": "_BatchDrawerClass",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Batch drawer class. Its constructor takes one argument - this batch renderer.</p>"
								},
								{
									"name": "_batchFactory",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_BatchFactoryClass",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Batch-factory class.</p>"
								},
								{
									"name": "_BatchGeometryFactoryClass",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Batch-geometry factory class. Its constructor takes one argument - this batch renderer.</p>"
								},
								{
									"name": "_drawer",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_geometryFactory",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_inBatchIDAttrib",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Indexes the display-object in the batch.</p>"
								},
								{
									"name": "_indexCountProperty",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>A manual resolution of the number of indicies in a display object's geometry. This is ignored if the\nindex buffer is not used (see _indexProperty). If not provided, the index buffer's entire length\nis used.</p>"
								},
								{
									"name": "_indexProperty",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Indices property</p>",
									"description": ""
								},
								{
									"name": "_shaderFunction",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Shader generating function (takes the batch renderer)</p>"
								},
								{
									"name": "_stateFunction",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>State generating function (takes a display-object)</p>"
								},
								{
									"name": "_texIDAttrib",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Texture ID attribute</p>"
								},
								{
									"name": "_textureProperty",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Texture(s) property</p>"
								},
								{
									"name": "_texturesPerObject",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Textures per display-object</p>"
								},
								{
									"name": "_uniformIDAttrib",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Indexes the uniforms of the display-object in the uniform arrays. This is not equal to the\nin-batch ID because equal uniforms are not uploaded twice.</p>"
								},
								{
									"name": "_uniformRedirects",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Uniform redirects. If you use uniforms in your shader, be sure to use one the compatible\nbatch factories (like <code>PIXI.brend.AggregateUniformsBatchFactory</code>).</p>"
								},
								{
									"name": "_vertexCountProperty",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>A manual resolution of the number of vertices in a display object's geometry. If not provided, this is\ncalculated as the number of element in the first attribute's buffer.</p>"
								},
								{
									"name": "options",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>The options used to create this batch renderer.</p>"
								},
								{
									"name": "calculateIndexCount",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Calculates the number of indices in the display object's geometry.</p>",
									"description": ""
								},
								{
									"name": "calculateVertexCount",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Calculates the number of vertices in the display object's geometry.</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Creates a batch renderer the renders display-objects with the described geometry.</p>",
									"description": "<p>To register a batch-renderer plugin, you must use the API provided by <code>PIXI.brend.BatchRendererPluginFactory</code>.</p>"
								},
								{
									"name": "contextChange",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Internal method that is called whenever the renderer's WebGL context changes.</p>",
									"description": ""
								},
								{
									"name": "destroy",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Generic destruction method that frees all resources. This\nshould be called by subclasses.</p>"
								},
								{
									"name": "flush",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Forces buffered display-objects to be rendered immediately. This should not be called unless absolutely\nnecessary like the following scenarios:</p>\n<ul>\n<li>\n<p>before directly rendering your display-object, to preserve render-order.</p>\n</li>\n<li>\n<p>to do a nested render pass (calling <code>Renderer#render</code> inside a <code>render</code> method)\nbecause the PixiJS renderer is not re-entrant.</p>\n</li>\n</ul>"
								},
								{
									"name": "render",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Adds the display-object to be rendered in a batch. Your display-object's render/_render method should call\nthis as follows:</p>\n<pre><code class=\"hljs language-js\">renderer.setObjectRenderer(&lt;BatchRenderer&gt;);\n&lt;BatchRenderer&gt;.render(<span class=\"hljs-built_in\">this</span>);\n</code></pre>"
								},
								{
									"name": "start",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>This is an internal method. It ensures that the batch renderer is ready to start buffering display-objects.\nThis is automatically invoked by the renderer's batch system.</p>"
								},
								{
									"name": "stop",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Internal method that stops buffering of display-objects and flushes any existing buffers.</p>",
									"description": ""
								}
							]
						},
						{
							"name": "BatchRendererPluginFactory",
							"type": "ClassDoc",
							"brief": "<p>Factory class for creating a batch-renderer.</p>",
							"description": "",
							"members": [
								{
									"name": "from",
									"type": "MethodDoc",
									"scope": "static",
									"brief": "",
									"description": "<p>Generates a fully customized <code>BatchRenderer</code> that aggregates primitives and textures. This is useful\nfor non-uniform based display-objects.</p>"
								}
							]
						},
						{
							"name": "BatchShaderFactory",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Exposes an easy-to-use API for generating shader-functions to use in\nthe batch renderer!</p>\n<p>You are required to provide an injector map, which maps macros to functions\nthat return a string value for those macros given a renderer. By default, only one\ninjector is used - the textures per batch <code>%texturesPerBatch%</code> macro. This is replaced by\nthe number of textures passed to the <code>uSamplers</code> textures uniform.</p>\n<p><strong>Built-in Injectors</strong>:</p>\n<ul>\n<li>\n<p><code>%texturesPerBatch%</code>: replaced by the max. textures allowed by WebGL context</p>\n</li>\n<li>\n<p><code>%uniformsPerBatch%</code>: replaced by the (aggregate-uniforms) batch factory's <code>MAX_UNIFORMS</code> property.</p>\n</li>\n</ul>",
							"members": [
								{
									"name": "disableVertexShaderTemplate",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Disable vertex shader templates to speed up shader\ngeneration.</p>"
								},
								{
									"name": "_cache",
									"type": "PropertyDoc",
									"access": "private",
									"scope": "instance",
									"brief": "",
									"description": "<p>Maps the stringifed state of the batch renderer to the\ngenerated shader.</p>"
								},
								{
									"name": "_cState",
									"type": "PropertyDoc",
									"access": "private",
									"scope": "instance",
									"brief": "<p>Unstringifed current state of the batch renderer.</p>",
									"description": ""
								},
								{
									"name": "_generateShader",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>WARNING: Do not pass <code>uSamplers</code> in your uniforms. They\nwill be added to your shader instance directly.</p>"
								},
								{
									"name": "derive",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>This essentially returns a function for generating the shader for a batch\nrenderer.</p>"
								}
							]
						},
						{
							"name": "Redirect",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Redirects are used to aggregate the resources needed by the WebGL pipeline to render\na display-object. This includes the base primitives (geometry), uniforms, and\ntextures (which are handled as &quot;special&quot; uniforms).</p>",
							"members": [
								{
									"name": "glslIdentifer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The shader variable that references the resource, e.g. attribute or uniform\nname.</p>"
								},
								{
									"name": "source",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The property on the display-object that holds the resource.</p>",
									"description": "<p>Instead of a property, you can provide a callback that generates the resource\non invokation.</p>"
								}
							]
						},
						{
							"name": "StdBatch",
							"type": "ClassDoc",
							"brief": "<p>Resources that need to be uploaded to WebGL to render one batch.</p>",
							"description": "<p>To customize batches, you must create your own batch factory by extending the\n<code>PIXI.brend.StdBatchFactory</code> class.</p>",
							"members": [
								{
									"name": "geometryOffset",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Index of the first vertex of this batch's geometry in the uploaded geometry.</p>",
									"description": ""
								},
								{
									"name": "state",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>State required to render this batch.</p>",
									"description": ""
								},
								{
									"name": "textureBuffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Textures that are used by the display-object's in this batch.</p>",
									"description": ""
								},
								{
									"name": "uidMap",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>Map of base-texture UIDs to texture indices into <code>uSamplers</code>.</p>",
									"description": ""
								},
								{
									"name": "reset",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Reset this batch to become &quot;fresh&quot;!</p>",
									"description": ""
								},
								{
									"name": "upload",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Uploads the resources required before rendering this batch. If you override\nthis, you must call <code>super.upload</code>.</p>"
								}
							]
						},
						{
							"name": "StdBatchFactory",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>Factory for producing &quot;standard&quot; (based on state, geometry, &amp; textures) batches of\ndisplay-objects.</p>\n<p><strong>NOTE:</strong> Instead of &quot;building&quot; batches, this factory actually keeps the batches in\na buffer so they can be accessed together at the end.</p>\n<p><strong>Shared Textures</strong>: If display-objects in the same batch use the same base-texture,\nthen that base-texture is not uploaded twice. This allows for more better batch density\nwhen you use texture atlases (textures with same base-texture). This is one reason why\ntextures are treated as &quot;special&quot; uniforms.</p>",
							"members": [
								{
									"name": "_batchBuffer",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_textureBuffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_textureCount",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Textures per display-object</p>"
								},
								{
									"name": "_textureLimit",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Max. no of textures per batch (should be &lt;= texture units of GPU)</p>"
								},
								{
									"name": "_textureProperty",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Property in which textures are kept of display-objects</p>"
								},
								{
									"name": "_batchBuffer",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Display-objects in current batch</p>"
								},
								{
									"name": "_batchCount",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Number of batches created since last reset.</p>"
								},
								{
									"name": "_batchPool",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Pool to batch objects into which data is fed.</p>"
								},
								{
									"name": "_renderer",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_nextBatch",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "_put",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Should store any information from the display-object to be put into\nthe batch.</p>"
								},
								{
									"name": "_putAllTextures",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "access",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Returns the built batch pool. The array returned may be larger than the pool\nitself.</p>"
								},
								{
									"name": "build",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Creates the batch object and pushes it into the pool This also resets any state\nso that a new batch can be started again.</p>"
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "put",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Puts the display-object into the current batch, if possible.</p>",
									"description": ""
								},
								{
									"name": "ready",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "reset",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Clears the batch pool.</p>",
									"description": ""
								},
								{
									"name": "size",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Size of the batch pool built since last reset.</p>",
									"description": ""
								},
								{
									"name": "_buildBatch",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": "<p>Should add any information required to render the batch. If you override this,\nyou must call <code>super._buildBatch</code> and clear any state.</p>"
								},
								{
									"name": "_newBatch",
									"type": "MethodDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "UniformRedirect",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>This redirect is used to aggregate &amp; upload uniforms required for shading the\ndisplay-object.</p>",
							"members": [
								{
									"name": "glslIdentifer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The shader variable that references the resource, e.g. attribute or uniform\nname.</p>"
								},
								{
									"name": "source",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The property on the display-object that holds the resource.</p>",
									"description": "<p>Instead of a property, you can provide a callback that generates the resource\non invokation.</p>"
								}
							]
						},
						{
							"name": "IBatchGeometryFactory",
							"type": "InterfaceDoc",
							"brief": "",
							"description": "<p>This interface defines the methods you need to implement to creating your own batch\ngeometry factory.</p>\n<p>The constructor of an implementation should take only one argument - the batch renderer.</p>",
							"members": [
								{
									"name": "append",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Adds the display-object to the batch geometry.</p>",
									"description": "<p>If the display-object's shader also uses textures (in <code>uSamplers</code> uniform), then it will\nbe given a texture-ID to get the texture from the <code>uSamplers</code> array. If it uses multiple\ntextures, then the texture-ID is an array of indices into <code>uSamplers</code>. The texture-attrib\npassed to the batch renderer sets the name of the texture-ID attribute (defualt is <code>aTextureId</code>).</p>"
								},
								{
									"name": "build",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>This should wrap up the batch geometry in a <code>PIXI.Geometry</code> object.</p>",
									"description": ""
								},
								{
									"name": "init",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Called before the batch renderer starts feeding the display-objects. This can be used\nto pre-allocated space for the batch geometry.</p>"
								},
								{
									"name": "release",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>This is used to return a batch geometry so it can be pooled and reused in a future <code>build()</code>\ncall.</p>"
								}
							]
						}
					]
				},
				{
					"name": "graphicsUtils",
					"type": "NSDoc",
					"brief": "<p>Generalized convenience utilities for Graphics.</p>",
					"description": "",
					"members": [
						{
							"name": "BatchPart",
							"type": "ClassDoc",
							"brief": "",
							"description": "<p>A structure to hold interim batch objects for Graphics.</p>",
							"members": [
								{
									"name": "begin",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Begin batch part</p>",
									"description": ""
								},
								{
									"name": "end",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>End batch part</p>",
									"description": ""
								}
							]
						},
						{
							"name": "Star",
							"type": "ClassDoc",
							"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
							"description": "",
							"members": [
								{
									"name": "closeStroke",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p><code>false</code> after moveTo, <code>true</code> after <code>closePath</code>. In all other cases it is <code>true</code>.</p>"
								},
								{
									"name": "points",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>An array of the points of this polygon</p>",
									"description": ""
								},
								{
									"name": "type",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
									"description": ""
								},
								{
									"name": "clone",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Creates a clone of this polygon</p>",
									"description": ""
								},
								{
									"name": "contains",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Checks whether the x and y coordinates passed to this function are contained within this polygon</p>",
									"description": ""
								}
							]
						},
						{
							"name": "BATCH_POOL",
							"type": "PropertyDoc",
							"brief": "<p>Batch pool, stores unused batches for preventing allocations.</p>",
							"description": ""
						},
						{
							"name": "DRAW_CALL_POOL",
							"type": "PropertyDoc",
							"brief": "<p>Draw call pool, stores unused draw calls for preventing allocations.</p>",
							"description": ""
						},
						{
							"name": "FILL_COMMANDS",
							"type": "PropertyDoc",
							"brief": "<p>Map of fill commands for each shape type.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "resources",
					"type": "NSDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "BlobResource",
							"type": "ClassDoc",
							"brief": "<p>Resource that fetches texture data over the network and stores it in a buffer.</p>",
							"description": "",
							"members": [
								{
									"name": "buffer",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The viewable buffer on the data</p>"
								},
								{
									"name": "origin",
									"type": "PropertyDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>The URL of the texture file</p>"
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "load",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Loads the blob</p>",
									"description": ""
								}
							]
						}
					]
				},
				{
					"name": "systems",
					"type": "NSDoc",
					"brief": "",
					"description": ""
				},
				{
					"name": "CanvasRenderTarget",
					"type": "ClassDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "FilterManager",
					"type": "ClassDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "getRenderTarget",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "returnRenderTarget",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "TransformBase",
					"type": "ClassDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "TransformStatic",
					"type": "ClassDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "WebGLRenderer",
					"type": "ClassDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "AbstractMaskSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage specific types of masking operations.</p>",
					"description": "",
					"members": [
						{
							"name": "maskStack",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The mask stack</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "glConst",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Constant for gl.enable</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the mask stack.</p>",
							"description": ""
						},
						{
							"name": "getStackLength",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>gets count of masks of certain type</p>"
						},
						{
							"name": "setMaskStack",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the mask stack that is used by this System.</p>",
							"description": ""
						},
						{
							"name": "_useCurrent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setup renderer to use the current mask data.</p>"
						}
					]
				},
				{
					"name": "AbstractMultiResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource that can manage several resource (items) inside.\nAll resources need to have the same pixel size.\nParent class for CubeResource and ArrayResource</p>",
					"members": [
						{
							"name": "baseTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Bound baseTexture, there can only be one</p>"
						},
						{
							"name": "bind",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set the parent base texture</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "itemDirtyIds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dirty IDs for each part</p>"
						},
						{
							"name": "items",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of partial baseTextures that correspond to resources</p>"
						},
						{
							"name": "length",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Number of elements in array</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Unset the parent base texture</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "_load",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Promise when loading</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "addBaseTextureAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set a baseTexture by ID</p>",
							"description": ""
						},
						{
							"name": "addResourceAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set a resource by ID</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy this BaseImageResource</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Load all the resources simultaneously</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the texture or returns false if it cant for some reason. Override this.</p>",
							"description": ""
						},
						{
							"name": "initFromArray",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>used from ArrayResource and CubeResource constructors</p>"
						}
					]
				},
				{
					"name": "AbstractRenderer",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\nand {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.</p>",
					"members": [
						{
							"name": "autoResize",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "autoDensity",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.</p>",
							"description": ""
						},
						{
							"name": "backgroundColor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The background color to fill if not transparent</p>",
							"description": ""
						},
						{
							"name": "clearBeforeRender",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\nIf the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\nframe to set the canvas background color. If the scene is transparent PixiJS will use clearRect\nto clear the canvas every frame. Disable this by setting this to false. For example, if\nyour game has a canvas filling background image you often don't need this set.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.height, actual number of pixels in the canvas by vertical.</p>",
							"description": ""
						},
						{
							"name": "options",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The supplied constructor options.</p>",
							"description": ""
						},
						{
							"name": "plugins",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of plugins.</p>"
						},
						{
							"name": "preserveDrawingBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The value of the preserveDrawingBuffer flag affects whether or not the contents of\nthe stencil buffer is retained after rendering.</p>"
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The resolution / device pixel ratio of the renderer.</p>",
							"description": ""
						},
						{
							"name": "screen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Measurements of the screen. (0, 0, screenWidth, screenHeight).</p>",
							"description": "<p>Its safe to use as filterArea or hitArea for the whole stage.</p>"
						},
						{
							"name": "transparent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether the render view is transparent.</p>",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the renderer.</p>",
							"description": ""
						},
						{
							"name": "view",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The canvas element that everything is drawn to.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.width, actual number of pixels in the canvas by horizontal.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColor",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a number.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorRgba",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as an [R, G, B] array.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorString",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a string.</p>",
							"description": ""
						},
						{
							"name": "_lastObjectRendered",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The last root object that the renderer tried to render.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes everything from the renderer and optionally removes the Canvas DOM element.</p>",
							"description": ""
						},
						{
							"name": "generateTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Useful function that returns a texture of the display object that can then be used to create sprites\nThis can be quite useful if your displayObject is complicated and needs to be reused multiple times.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Resizes the screen and canvas to the specified width and height.\nCanvas dimensions are multiplied by resolution.</p>"
						},
						{
							"name": "initPlugins",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize the plugins.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "AccessibilityManager",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Accessibility manager recreates the ability to tab and have content read by screen readers.\nThis is very important as it can possibly help people with disabilities access PixiJS content.</p>\n<p>A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\nevents as if the mouse was being used, minimizing the effort required to implement.</p>\n<p>An instance of this class is automatically created by default, and can be found at <code>renderer.plugins.accessibility</code></p>",
					"members": [
						{
							"name": "debug",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Setting this to true will visually show the divs.</p>",
							"description": ""
						},
						{
							"name": "isActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A flag</p>"
						},
						{
							"name": "isMobileAccessibility",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A flag</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this accessibility manager works for.</p>",
							"description": ""
						},
						{
							"name": "_hookDiv",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_onKeyDown",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>pre-bind the functions</p>",
							"description": ""
						},
						{
							"name": "_onMouseMove",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>pre-bind the functions</p>",
							"description": ""
						},
						{
							"name": "androidUpdateCount",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>count to throttle div updates on android devices</p>"
						},
						{
							"name": "androidUpdateFrequency",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>the frequency to update the div elements ()</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The array of currently active accessible items.</p>",
							"description": ""
						},
						{
							"name": "div",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.</p>",
							"description": ""
						},
						{
							"name": "pool",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>A simple pool for storing divs.</p>",
							"description": ""
						},
						{
							"name": "renderId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is a tick used to check if an object is no longer being rendered.</p>",
							"description": ""
						},
						{
							"name": "capHitArea",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adjust the hit area based on the bounds of a display object</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the accessibility manager</p>",
							"description": ""
						},
						{
							"name": "updateDebugHTML",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>private function that will visually add the information to the\naccessability div</p>"
						},
						{
							"name": "_onClick",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Maps the div button press to pixi's InteractionManager (click)</p>",
							"description": ""
						},
						{
							"name": "_onFocus",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Maps the div focus events to pixi's InteractionManager (mouseover)</p>",
							"description": ""
						},
						{
							"name": "_onFocusOut",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Maps the div focus events to pixi's InteractionManager (mouseout)</p>",
							"description": ""
						},
						{
							"name": "_onKeyDown",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when a key is pressed</p>",
							"description": ""
						},
						{
							"name": "_onMouseMove",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the mouse moves across the renderer element</p>",
							"description": ""
						},
						{
							"name": "activate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Activating will cause the Accessibility layer to be shown.\nThis is called when a user presses the tab key.</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Adds a DisplayObject to the accessibility manager</p>",
							"description": ""
						},
						{
							"name": "createTouchHook",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Creates the touch hooks.</p>",
							"description": ""
						},
						{
							"name": "deactivate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Deactivating will cause the Accessibility layer to be hidden.\nThis is called when a user moves the mouse.</p>"
						},
						{
							"name": "destroyTouchHook",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the touch hooks.</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.</p>",
							"description": ""
						},
						{
							"name": "updateAccessibleObjects",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "AnimatedSprite",
					"type": "ClassDoc",
					"brief": "<p>An AnimatedSprite is a simple way to display an animation depicted by a list of textures.</p>",
					"description": "<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> alienImages = [<span class=\"hljs-string\">&quot;image_sequence_01.png&quot;</span>,<span class=\"hljs-string\">&quot;image_sequence_02.png&quot;</span>,<span class=\"hljs-string\">&quot;image_sequence_03.png&quot;</span>,<span class=\"hljs-string\">&quot;image_sequence_04.png&quot;</span>];\n<span class=\"hljs-keyword\">let</span> textureArray = [];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++)\n{\n     <span class=\"hljs-keyword\">let</span> texture = PIXI.Texture.from(alienImages[i]);\n     textureArray.push(texture);\n};\n\n<span class=\"hljs-keyword\">let</span> animatedSprite = <span class=\"hljs-keyword\">new</span> PIXI.AnimatedSprite(textureArray);\n</code></pre>\n<p>The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\ncontaining the animation definitions:</p>\n<pre><code class=\"hljs language-js\">PIXI.Loader.shared.add(<span class=\"hljs-string\">&quot;assets/spritesheet.json&quot;</span>).load(setup);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> sheet = PIXI.Loader.shared.resources[<span class=\"hljs-string\">&quot;assets/spritesheet.json&quot;</span>].spritesheet;\n  animatedSprite = <span class=\"hljs-keyword\">new</span> PIXI.AnimatedSprite(sheet.animations[<span class=\"hljs-string\">&quot;image_sequence&quot;</span>]);\n  ...\n}\n</code></pre>",
					"members": [
						{
							"name": "FrameObject",
							"type": "TypedefDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "texture",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>The {@link PIXI.Texture} of the frame</p>"
								},
								{
									"name": "time",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>the duration of the frame in ms</p>"
								}
							]
						},
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "anchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "animationSpeed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.</p>",
							"description": ""
						},
						{
							"name": "autoUpdate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether to use PIXI.Ticker.shared to auto update animation time</p>",
							"description": ""
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
							"description": ""
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "currentFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The AnimatedSprites current frame index.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the sprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "loop",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether or not the animate sprite repeats after playing.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "onComplete",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>User-assigned function to call when an AnimatedSprite finishes playing.</p>",
							"description": ""
						},
						{
							"name": "onFrameChange",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>User-assigned function to call when an AnimatedSprite changes which texture is being rendered.</p>",
							"description": ""
						},
						{
							"name": "onLoop",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>User-assigned function to call when <code>loop</code> is true, and an AnimatedSprite is played and\nloops around to start again.</p>"
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "playing",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the AnimatedSprite is currently playing.</p>",
							"description": ""
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' &amp; '_renderCanvas' methods.</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "textures",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of textures used for this AnimatedSprite.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "totalFrames",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The total number of frames in the AnimatedSprite. This is the same as number of textures\nassigned to the AnimatedSprite.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "updateAnchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.</p>",
							"description": "<p>Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\nChanging anchor for each frame allows to pin sprite origin to certain moving feature\nof the frame (e.g. left foot).</p>\n<p>Note: Enabling this will override any previously set <code>anchor</code> on each frame change.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the sprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The height of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The width of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_anchor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
						},
						{
							"name": "_autoUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p><code>true</code> uses PIXI.Ticker.shared to auto update animation time.</p>",
							"description": ""
						},
						{
							"name": "_currentTime",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Elapsed time since animation has been started, used internally to display current texture.</p>",
							"description": ""
						},
						{
							"name": "_durations",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_isConnectedToTicker",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p><code>true</code> if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.</p>",
							"description": ""
						},
						{
							"name": "_previousFrame",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The texture index that was displayed last time</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "_texture",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "_textures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "_tintRGB",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
							"description": ""
						},
						{
							"name": "vertexTrimmedData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
							"description": ""
						},
						{
							"name": "fromFrames",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>A short hand way of creating an AnimatedSprite from an array of frame ids.</p>",
							"description": ""
						},
						{
							"name": "fromImages",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>A short hand way of creating an AnimatedSprite from an array of image ids.</p>",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateTrimmedVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this sprite</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Stops the AnimatedSprite and destroys it.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Gets the local bounds of the sprite object.</p>",
							"description": ""
						},
						{
							"name": "gotoAndPlay",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Goes to a specific frame and begins playing the AnimatedSprite.</p>",
							"description": ""
						},
						{
							"name": "gotoAndStop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Stops the AnimatedSprite and goes to a specific frame.</p>",
							"description": ""
						},
						{
							"name": "play",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Plays the AnimatedSprite.</p>",
							"description": ""
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Stops the AnimatedSprite.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the object transform for rendering.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Updates the bounds of the sprite.</p>",
							"description": ""
						},
						{
							"name": "_onTextureUpdate",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>When the texture is updated, this event will fire to update the scale and frame</p>",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_onAnchorUpdate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Called when the anchor position updates.</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "updateTexture",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Updates the displayed texture to match the current frame index.</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Application",
					"type": "ClassDoc",
					"brief": "<p>Convenience class to create a new PIXI application.</p>",
					"description": "<p>This class automatically creates the renderer, ticker and root container.</p>",
					"members": [
						{
							"name": "Plugin",
							"type": "TypedefDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "destroy",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Called when destroying Application, scoped to Application instance</p>"
								},
								{
									"name": "init",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Called when Application is constructed, scoped to Application instance.\nPasses in <code>options</code> as the only argument, which are Application constructor options.</p>"
								}
							]
						},
						{
							"name": "_plugins",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Collection of installed plugins.</p>"
						},
						{
							"name": "loader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Loader instance to help with asset loading.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>WebGL renderer if available, otherwise CanvasRenderer.</p>"
						},
						{
							"name": "resizeTo",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The HTML element or window to automatically resize the\nrenderer's view element to match width and height.</p>"
						},
						{
							"name": "screen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the renderer's screen rectangle. Its safe to use as <code>filterArea</code> or <code>hitArea</code> for the whole screen.</p>"
						},
						{
							"name": "stage",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The root display container that's rendered.</p>"
						},
						{
							"name": "ticker",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Ticker for doing render updates.</p>",
							"description": ""
						},
						{
							"name": "view",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the renderer's canvas element.</p>"
						},
						{
							"name": "_ticker",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal reference to the ticker.</p>",
							"description": ""
						},
						{
							"name": "registerPlugin",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Register a middleware plugin for the application</p>"
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Convenience method for starting the render.</p>",
							"description": ""
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Convenience method for stopping the render.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy and don't use after this.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Render the current stage.</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Execute an immediate resize on the renderer, this is not\nthrottled and can be expensive to call many times in a row.\nWill resize only if <code>resizeTo</code> property is set.</p>"
						},
						{
							"name": "cancelResize",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Cancel the resize queue.</p>",
							"description": ""
						},
						{
							"name": "queueResize",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Resize is throttled, so it's safe to call this multiple times per frame and it'll\nonly be called once.</p>"
						}
					]
				},
				{
					"name": "AppLoaderPlugin",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Application plugin for supporting loader option. Installing the LoaderPlugin\nis not necessary if using <strong>pixi.js</strong> or <strong>pixi.js-legacy</strong>.</p>",
					"members": [
						{
							"name": "destroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Called when application destroyed</p>",
							"description": ""
						},
						{
							"name": "init",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Called on application constructor</p>"
						}
					]
				},
				{
					"name": "ArrayResource",
					"type": "ClassDoc",
					"brief": "<p>A resource that contains a number of sources.</p>",
					"description": "",
					"members": [
						{
							"name": "bind",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Add binding</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "addBaseTextureAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set a baseTexture by ID,\nArrayResource just takes resource from it, nothing more</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the resources to the GPU.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Clean up anything, this happens when destroying is ready.</p>",
							"description": ""
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "Attribute",
					"type": "ClassDoc",
					"brief": "<p>Holds the information for a single attribute structure required to render geometry.</p>",
					"description": "<p>This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\nThis can include anything from positions, uvs, normals, colors etc.</p>",
					"members": [
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Helper function that creates an Attribute based on the information provided</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Attribute.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BaseImageResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Base for all the image/canvas resources</p>",
					"members": [
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "crossOrigin",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "static",
							"brief": "",
							"description": "<p>Set cross origin based detecting the url and the crossorigin</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy this BaseImageResource</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks if source width/height was changed, resize can cause extra baseTexture update.\nTriggers one update in any case.</p>"
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "BasePrepare",
					"type": "ClassDoc",
					"brief": "<p>The prepare manager provides functionality to upload content to the GPU.</p>",
					"description": "<p>BasePrepare handles basic queuing functionality and is extended by\n{@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\nto provide preparation capabilities specific to their respective renderers.</p>",
					"members": [
						{
							"name": "limiter",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The limiter to be used to control how quickly items are prepared.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the renderer.</p>"
						},
						{
							"name": "uploadHookHelper",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The only real difference between CanvasPrepare and Prepare is what they pass\nto upload hooks. That different parameter is stored here.</p>"
						},
						{
							"name": "addHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for finding assets.</p>"
						},
						{
							"name": "completes",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Callback to call after completed.</p>"
						},
						{
							"name": "queue",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of items to uploads at once.</p>"
						},
						{
							"name": "ticking",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If prepare is ticking (running).</p>"
						},
						{
							"name": "uploadHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for processing assets.</p>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Manually add an item to the uploading queue.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the plugin, don't use after this.</p>",
							"description": ""
						},
						{
							"name": "registerFindHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for finding items.</p>",
							"description": ""
						},
						{
							"name": "registerUploadHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for uploading items.</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Upload all the textures and graphics to the GPU.</p>",
							"description": ""
						},
						{
							"name": "prepareItems",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Actually prepare items. This is handled outside of the tick because it will take a while\nand we do NOT want to block the current animation frame from rendering.</p>"
						},
						{
							"name": "tick",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Handle tick update</p>",
							"description": ""
						},
						{
							"name": "delayedTick",
							"type": "FunctionDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>'bound' call for prepareItems().</p>"
						}
					]
				},
				{
					"name": "BaseRenderTexture",
					"type": "ClassDoc",
					"brief": "<p>A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.</p>",
					"description": "<p><strong>Hint</strong>: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\notherwise black rectangles will be drawn instead.</p>\n<p>A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\nand rotation of the given Display Objects is ignored. For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> renderer = PIXI.autoDetectRenderer();\n<span class=\"hljs-keyword\">let</span> baseRenderTexture = <span class=\"hljs-keyword\">new</span> PIXI.BaseRenderTexture({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span> });\n<span class=\"hljs-keyword\">let</span> renderTexture = <span class=\"hljs-keyword\">new</span> PIXI.RenderTexture(baseRenderTexture);\n<span class=\"hljs-keyword\">let</span> sprite = PIXI.Sprite.from(<span class=\"hljs-string\">&quot;spinObj_01.png&quot;</span>);\n\nsprite.position.x = <span class=\"hljs-number\">800</span>/<span class=\"hljs-number\">2</span>;\nsprite.position.y = <span class=\"hljs-number\">600</span>/<span class=\"hljs-number\">2</span>;\nsprite.anchor.x = <span class=\"hljs-number\">0.5</span>;\nsprite.anchor.y = <span class=\"hljs-number\">0.5</span>;\n\nrenderer.render(sprite, renderTexture);\n</code></pre>\n<p>The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\nyou can clear the transform</p>\n<pre><code class=\"hljs language-js\">\nsprite.setTransform()\n\n<span class=\"hljs-keyword\">let</span> baseRenderTexture = <span class=\"hljs-keyword\">new</span> PIXI.BaseRenderTexture({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span> });\n<span class=\"hljs-keyword\">let</span> renderTexture = <span class=\"hljs-keyword\">new</span> PIXI.RenderTexture(baseRenderTexture);\n\nrenderer.render(sprite, renderTexture);  <span class=\"hljs-comment\">// Renders to center of RenderTexture</span>\n</code></pre>",
					"members": [
						{
							"name": "_batchEnabled",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Number of the texture batch, used by multi-texture renderers</p>",
							"description": ""
						},
						{
							"name": "_batchLocation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Location inside texture batch, used by multi-texture renderers</p>",
							"description": ""
						},
						{
							"name": "_id",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Batch local field, stores current texture location</p>",
							"description": ""
						},
						{
							"name": "alphaMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.</p>",
							"description": ""
						},
						{
							"name": "anisotropicLevel",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Anisotropic filtering level of texture</p>",
							"description": ""
						},
						{
							"name": "cacheId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Currently default cache ID.</p>",
							"description": ""
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Flag if BaseTexture has been destroyed.</p>",
							"description": ""
						},
						{
							"name": "dirtyId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Used by TextureSystem to only update texture to the GPU when needed.\nPlease call <code>update()</code> to increment it.</p>"
						},
						{
							"name": "filterStack",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The data structure for the filters.</p>",
							"description": ""
						},
						{
							"name": "format",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The pixel format of the texture</p>",
							"description": ""
						},
						{
							"name": "hasLoaded",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the base texture set when the image has loaded</p>",
							"description": ""
						},
						{
							"name": "imageUrl",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "isPowerOfTwo",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether or not the texture is a power of two, try to use power of two textures as much\nas you can</p>"
						},
						{
							"name": "maskStack",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The data structure for the stencil masks.</p>",
							"description": ""
						},
						{
							"name": "mipmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Mipmap mode of the texture, affects downscaled images</p>",
							"description": ""
						},
						{
							"name": "parentTextureArray",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether its a part of another texture, handled by ArrayResource or CubeResource</p>",
							"description": ""
						},
						{
							"name": "premultiplyAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "realHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Pixel height of the source of this texture</p>",
							"description": ""
						},
						{
							"name": "realWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Pixel width of the source of this texture</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The resolution / device pixel ratio of the texture</p>",
							"description": ""
						},
						{
							"name": "resource",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resource used by this BaseTexture, there can only\nbe one resource per BaseTexture, but textures can share\nresources.</p>"
						},
						{
							"name": "scaleMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale mode to apply when scaling this texture</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "target",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The target type</p>",
							"description": ""
						},
						{
							"name": "textureCacheIds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The collection of alternative cache ids, since some BaseTextures\ncan have more than one ID, short name and longer full URL</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of resource data</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generally speaking means when resource is loaded.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the base texture set when the image has loaded</p>",
							"description": ""
						},
						{
							"name": "wrapMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How the texture wraps</p>"
						},
						{
							"name": "_canvasRenderTarget",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A reference to the canvas render target (we only need one as this can be shared across renderers)</p>",
							"description": ""
						},
						{
							"name": "dirtyStyleId",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used by TextureSystem to only update texture style when needed.</p>",
							"description": ""
						},
						{
							"name": "touched",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used by automatic texture Garbage Collection, stores last GC tick when it was bound</p>",
							"description": ""
						},
						{
							"name": "uid",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Global unique identifier for this BaseTexture</p>",
							"description": ""
						},
						{
							"name": "_glTextures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The map of render context textures where this is bound</p>",
							"description": ""
						},
						{
							"name": "castToBaseTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Utility function for BaseTexture|Texture cast</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this texture.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Frees the texture and framebuffer from WebGL memory without destroying this texture object.\nThis means you can still use the texture later which will upload it to GPU\nmemory again.</p>"
						},
						{
							"name": "getDrawableSource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\nfor rendering with CanvasRenderer. Provided by <strong>@pixi/canvas-renderer</strong> package.</p>"
						},
						{
							"name": "loadSource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resizes the BaseRenderTexture.</p>",
							"description": ""
						},
						{
							"name": "setRealSize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets real size of baseTexture, preserves current resolution.</p>",
							"description": ""
						},
						{
							"name": "setResolution",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes resolution</p>",
							"description": ""
						},
						{
							"name": "setResource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the resource if it wasn't set. Throws error if resource already present</p>",
							"description": ""
						},
						{
							"name": "setSize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.</p>",
							"description": ""
						},
						{
							"name": "setStyle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes style options of BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Invalidates the object. Texture becomes valid if width and height are greater than zero.</p>",
							"description": ""
						},
						{
							"name": "_refreshPOT",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Refresh check for isPowerOfTwo texture based on size</p>",
							"description": ""
						},
						{
							"name": "onError",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle errors with resources.</p>"
						},
						{
							"name": "error",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when a not-immediately-available source fails to load.</p>",
							"description": ""
						},
						{
							"name": "loaded",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when a not-immediately-available source finishes loading.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BaseTexture",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>A Texture stores the information that represents an image.\nAll textures have a base texture, which contains information about the source.\nTherefore you can have many textures all using a single BaseTexture</p>",
					"members": [
						{
							"name": "_globalBatch",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Global number of the texture batch, used by multi-texture renderers</p>",
							"description": ""
						},
						{
							"name": "_batchEnabled",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Number of the texture batch, used by multi-texture renderers</p>",
							"description": ""
						},
						{
							"name": "_batchLocation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Location inside texture batch, used by multi-texture renderers</p>",
							"description": ""
						},
						{
							"name": "_id",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Batch local field, stores current texture location</p>",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "alphaMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.</p>",
							"description": ""
						},
						{
							"name": "anisotropicLevel",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Anisotropic filtering level of texture</p>",
							"description": ""
						},
						{
							"name": "cacheId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Currently default cache ID.</p>",
							"description": ""
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Flag if BaseTexture has been destroyed.</p>",
							"description": ""
						},
						{
							"name": "dirtyId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Used by TextureSystem to only update texture to the GPU when needed.\nPlease call <code>update()</code> to increment it.</p>"
						},
						{
							"name": "format",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The pixel format of the texture</p>",
							"description": ""
						},
						{
							"name": "hasLoaded",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the base texture set when the image has loaded</p>",
							"description": ""
						},
						{
							"name": "imageUrl",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "isPowerOfTwo",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether or not the texture is a power of two, try to use power of two textures as much\nas you can</p>"
						},
						{
							"name": "mipmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Mipmap mode of the texture, affects downscaled images</p>",
							"description": ""
						},
						{
							"name": "parentTextureArray",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether its a part of another texture, handled by ArrayResource or CubeResource</p>",
							"description": ""
						},
						{
							"name": "premultiplyAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "realHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Pixel height of the source of this texture</p>",
							"description": ""
						},
						{
							"name": "realWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Pixel width of the source of this texture</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The resolution / device pixel ratio of the texture</p>",
							"description": ""
						},
						{
							"name": "resource",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resource used by this BaseTexture, there can only\nbe one resource per BaseTexture, but textures can share\nresources.</p>"
						},
						{
							"name": "scaleMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale mode to apply when scaling this texture</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "target",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The target type</p>",
							"description": ""
						},
						{
							"name": "textureCacheIds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The collection of alternative cache ids, since some BaseTextures\ncan have more than one ID, short name and longer full URL</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of resource data</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generally speaking means when resource is loaded.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the base texture set when the image has loaded</p>",
							"description": ""
						},
						{
							"name": "wrapMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How the texture wraps</p>"
						},
						{
							"name": "dirtyStyleId",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used by TextureSystem to only update texture style when needed.</p>",
							"description": ""
						},
						{
							"name": "touched",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used by automatic texture Garbage Collection, stores last GC tick when it was bound</p>",
							"description": ""
						},
						{
							"name": "uid",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Global unique identifier for this BaseTexture</p>",
							"description": ""
						},
						{
							"name": "_glTextures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The map of render context textures where this is bound</p>",
							"description": ""
						},
						{
							"name": "addToCache",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Helper function that creates a base texture based on the source you provide.\nThe source can be - image url, image element, canvas element. If the\nsource is an image url or an image element and not in the base texture\ncache, it will be created and loaded.</p>"
						},
						{
							"name": "fromBuffer",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Create a new BaseTexture with a BufferResource from a Float32Array.\nRGBA values are floats from 0 to 1.</p>"
						},
						{
							"name": "fromCanvas",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromSVG",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "removeFromCache",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Remove a BaseTexture from the global BaseTextureCache.</p>",
							"description": ""
						},
						{
							"name": "castToBaseTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Utility function for BaseTexture|Texture cast</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys this base texture.\nThe method stops if resource doesn't want this texture to be destroyed.\nRemoves texture from all caches.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Frees the texture from WebGL memory without destroying this texture object.\nThis means you can still use the texture later which will upload it to GPU\nmemory again.</p>"
						},
						{
							"name": "getDrawableSource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\nfor rendering with CanvasRenderer. Provided by <strong>@pixi/canvas-renderer</strong> package.</p>"
						},
						{
							"name": "loadSource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setRealSize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets real size of baseTexture, preserves current resolution.</p>",
							"description": ""
						},
						{
							"name": "setResolution",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes resolution</p>",
							"description": ""
						},
						{
							"name": "setResource",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the resource if it wasn't set. Throws error if resource already present</p>",
							"description": ""
						},
						{
							"name": "setSize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.</p>",
							"description": ""
						},
						{
							"name": "setStyle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes style options of BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Invalidates the object. Texture becomes valid if width and height are greater than zero.</p>",
							"description": ""
						},
						{
							"name": "_refreshPOT",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Refresh check for isPowerOfTwo texture based on size</p>",
							"description": ""
						},
						{
							"name": "onError",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle errors with resources.</p>"
						},
						{
							"name": "dispose",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when BaseTexture is destroyed.</p>",
							"description": ""
						},
						{
							"name": "error",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when a not-immediately-available source fails to load.</p>",
							"description": ""
						},
						{
							"name": "loaded",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when a not-immediately-available source finishes loading.</p>",
							"description": ""
						},
						{
							"name": "loaded",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when BaseTexture is updated.</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "EventDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Fired when BaseTexture is updated.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BasisLoader",
					"type": "ClassDoc",
					"brief": "<p>Loader plugin for handling BASIS supercompressed texture files.</p>",
					"description": "<p>To use this loader, you must bind the basis_universal WebAssembly transcoder. There are two ways of\ndoing this:</p>\n<ol>\n<li>Adding a &lt;script&gt; tag to your HTML page to the transcoder bundle in this package, and serving\nthe WASM binary from the same location.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Copy ./node_modules/@pixi/basis/assets/basis_.wasm into your assets directory</span>\n<span class=\"hljs-comment\">// as well, so it is served from the same folder as the JavaScript!</span>\n&amp;lt;script src=<span class=\"hljs-string\">&quot;./node_modules/@pixi/basis/assets/basis_transcoder.js&quot;</span> /&amp;gt;\n</code></pre>\n<p>NOTE: <code>basis_transcoder.js</code> expects the WebAssembly binary to be named <code>basis_transcoder.wasm</code>.\nNOTE-2: This method supports transcoding on the main-thread. Only use this if you have 1 or 2 *.basis\nfiles.</p>\n<ol start=\"2\">\n<li>Loading the transcoder source from a URL.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Use this if you to use the default CDN url for @pixi/basis</span>\nBasisLoader.loadTranscoder();\n\n<span class=\"hljs-comment\">// Use this if you want to serve the transcoder on your own</span>\nBasisLoader.loadTranscoder(<span class=\"hljs-string\">&#x27;./basis_transcoder.js&#x27;</span>, <span class=\"hljs-string\">&#x27;./basis_transcoder.wasm&#x27;</span>);\n</code></pre>\n<p>NOTE: This can only be used with web-workers.</p>",
					"members": [
						{
							"name": "TranscoderWorker",
							"type": "ClassDoc",
							"brief": "<p>Worker class for transcoding *.basis files in background threads.</p>",
							"description": "<p>To enable asynchronous transcoding, you need to provide the URL to the basis_universal transcoding\nlibrary.</p>",
							"members": [
								{
									"name": "bindingURL",
									"type": "PropertyDoc",
									"scope": "static",
									"brief": "<p>URL for the script containing the basis_universal library.</p>",
									"description": ""
								},
								{
									"name": "workerURL",
									"type": "PropertyDoc",
									"scope": "static",
									"brief": "<p>Generated URL for the transcoder worker script.</p>",
									"description": ""
								},
								{
									"name": "onMessage",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Handles responses from the web-worker</p>",
									"description": ""
								},
								{
									"name": "loadTranscoder",
									"type": "MethodDoc",
									"scope": "static",
									"brief": "<p>Loads the transcoder source code</p>",
									"description": ""
								},
								{
									"name": "setTranscoder",
									"type": "MethodDoc",
									"scope": "static",
									"brief": "<p>Set the transcoder source code directly</p>",
									"description": ""
								},
								{
									"name": "constructor",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "initAsync",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "transcodeAsync",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Transcodes the *.basis data when the data is loaded. If the transcoder is not bound yet, it\nwill hook transcoding to {@link BasisResource#onTranscoderInitialized}.</p>"
						},
						{
							"name": "bindTranscoder",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Binds the basis_universal transcoder to decompress *.basis files. You must initialize the transcoder library yourself.</p>",
							"description": "<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { BasisLoader } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/basis&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Loader } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/loaders&#x27;</span>;\n\n<span class=\"hljs-comment\">// window.BASIS() returns a Promise-like object</span>\n<span class=\"hljs-built_in\">window</span>.BASIS().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">basisLibrary</span>) =&gt;</span>\n{\n    <span class=\"hljs-comment\">// Initialize basis-library; otherwise, transcoded results maybe corrupt!</span>\n    basisLibrary.initializeBasis();\n\n    <span class=\"hljs-comment\">// Bind BasisLoader to the transcoder</span>\n    BasisLoader.bindTranscoder(basisLibrary);\n});\n</code></pre>"
						},
						{
							"name": "loadTranscoder",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Loads the transcoder source code for use in {@link PIXI.BasisLoader.TranscoderWorker}.</p>",
							"description": ""
						},
						{
							"name": "registerTextures",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "setTranscoder",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Set the transcoder source code directly</p>",
							"description": ""
						},
						{
							"name": "transcode",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Runs transcoding and populates {@link imageArray}. It will run the transcoding in a web worker\nif they are available.</p>"
						},
						{
							"name": "transcodeAsync",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Finds a suitable worker for transcoding and sends a transcoding request</p>",
							"description": ""
						},
						{
							"name": "transcodeSync",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Runs transcoding on the main thread.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BatchDrawCall",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Used by the batcher to draw batches.\nEach one of these contains all information required to draw a bound geometry.</p>",
					"members": [
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>data for uniforms or custom webgl state</p>"
						}
					]
				},
				{
					"name": "BatchGeometry",
					"type": "ClassDoc",
					"brief": "<p>Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).</p>",
					"description": "",
					"members": [
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "_buffer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Buffer used for position, color, texture IDs</p>",
							"description": ""
						},
						{
							"name": "_indexBuffer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Index buffer data</p>",
							"description": ""
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						}
					]
				},
				{
					"name": "BatchPluginFactory",
					"type": "ClassDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "defaultFragmentTemplate",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default fragment shader source</p>",
							"description": ""
						},
						{
							"name": "defaultVertexSrc",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default vertex shader source</p>",
							"description": ""
						},
						{
							"name": "create",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\nto extend BatchRenderer with all the necessary pieces.</p>"
						}
					]
				},
				{
					"name": "BatchShaderGenerator",
					"type": "ClassDoc",
					"brief": "<p>Helper that generates batching multi-texture shader. Use it with your new BatchRenderer</p>",
					"description": "",
					"members": [
						{
							"name": "fragTemplate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Reference to the fragement shader template. Must contain &quot;%count%&quot; and &quot;%forloop%&quot;.</p>",
							"description": ""
						},
						{
							"name": "vertexSrc",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Reference to the vertex shader source.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "generateSampleSrc",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "BatchSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage batching.</p>",
					"description": "",
					"members": [
						{
							"name": "currentRenderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The currently active ObjectRenderer.</p>",
							"description": ""
						},
						{
							"name": "emptyRenderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An empty renderer.</p>",
							"description": ""
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "boundArray",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Assigns batch locations to textures in array based on boundTextures state.\nAll textures in texArray should have <code>_batchEnabled = _batchId</code>,\nand their count should be less than <code>maxTextures</code>.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "copyBoundTextures",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handy function for batch renderers: copies bound textures in first maxTextures locations to array\nsets actual _batchLocation for them</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "flush",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This should be called if you wish to do some custom rendering\nIt will basically render anything that may be batched up such as sprites</p>"
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Reset the system to an empty renderer</p>",
							"description": ""
						},
						{
							"name": "setObjectRenderer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the current renderer to the one given in parameter</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BatchTextureArray",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Used by the batcher to build texture batches.\nHolds list of textures and their respective locations.</p>",
					"members": [
						{
							"name": "count",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>number of filled elements</p>"
						},
						{
							"name": "elements",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>inside textures array</p>"
						},
						{
							"name": "ids",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Respective locations for textures</p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "BitmapFont",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>BitmapFont represents a typeface available for use with the BitmapText class. Use the <code>install</code>\nmethod for adding a font to be used.</p>",
					"members": [
						{
							"name": "ALPHA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>This character set includes all the letters in the alphabet (both lower- and upper- case).</p>"
						},
						{
							"name": "ALPHANUMERIC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>This character set is the union of <code>BitmapFont.ALPHA</code> and <code>BitmapFont.NUMERIC</code>.</p>"
						},
						{
							"name": "ASCII",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>This character set consists of all the ASCII table.</p>"
						},
						{
							"name": "available",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "<p>Collection of available/installed fonts.</p>",
							"description": ""
						},
						{
							"name": "defaultOptions",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "<p>Collection of default options when using <code>BitmapFont.from</code>.</p>",
							"description": "",
							"members": [
								{
									"name": "chars",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "padding",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "textureHeight",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "textureWidth",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "NUMERIC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>This character set includes all decimal digits (from 0 to 9).</p>"
						},
						{
							"name": "chars",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The map of characters by character code.</p>",
							"description": ""
						},
						{
							"name": "font",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The name of the font face.</p>",
							"description": ""
						},
						{
							"name": "lineHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The line-height of the font face in pixels.</p>",
							"description": ""
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The size of the font face in pixels.</p>",
							"description": ""
						},
						{
							"name": "pageTextures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The map of base page textures (i.e., sheets of glyphs).</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Generates a bitmap-font for the given style and character set. This does not support\nkernings yet. With <code>style</code> properties, only the following non-layout properties are used:</p>\n<ul>\n<li>{@link PIXI.TextStyle#dropShadow|dropShadow}</li>\n<li>{@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}</li>\n<li>{@link PIXI.TextStyle#dropShadowColor|dropShadowColor}</li>\n<li>{@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}</li>\n<li>{@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}</li>\n<li>{@link PIXI.TextStyle#fill|fill}</li>\n<li>{@link PIXI.TextStyle#fillGradientStops|fillGradientStops}</li>\n<li>{@link PIXI.TextStyle#fillGradientType|fillGradientType}</li>\n<li>{@link PIXI.TextStyle#fontFamily|fontFamily}</li>\n<li>{@link PIXI.TextStyle#fontSize|fontSize}</li>\n<li>{@link PIXI.TextStyle#fontVariant|fontVariant}</li>\n<li>{@link PIXI.TextStyle#fontWeight|fontWeight}</li>\n<li>{@link PIXI.TextStyle#lineJoin|lineJoin}</li>\n<li>{@link PIXI.TextStyle#miterLimit|miterLimit}</li>\n<li>{@link PIXI.TextStyle#stroke|stroke}</li>\n<li>{@link PIXI.TextStyle#strokeThickness|strokeThickness}</li>\n<li>{@link PIXI.TextStyle#textBaseline|textBaseline}</li>\n</ul>"
						},
						{
							"name": "install",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Register a new bitmap font.</p>",
							"description": ""
						},
						{
							"name": "uninstall",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Remove bitmap font by name.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Remove references to created glyph textures.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BitmapFontData",
					"type": "ClassDoc",
					"brief": "<p>Normalized parsed data from .fnt files.</p>",
					"description": "",
					"members": [
						{
							"name": "char",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "common",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "info",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "kerning",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "page",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "BitmapFontLoader",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>{@link PIXI.Loader Loader} middleware for loading\nbitmap-based fonts suitable for using with {@link PIXI.BitmapText}.</p>",
					"members": [
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Called when the plugin is installed.</p>",
							"description": ""
						},
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Called after a resource is loaded.</p>"
						},
						{
							"name": "dirname",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Replacement for NodeJS's path.dirname</p>"
						},
						{
							"name": "getBaseUrl",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Get folder path from a resource</p>"
						}
					]
				},
				{
					"name": "BitmapText",
					"type": "ClassDoc",
					"brief": "<p>A BitmapText object will create a line or multiple lines of text using bitmap font.</p>",
					"description": "<p>The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\nmeaning that rendering is fast, and changing text has no performance implications.</p>\n<p>Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.</p>\n<p>To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.</p>\n<p>PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\nhttp://www.angelcode.com/products/bmfont/ for Windows or\nhttp://www.bmglyph.com/ for Mac.</p>\n<p>A BitmapText can only be created when the font is loaded.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in this case the font is in a file called &#x27;desyrel.fnt&#x27;</span>\n<span class=\"hljs-keyword\">let</span> bitmapText = <span class=\"hljs-keyword\">new</span> PIXI.BitmapText(<span class=\"hljs-string\">&quot;text using a fancy font!&quot;</span>, {<span class=\"hljs-attr\">font</span>: <span class=\"hljs-string\">&quot;35px Desyrel&quot;</span>, <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">&quot;right&quot;</span>});\n</code></pre>",
					"members": [
						{
							"name": "fonts",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Get the list of installed fonts.</p>",
							"description": ""
						},
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>If true PixiJS will Math.floor() x/y values when rendering</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "align",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The alignment of the BitmapText object.</p>",
							"description": ""
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "anchor",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The anchor sets the origin point of the text.</p>",
							"description": "<p>The default is <code>(0,0)</code>, this means the text's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the text's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the text's origin point will be the bottom right corner.</p>"
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "dirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set to <code>true</code> if the BitmapText needs to be redrawn.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "fontName",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The name of the BitmapFont.</p>",
							"description": ""
						},
						{
							"name": "fontSize",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The size of the font to display.</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "letterSpacing",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>Additional space between characters.</p>",
							"description": ""
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "maxLineHeight",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The max line height. This is useful when trying to use the total height of the Text,\ni.e. when trying to vertically align.</p>"
						},
						{
							"name": "maxWidth",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The max width of this bitmap text in pixels. If the text provided is longer than the\nvalue provided, line breaks will be automatically inserted in the last whitespace.\nDisable by setting the value to 0.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "text",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The text of the BitmapText object.</p>",
							"description": ""
						},
						{
							"name": "textHeight",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The height of the overall text, different from fontSize,\nwhich is defined in the style object.</p>"
						},
						{
							"name": "textWidth",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The width of the overall text, different from fontSize,\nwhich is defined in the style object.</p>"
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The tint of the BitmapText object.</p>",
							"description": ""
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_activePagesMeshData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Collection of page mesh data.</p>",
							"description": ""
						},
						{
							"name": "_align",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current text align.</p>",
							"description": ""
						},
						{
							"name": "_anchor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Text anchor. read-only</p>",
							"description": ""
						},
						{
							"name": "_fontName",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current font name.</p>",
							"description": ""
						},
						{
							"name": "_fontSize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current font size.</p>",
							"description": ""
						},
						{
							"name": "_letterSpacing",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Letter spacing. This is useful for setting the space between characters.</p>"
						},
						{
							"name": "_maxLineHeight",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The max line height. This is useful when trying to use the total height of the Text,\nie: when trying to vertically align. (Internally used)</p>"
						},
						{
							"name": "_maxWidth",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The max width of this bitmap text in pixels. If the text provided is longer than the\nvalue provided, line breaks will be automatically inserted in the last whitespace.\nDisable by setting value to 0</p>"
						},
						{
							"name": "_text",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current text.</p>",
							"description": ""
						},
						{
							"name": "_textHeight",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the height of the overall text</p>",
							"description": ""
						},
						{
							"name": "_textWidth",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the width of the overall text</p>",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current tint.</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "font",
							"type": "PropertyDoc",
							"brief": "",
							"description": ""
						},
						{
							"name": "registerFont",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Register a bitmap font with data and a texture.</p>",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Validates text before calling parent's getLocalBounds</p>",
							"description": ""
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateText",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders text and updates it when needed. This should only be called\nif the BitmapFont is regenerated.</p>"
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>To be overridden by the subclasses.</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>To be overridden by the subclass</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_upgradeStyle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>For backward compatibility, convert old style.font constructor param to fontName &amp; fontSize properties.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Updates the transform of this object</p>",
							"description": ""
						},
						{
							"name": "validate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Updates text when needed</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Bounds",
					"type": "ClassDoc",
					"brief": "<p>'Builder' pattern for bounds rectangles.</p>",
					"description": "<p>This could be called an Axis-Aligned Bounding Box.\nIt is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.</p>",
					"members": [
						{
							"name": "maxX",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "maxY",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "minX",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "minY",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "updateID",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>It is updated to _boundsID of corresponding object to keep bounds in sync with content.\nUpdated from outside, thus public modifier.</p>"
						},
						{
							"name": "addBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds other Bounds.</p>",
							"description": ""
						},
						{
							"name": "addBoundsArea",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds other Bounds, masked with Rectangle.</p>",
							"description": ""
						},
						{
							"name": "addBoundsMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds other Bounds, masked with Bounds.</p>",
							"description": ""
						},
						{
							"name": "addBoundsMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.</p>",
							"description": ""
						},
						{
							"name": "addFrame",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds sprite frame, transformed.</p>",
							"description": ""
						},
						{
							"name": "addFrameMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds sprite frame, multiplied by matrix</p>",
							"description": ""
						},
						{
							"name": "addFramePad",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds padded frame. (x0, y0) should be strictly less than (x1, y1)</p>",
							"description": ""
						},
						{
							"name": "addPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>This function should be inlined when its possible.</p>",
							"description": ""
						},
						{
							"name": "addPointMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a point, after transformed. This should be inlined when its possible.</p>",
							"description": ""
						},
						{
							"name": "addQuad",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a quad, not transformed</p>",
							"description": ""
						},
						{
							"name": "addVertexData",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds screen vertices from array</p>",
							"description": ""
						},
						{
							"name": "addVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add an array of mesh vertices</p>",
							"description": ""
						},
						{
							"name": "addVerticesMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add an array of mesh vertices.</p>",
							"description": ""
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clears the bounds and resets.</p>",
							"description": ""
						},
						{
							"name": "getRectangle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\nIt is not guaranteed that it will return tempRect</p>"
						},
						{
							"name": "isEmpty",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks if bounds are empty.</p>",
							"description": ""
						},
						{
							"name": "pad",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pads bounds object, making it grow in all directions.\nIf paddingY is omitted, both paddingX and paddingY will be set to paddingX.</p>"
						}
					]
				},
				{
					"name": "Buffer",
					"type": "ClassDoc",
					"brief": "<p>A wrapper for data so that it can be used and uploaded by WebGL</p>",
					"description": "",
					"members": [
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The data in the buffer, as a typed array</p>",
							"description": ""
						},
						{
							"name": "_glBuffers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl buffer</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Helper function that creates a buffer based on an array or TypedArray</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the buffer</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>flags this buffer as requiring an upload to the GPU</p>"
						}
					]
				},
				{
					"name": "BufferResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Buffer resource with data of typed array.</p>",
					"members": [
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Source array\nCannot be ClampedUint8Array because it cant be uploaded to WebGL</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy and don't use after this</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "BVHNode",
					"type": "ClassDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The union of this node's childrens' axis-aligned bounding boxes.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The two children of this node.</p>"
						},
						{
							"name": "objectCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The number of objects in this node</p>"
						},
						{
							"name": "objectOffset",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The index of the first object of this node in its tree's object array.</p>"
						},
						{
							"name": "splitAxis",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The axis alonged which this node was split to get its children.</p>"
						},
						{
							"name": "isLeaf",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "resetInterior",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Builds a interior <code>BVHNode</code> whose children are <code>child0</code> and <code>child1</code> split along <code>splitAxis</code>.</p>",
							"description": ""
						},
						{
							"name": "resetLeaf",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Builds a leaf <code>BVHNode</code> whose objects start at <code>offset</code> and with bounds <code>bounds</code>.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BVHObjectInfo",
					"type": "ClassDoc",
					"brief": "<p>Stores all the information required from a <code>BVHObject</code>.</p>",
					"description": "",
					"members": [
						{
							"name": "boundaryLength",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Polygonal perimeter</p>"
						},
						{
							"name": "bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Axis-aligned bounding box</p>"
						},
						{
							"name": "centroid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Polygonal centroid</p>"
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the bounds, boundary length, and centroid of this to those of the object.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "BVHTreeFactory",
					"type": "ClassDoc",
					"brief": "",
					"description": "<pre><code class=\"hljs language-js\">renderer.addSystem(<span class=\"hljs-string\">&#x27;bvh&#x27;</span>, BVHSystem)\n</code></pre>",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "buildRecursive",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasExtract",
					"type": "ClassDoc",
					"brief": "<p>The extract manager provides functionality to export content from the renderers.</p>",
					"description": "<p>An instance of this class is automatically created by default, and can be found at <code>renderer.plugins.extract</code></p>",
					"members": [
						{
							"name": "base64",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Will return a a base64 encoded string of this target. It works by calling\n<code>CanvasExtract.getCanvas</code> and then running toDataURL on that.</p>"
						},
						{
							"name": "canvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a Canvas element, renders this target to it and then returns it.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the extract</p>",
							"description": ""
						},
						{
							"name": "image",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Will return a HTML Image of the target</p>",
							"description": ""
						},
						{
							"name": "pixels",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\norder, with integer values between 0 and 255 (included).</p>"
						}
					]
				},
				{
					"name": "CanvasMaskManager",
					"type": "ClassDoc",
					"brief": "<p>A set of functions used to handle masking.</p>",
					"description": "<p>Sprite masking is not supported on the CanvasRenderer.</p>",
					"members": [
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this canvas mask manager.</p>",
							"description": ""
						},
						{
							"name": "popMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Restores the current drawing context to the state it was before the mask was applied.</p>",
							"description": ""
						},
						{
							"name": "pushMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>This method adds it to the current stack of masks.</p>",
							"description": ""
						},
						{
							"name": "recursiveFindShapes",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders all PIXI.Graphics shapes in a subtree.</p>",
							"description": ""
						},
						{
							"name": "renderGraphicsShape",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders a PIXI.Graphics shape.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasPrepare",
					"type": "ClassDoc",
					"brief": "<p>The prepare manager provides functionality to upload content to the GPU.</p>",
					"description": "<p>This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\ntextures to an offline canvas. This draw call will force the texture to be moved onto the GPU.</p>\n<p>An instance of this class is automatically created by default, and can be found at <code>renderer.plugins.prepare</code></p>",
					"members": [
						{
							"name": "canvas",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "ctx",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "limiter",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The limiter to be used to control how quickly items are prepared.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the renderer.</p>"
						},
						{
							"name": "uploadHookHelper",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The only real difference between CanvasPrepare and Prepare is what they pass\nto upload hooks. That different parameter is stored here.</p>"
						},
						{
							"name": "addHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for finding assets.</p>"
						},
						{
							"name": "canvas",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>An offline canvas to render textures to</p>"
						},
						{
							"name": "completes",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Callback to call after completed.</p>"
						},
						{
							"name": "ctx",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The context to the canvas</p>"
						},
						{
							"name": "queue",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of items to uploads at once.</p>"
						},
						{
							"name": "ticking",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If prepare is ticking (running).</p>"
						},
						{
							"name": "uploadHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for processing assets.</p>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Manually add an item to the uploading queue.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the plugin, don't use after this.</p>",
							"description": ""
						},
						{
							"name": "registerFindHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for finding items.</p>",
							"description": ""
						},
						{
							"name": "registerUploadHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for uploading items.</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Upload all the textures and graphics to the GPU.</p>",
							"description": ""
						},
						{
							"name": "prepareItems",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Actually prepare items. This is handled outside of the tick because it will take a while\nand we do NOT want to block the current animation frame from rendering.</p>"
						},
						{
							"name": "tick",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Handle tick update</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasRenderer",
					"type": "ClassDoc",
					"brief": "<p>The CanvasRenderer draws the scene and all its content onto a 2d canvas.</p>",
					"description": "<p>This renderer should be used for browsers that do not support WebGL.\nDon't forget to add the CanvasRenderer.view to your DOM or you will not see anything!</p>",
					"members": [
						{
							"name": "autoDensity",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.</p>",
							"description": ""
						},
						{
							"name": "backgroundColor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The background color to fill if not transparent</p>",
							"description": ""
						},
						{
							"name": "blendModes",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Tracks the blend modes useful for this renderer.</p>",
							"description": ""
						},
						{
							"name": "clearBeforeRender",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\nIf the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\nframe to set the canvas background color. If the scene is transparent PixiJS will use clearRect\nto clear the canvas every frame. Disable this by setting this to false. For example, if\nyour game has a canvas filling background image you often don't need this set.</p>"
						},
						{
							"name": "context",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The currently active canvas 2d context (could change with renderTextures)</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.height, actual number of pixels in the canvas by vertical.</p>",
							"description": ""
						},
						{
							"name": "maskManager",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Instance of a CanvasMaskManager, handles masking when using the canvas renderer.</p>",
							"description": ""
						},
						{
							"name": "options",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The supplied constructor options.</p>",
							"description": ""
						},
						{
							"name": "preserveDrawingBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The value of the preserveDrawingBuffer flag affects whether or not the contents of\nthe stencil buffer is retained after rendering.</p>"
						},
						{
							"name": "refresh",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Boolean flag controlling canvas refresh.</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The resolution / device pixel ratio of the renderer.</p>",
							"description": ""
						},
						{
							"name": "rootContext",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The root canvas 2d context that everything is drawn with.</p>",
							"description": ""
						},
						{
							"name": "screen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Measurements of the screen. (0, 0, screenWidth, screenHeight).</p>",
							"description": "<p>Its safe to use as filterArea or hitArea for the whole stage.</p>"
						},
						{
							"name": "smoothProperty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The canvas property used to set the canvas smoothing property.</p>",
							"description": ""
						},
						{
							"name": "transparent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether the render view is transparent.</p>",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the renderer.</p>",
							"description": ""
						},
						{
							"name": "view",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The canvas element that everything is drawn to.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.width, actual number of pixels in the canvas by horizontal.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColor",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a number.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorRgba",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as an [R, G, B] array.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorString",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a string.</p>",
							"description": ""
						},
						{
							"name": "_lastObjectRendered",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The last root object that the renderer tried to render.</p>",
							"description": ""
						},
						{
							"name": "_projTransform",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Projection transform, passed in render() stored here</p>"
						},
						{
							"name": "plugins",
							"type": "PropertyDoc",
							"brief": "",
							"description": "<p>Collection of installed plugins. These are included by default in PIXI, but can be excluded\nby creating a custom build. Consult the README for more information about creating custom\nbuilds and excluding plugins.</p>",
							"members": [
								{
									"name": "accessibility",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Support tabbing interactive elements.</p>"
								},
								{
									"name": "extract",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Extract image data from renderer.</p>"
								},
								{
									"name": "interaction",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Handles mouse, touch and pointer events.</p>"
								},
								{
									"name": "prepare",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Pre-render display objects.</p>"
								}
							]
						},
						{
							"name": "extract",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "registerPlugin",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Adds a plugin to the renderer.</p>",
							"description": ""
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clear the canvas of renderer.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes everything from the renderer and optionally removes the Canvas DOM element.</p>",
							"description": ""
						},
						{
							"name": "generateTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Useful function that returns a texture of the display object that can then be used to create sprites\nThis can be quite useful if your displayObject is complicated and needs to be reused multiple times.</p>"
						},
						{
							"name": "invalidateBlendMode",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks if blend mode has changed.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object to this canvas view</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resizes the canvas view to the specified width and height.</p>",
							"description": ""
						},
						{
							"name": "setBlendMode",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the blend mode of the renderer.</p>",
							"description": ""
						},
						{
							"name": "setContextTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>sets matrix of context\ncalled only from render() methods\ntakes care about resolution</p>"
						},
						{
							"name": "initPlugins",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize the plugins.</p>",
							"description": ""
						},
						{
							"name": "postrender",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired after rendering finishes.</p>",
							"description": ""
						},
						{
							"name": "prerender",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired before rendering starts.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for HTMLCanvasElement.</p>",
					"members": [
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy this BaseImageResource</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks if source width/height was changed, resize can cause extra baseTexture update.\nTriggers one update in any case.</p>"
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "Circle",
					"type": "ClassDoc",
					"brief": "<p>The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.</p>",
					"description": "",
					"members": [
						{
							"name": "radius",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this Circle instance</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates given are contained within this circle</p>",
							"description": ""
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the framing rectangle of the circle as a Rectangle object</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CompressedTextureLoader",
					"type": "ClassDoc",
					"brief": "<p>Loader plugin for handling compressed textures for all platforms.</p>",
					"description": "",
					"members": [
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Called after a compressed-textures manifest is loaded.</p>",
							"description": "<p>This will then load the correct compression format for the device. Your manifest should adhere\nto the following schema:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { INTERNAL_FORMATS } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/constants&#x27;</span>;\n\n<span class=\"hljs-comment\">// The following should be present in a *.compressed-texture.json file!</span>\n<span class=\"hljs-keyword\">const</span> manifest = <span class=\"hljs-built_in\">JSON</span>.stringify({\n  <span class=\"hljs-attr\">COMPRESSED_RGBA_S3TC_DXT5_EXT</span>: <span class=\"hljs-string\">&quot;asset.s3tc.ktx&quot;</span>,\n  <span class=\"hljs-attr\">COMPRESSED_RGBA8_ETC2_EAC</span>: <span class=\"hljs-string\">&quot;asset.etc.ktx&quot;</span>,\n  <span class=\"hljs-attr\">RGBA_PVRTC_4BPPV1_IMG</span>: <span class=\"hljs-string\">&quot;asset.pvrtc.ktx&quot;</span>,\n  <span class=\"hljs-attr\">textureID</span>: <span class=\"hljs-string\">&quot;asset.png&quot;</span>,\n  <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-string\">&quot;asset.png&quot;</span>\n});\n</code></pre>"
						}
					]
				},
				{
					"name": "CompressedTextureResource",
					"type": "ClassDoc",
					"brief": "<p>Resource for compressed texture formats, as follows: S3TC/DXTn (&amp; their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.</p>",
					"description": "<p>Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\ngraphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\nmore detail in the same amount of memory.</p>\n<p>For most developers, container file formats are a better abstraction instead of directly handling raw texture\ndata. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):</p>\n<ul>\n<li><strong>.dds</strong> - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}</li>\n<li><strong>.ktx</strong> - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\nSee {@link PIXI.KTXLoader}.</li>\n<li><strong>.basis</strong> - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\nto the compression format supported on the device at <em>runtime</em>. It also supports transcoding into a uncompressed\nformat as a fallback; you must install the <code>@pixi/basis-loader</code>, <code>@pixi/basis-transcoder</code> packages separately to\nuse these files. See {@link PIXI.BasisLoader}.</li>\n</ul>\n<p>The loaders for the aforementioned formats use <code>CompressedTextureResource</code> internally. It is strongly suggested that\nthey be used instead.</p>\n<h2>Working directly with CompressedTextureResource</h2>\n<p>Since <code>CompressedTextureResource</code> inherits <code>BlobResource</code>, you can provide it a URL pointing to a file containing\nthe raw texture data (with no file headers!):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// The resource backing the texture data for your textures.</span>\n<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file</span>\n<span class=\"hljs-comment\">//   format such as KTX, DDS, or BASIS.</span>\n<span class=\"hljs-keyword\">const</span> compressedResource = <span class=\"hljs-keyword\">new</span> PIXI.CompressedTextureResource(<span class=\"hljs-string\">&quot;bunny.dxt5&quot;</span>, {\n  <span class=\"hljs-attr\">format</span>: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">256</span>,\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">256</span>\n});\n\n<span class=\"hljs-comment\">// You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.</span>\n<span class=\"hljs-keyword\">const</span> baseTexture = <span class=\"hljs-keyword\">new</span> PIXI.BaseTexture(compressedResource, { <span class=\"hljs-attr\">pmaMode</span>: PIXI.ALPHA_MODES.NPM });\n\n<span class=\"hljs-comment\">// Create a Texture to add to the TextureCache</span>\n<span class=\"hljs-keyword\">const</span> texture = <span class=\"hljs-keyword\">new</span> PIXI.Texture(baseTexture);\n\n<span class=\"hljs-comment\">// Add baseTexture &amp; texture to the global texture cache</span>\nPIXI.BaseTexture.addToCache(baseTexture, <span class=\"hljs-string\">&quot;bunny.dxt5&quot;</span>);\nPIXI.Texture.addToCache(texture, <span class=\"hljs-string\">&quot;bunny.dxt5&quot;</span>);\n</code></pre>",
					"members": [
						{
							"name": "buffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The viewable buffer on the data</p>"
						},
						{
							"name": "format",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The compression format</p>",
							"description": ""
						},
						{
							"name": "levels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The number of mipmap levels stored in the resource buffer.</p>",
							"description": ""
						},
						{
							"name": "origin",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The URL of the texture file</p>"
						},
						{
							"name": "_createLevelBuffers",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Pre-creates buffer views for each mipmap level</p>",
							"description": ""
						},
						{
							"name": "_formatToExtension",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Loads the blob</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onBlobLoaded",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "Container",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Container is a general-purpose display object that holds children. It also adds built-in support for advanced\nrendering features like masking and filtering.</p>\n<p>It is the base class of all display objects that act as a container for other objects, including Graphics\nand Sprite.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { BlurFilter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/filter-blur&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Container } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/display&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Graphics } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/graphics&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Sprite } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/sprite&#x27;</span>;\n\n<span class=\"hljs-keyword\">let</span> container = <span class=\"hljs-keyword\">new</span> Container();\n<span class=\"hljs-keyword\">let</span> sprite = Sprite.from(<span class=\"hljs-string\">&quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png&quot;</span>);\n\nsprite.width = <span class=\"hljs-number\">512</span>;\nsprite.height = <span class=\"hljs-number\">512</span>;\n\n<span class=\"hljs-comment\">// Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container</span>\n<span class=\"hljs-comment\">// is rendered.</span>\ncontainer.addChild(sprite);\n\n<span class=\"hljs-comment\">// Blurs whatever is rendered by the container</span>\ncontainer.filters = [<span class=\"hljs-keyword\">new</span> BlurFilter()];\n\n<span class=\"hljs-comment\">// Only the contents within a circle at the center should be rendered onto the screen.</span>\ncontainer.mask = <span class=\"hljs-keyword\">new</span> Graphics()\n .beginFill(<span class=\"hljs-number\">0xffffff</span>)\n .drawCircle(sprite.width / <span class=\"hljs-number\">2</span>, sprite.height / <span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">Math</span>.min(sprite.width, sprite.height) / <span class=\"hljs-number\">2</span>)\n .endFill();\n</code></pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "renderAdvancedWebGL",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "_renderWebGL",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>To be overridden by the subclasses.</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>To be overridden by the subclass</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ContextSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage the context.</p>",
					"description": "",
					"members": [
						{
							"name": "extensions",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Extensions being used</p>",
							"members": [
								{
									"name": "anisotropicFiltering",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 and v2 extension</p>"
								},
								{
									"name": "depthTexture",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 extension</p>"
								},
								{
									"name": "drawBuffers",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 extension</p>"
								},
								{
									"name": "floatTexture",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 extension</p>"
								},
								{
									"name": "loseContext",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 extension</p>"
								},
								{
									"name": "vertexArrayObject",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>WebGL v1 extension</p>"
								}
							]
						},
						{
							"name": "isLost",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if the context is lost</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "webGLVersion",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Either 1 or 2 to reflect the WebGL version being used</p>"
						},
						{
							"name": "supports",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Features supported by current context</p>",
							"members": [
								{
									"name": "uint32Indices",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Supports of 32-bit indices buffer</p>"
								}
							]
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contextChange",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle the context change event</p>"
						},
						{
							"name": "createContext",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Helper class to create a WebGL Context</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "getExtensions",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Auto-populate the extensions</p>",
							"description": ""
						},
						{
							"name": "handleContextLost",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Handles a lost webgl context</p>",
							"description": ""
						},
						{
							"name": "handleContextRestored",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Handles a restored webgl context</p>",
							"description": ""
						},
						{
							"name": "initFromContext",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize the context</p>",
							"description": ""
						},
						{
							"name": "initFromOptions",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize from context options</p>",
							"description": ""
						},
						{
							"name": "postrender",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Handle the post-render runner event</p>",
							"description": ""
						},
						{
							"name": "validateContext",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Validate context</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CountLimiter",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\nnumber of items per frame.</p>",
					"members": [
						{
							"name": "itemsLeft",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The number of items that can be prepared in the current frame.</p>"
						},
						{
							"name": "maxItemsPerFrame",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The maximum number of items that can be prepared each frame.</p>"
						},
						{
							"name": "allowedToUpload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks to see if another item can be uploaded. This should only be called once per item.</p>"
						},
						{
							"name": "beginFrame",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets any counting properties to start fresh on a new frame.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "CubeResource",
					"type": "ClassDoc",
					"brief": "<p>Resource for a CubeTexture which contains six resources.</p>",
					"description": "",
					"members": [
						{
							"name": "SIDES",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Number of texture sides to store for CubeResources</p>",
							"description": ""
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "linkBaseTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "addBaseTextureAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set a baseTexture by ID,\nArrayResource just takes resource from it, nothing more</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add binding</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Upload the resource</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Clean up anything, this happens when destroying is ready.</p>",
							"description": ""
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "DDSLoader",
					"type": "ClassDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "parse",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Parses the DDS file header, generates base-textures, and puts them into the texture\ncache.</p>"
						}
					]
				},
				{
					"name": "DepthResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for DepthTexture.</p>",
					"members": [
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Source array\nCannot be ClampedUint8Array because it cant be uploaded to WebGL</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy and don't use after this</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "DisplayObject",
					"type": "ClassDoc",
					"brief": "<p>The base class for all objects that are rendered on the screen.</p>",
					"description": "<p>This is an abstract class and can not be used on its own; rather it should be extended.</p>\n<h2>Display objects implemented in PixiJS</h2>\n<table>\n<thead>\n<tr>\n<th>Display Object</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>{@link PIXI.Container}</td>\n<td>Adds support for <code>children</code> to DisplayObject</td>\n</tr>\n<tr>\n<td>{@link PIXI.Graphics}</td>\n<td>Shape-drawing display object similar to the Canvas API</td>\n</tr>\n<tr>\n<td>{@link PIXI.Sprite}</td>\n<td>Draws textures (i.e. images)</td>\n</tr>\n<tr>\n<td>{@link PIXI.Text}</td>\n<td>Draws text using the Canvas API internally</td>\n</tr>\n<tr>\n<td>{@link PIXI.BitmapText}</td>\n<td>More scaleable solution for text rendering, reusing glyph textures</td>\n</tr>\n<tr>\n<td>{@link PIXI.TilingSprite}</td>\n<td>Draws textures/images in a tiled fashion</td>\n</tr>\n<tr>\n<td>{@link PIXI.AnimatedSprite}</td>\n<td>Draws an animation of multiple images</td>\n</tr>\n<tr>\n<td>{@link PIXI.Mesh}</td>\n<td>Provides a lower-level API for drawing meshes with custom data</td>\n</tr>\n<tr>\n<td>{@link PIXI.NineSlicePlane}</td>\n<td>Mesh-related</td>\n</tr>\n<tr>\n<td>{@link PIXI.SimpleMesh}</td>\n<td>v4-compatibile mesh</td>\n</tr>\n<tr>\n<td>{@link PIXI.SimplePlane}</td>\n<td>Mesh-related</td>\n</tr>\n<tr>\n<td>{@link PIXI.SimpleRope}</td>\n<td>Mesh-related</td>\n</tr>\n</tbody>\n</table>\n<h2>Transforms</h2>\n<p>The [transform]{@link DisplayObject#transform} of a display object describes the projection from its\nlocal coordinate space to its parent's local coordinate space. The following properties are derived\nfrom the transform:</p>\n <table>\n   <thead>\n     <tr>\n       <th>Property</th>\n       <th>Description</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>\n       <td>\n         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n         is equal to position, regardless of the other three transformations. In other words, It is the center of\n         rotation, scaling, and skewing.\n       </td>\n     </tr>\n     <tr>\n       <td>[position]{@link PIXI.DisplayObject#position}</td>\n       <td>\n         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local\n         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n       </td>\n     </tr>\n     <tr>\n       <td>[scale]{@link PIXI.DisplayObject#scale}</td>\n       <td>\n         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.\n       </td>\n     </tr>\n     <tr>\n       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>\n       <td>\n          Rotation. This will rotate the display object's projection by this angle (in radians).\n       </td>\n     </tr>\n     <tr>\n       <td>[skew]{@link PIXI.DisplayObject#skew}</td>\n       <td>\n         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n         <p>\n         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n         ⍺ and \"skew.y\" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be\n         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will\n         be rotated by an angle between ⍺ and β.\n         </p>\n         <p>\n         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n         a rotation. Indeed, if \"skew.x\" = -ϴ and \"skew.y\" = ϴ, it will produce an equivalent of \"rotation\" = ϴ.\n         </p>\n         <p>\n         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are communtative operations. Indeed,\n         because rotation is essentially a careful combination of the two.\n         </p>\n       </td>\n     </tr>\n     <tr>\n       <td>angle</td>\n       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>\n     </tr>\n     <tr>\n       <td>x</td>\n       <td>Translation. This is an alias for position.x!</td>\n     </tr>\n     <tr>\n       <td>y</td>\n       <td>Translation. This is an alias for position.y!</td>\n     </tr>\n     <tr>\n       <td>width</td>\n       <td>\n         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing\n         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n         is no concept of user-defined width.\n       </td>\n     </tr>\n     <tr>\n       <td>height</td>\n       <td>\n         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing\n         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n         is no concept of user-defined height.\n       </td>\n     </tr>\n   </tbody>\n </table>\n<h2>Bounds</h2>\n<p>The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit\naround it. The abstract <code>calculateBounds</code> method is responsible for providing it (and it should use the\n<code>worldTransform</code> to calculate in world space).</p>\n<p>There are a few additional types of bounding boxes:</p>\n<table>\n<thead>\n<tr>\n<th>Bounds</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>World Bounds</td>\n<td>This is synonymous is the regular bounds described above. See <code>getBounds()</code>.</td>\n</tr>\n<tr>\n<td>Local Bounds</td>\n<td>This the axis-aligned bounding box in the parent's local space. See <code>getLocalBounds()</code>.</td>\n</tr>\n<tr>\n<td>Render Bounds</td>\n<td>The bounds, but including extra rendering effects like filter padding.</td>\n</tr>\n<tr>\n<td>Projected Bounds</td>\n<td>The bounds of the projected display object onto the screen. Usually equals world bounds.</td>\n</tr>\n<tr>\n<td>Relative Bounds</td>\n<td>The bounds of a display object when projected onto a ancestor's (or parent's) space.</td>\n</tr>\n<tr>\n<td>Natural Bounds</td>\n<td>The bounds of an object in its own local space (not parent's space, like in local bounds)</td>\n</tr>\n<tr>\n<td>Content Bounds</td>\n<td>The natural bounds when excluding all children of a <code>Container</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3>calculateBounds</h3>\n<p>[Container]{@link Container} already implements <code>calculateBounds</code> in a manner that includes children.</p>\n<p>But for a non-Container display object, the <code>calculateBounds</code> method must be overriden in order for <code>getBounds</code> and\n<code>getLocalBounds</code> to work. This method must write the bounds into <code>this._bounds</code>.</p>\n<p>Generally, the following technique works for most simple cases: take the list of points\nforming the &quot;hull&quot; of the object (i.e. outline of the object's shape), and then add them\nusing {@link PIXI.Bounds#addPointMatrix}.</p>\n<pre><code class=\"hljs language-js\">calculateBounds(): <span class=\"hljs-keyword\">void</span>\n{\n    <span class=\"hljs-keyword\">const</span> points = [...];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = points.length; i &lt; j; i++)\n    {\n        <span class=\"hljs-built_in\">this</span>._bounds.addPointMatrix(<span class=\"hljs-built_in\">this</span>.worldTransform, points[i]);\n    }\n}\n</code></pre>\n<p>You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them\nin one array together.</p>\n<h2>Alpha</h2>\n<p>This alpha sets a display object's <strong>relative opacity</strong> w.r.t its parent. For example, if the alpha of a display\nobject is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\napplied on any ancestor further up the chain).</p>\n<p>The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.</p>\n<h2>Renderable vs Visible</h2>\n<p>The <code>renderable</code> and <code>visible</code> properties can be used to prevent a display object from being rendered to the\nscreen. However, there is a subtle difference between the two. When using <code>renderable</code>, the transforms  of the display\nobject (and its children subtree) will continue to be calculated. When using <code>visible</code>, the transforms will not\nbe calculated.</p>\n<p>It is recommended that applications use the <code>renderable</code> property for culling. See\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.</p>\n<p>Otherwise, to prevent an object from rendering in the general-purpose sense - <code>visible</code> is the property to use. This\none is also better in terms of performance.</p>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "mixin",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Mixes all enumerable properties and methods from a source object to DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "updateSmartMask",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Update the mask of the display-object based on whether its unmasked bounds are not a subset of the\nsmart-mask's bounds or are.</p>\n<p>NOTE: Setting the smart-mask to null will not remove the mask on the display-object, if it has already\nbeen enabled.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the display object.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Base destroy method for generic display objects. This will automatically\nremove the display object from its parent Container as well as remove\nall current event listeners and internal references. Do not use a DisplayObject\nafter calling <code>destroy()</code>.</p>"
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the object transform for rendering.</p>",
							"description": "<p>TODO - Optimization pass!</p>"
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Ellipse",
					"type": "ClassDoc",
					"brief": "<p>The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.</p>",
					"description": "",
					"members": [
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this Ellipse instance</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates given are contained within this ellipse</p>",
							"description": ""
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the framing rectangle of the ellipse as a Rectangle object</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Extract",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>This class provides renderer-specific plugins for exporting content from a renderer.\nFor instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).</p>\n<p>Do not instantiate these plugins directly. It is available from the <code>renderer.plugins</code> property.\nSee {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.</p>",
					"members": [
						{
							"name": "arrayPostDivide",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Takes premultiplied pixel data and produces regular pixel data</p>",
							"description": ""
						},
						{
							"name": "base64",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Will return a a base64 encoded string of this target. It works by calling\n<code>Extract.getCanvas</code> and then running toDataURL on that.</p>"
						},
						{
							"name": "canvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a Canvas element, renders this target to it and then returns it.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the extract</p>",
							"description": ""
						},
						{
							"name": "image",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Will return a HTML Image of the target</p>",
							"description": ""
						},
						{
							"name": "pixels",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\norder, with integer values between 0 and 255 (included).</p>"
						}
					]
				},
				{
					"name": "FillStyle",
					"type": "ClassDoc",
					"brief": "<p>Fill style object for Graphics.</p>",
					"description": "",
					"members": [
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The alpha value used when filling the Graphics object.</p>",
							"description": ""
						},
						{
							"name": "color",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The hex color value used when coloring the Graphics object.</p>",
							"description": ""
						},
						{
							"name": "matrix",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The transform aplpied to the texture.</p>",
							"description": ""
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The texture to be used for the fill.</p>",
							"description": ""
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>If the current fill is visible.</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clones the object</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroy and don't use after this</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Reset</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Filter",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>A filter is a special shader that applies post-processing effects to an input texture and writes into an output\nrender-target.</p>\n<p>{@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n{@link PIXI.filters.BlurFilter BlurFilter}.</p>\n<h3>Usage</h3>\n<p>Filters can be applied to any DisplayObject or Container.\nPixiJS' <code>FilterSystem</code> renders the container into temporary Framebuffer,\nthen filter renders it to the screen.\nMultiple filters can be added to the <code>filters</code> array property and stacked on each other.</p>\n<pre><code class=\"hljs\">const filter = <span class=\"hljs-keyword\">new</span> PIXI.<span class=\"hljs-constructor\">Filter(<span class=\"hljs-params\">myShaderVert</span>, <span class=\"hljs-params\">myShaderFrag</span>, { <span class=\"hljs-params\">myUniform</span>: 0.5 })</span>;\nconst container = <span class=\"hljs-keyword\">new</span> PIXI.<span class=\"hljs-constructor\">Container()</span>;\ncontainer.filters = <span class=\"hljs-literal\">[<span class=\"hljs-identifier\">filter</span>]</span>;\n</code></pre>\n<h3>Previous Version Differences</h3>\n<p>In PixiJS <strong>v3</strong>, a filter was always applied to <em>whole screen</em>.</p>\n<p>In PixiJS <strong>v4</strong>, a filter can be applied <em>only part of the screen</em>.\nDevelopers had to create a set of uniforms to deal with coordinates.</p>\n<p>In PixiJS <strong>v5</strong> combines <em>both approaches</em>.\nDevelopers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\nbringing those extra uniforms into account.</p>\n<p>Also be aware that we have changed default vertex shader, please consult\n{@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.</p>\n<h3>Frames</h3>\n<p>The following table summarizes the coordinate spaces used in the filtering pipeline:</p>\n <table>\n <thead>\n   <tr>\n     <th>Coordinate Space</th>\n     <th>Description</th>\n   </tr>\n </thead>\n <tbody>\n   <tr>\n     <td>Texture Coordinates</td>\n     <td>\n         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along\n         both axes.\n     </td>\n   </tr>\n   <tr>\n     <td>World Space</td>\n     <td>\n         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).\n     </td>\n   </tr>\n   <tr>\n     <td>Physical Pixels</td>\n     <td>\n         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture\n         coordinates by the dimensions of the texture.\n     </td>\n   </tr>\n </tbody>\n </table>\n<h3>Built-in Uniforms</h3>\n<p>PixiJS viewport uses screen (CSS) coordinates, <code>(0, 0, renderer.screen.width, renderer.screen.height)</code>,\nand <code>projectionMatrix</code> uniform maps it to the gl viewport.</p>\n<p><strong>uSampler</strong></p>\n<p>The most important uniform is the input texture that container was rendered into.\n<em>Important note: as with all Framebuffers in PixiJS, both input and output are\npremultiplied by alpha.</em></p>\n<p>By default, input normalized coordinates are passed to fragment shader with <code>vTextureCoord</code>.\nUse it to sample the input.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> fragment = `\n<span class=\"hljs-keyword\">varying</span> <span class=\"hljs-type\">vec2</span> vTextureCoord;\n<span class=\"hljs-keyword\">uniform</span> <span class=\"hljs-type\">sampler2D</span> uSampler;\n<span class=\"hljs-type\">void</span> main(<span class=\"hljs-type\">void</span>)\n{\n   <span class=\"hljs-built_in\">gl_FragColor</span> = <span class=\"hljs-built_in\">texture2D</span>(uSampler, vTextureCoord);\n}\n`;\n\n<span class=\"hljs-keyword\">const</span> myFilter = new PIXI.Filter(null, fragment);\n</code></pre>\n<p>This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.</p>\n<p><strong>outputFrame</strong></p>\n<p>The <code>outputFrame</code> holds the rectangle where filter is applied in screen (CSS) coordinates.\nIt's the same as <code>renderer.screen</code> for a fullscreen filter.\nOnly a part of  <code>outputFrame.zw</code> size of temporary Framebuffer is used,\n<code>(0, 0, outputFrame.width, outputFrame.height)</code>,</p>\n<p>Filters uses this quad to normalized (0-1) space, its passed into <code>aVertexPosition</code> attribute.\nTo calculate vertex position in screen space using normalized (0-1) space:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-type\">vec4</span> filterVertexPosition( <span class=\"hljs-type\">void</span> )\n{\n    <span class=\"hljs-type\">vec2</span> position = aVertexPosition * <span class=\"hljs-built_in\">max</span>(outputFrame.zw, <span class=\"hljs-type\">vec2</span>(<span class=\"hljs-number\">0.</span>)) + outputFrame.xy;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">vec4</span>((projectionMatrix * <span class=\"hljs-type\">vec3</span>(position, <span class=\"hljs-number\">1.0</span>)).xy, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1.0</span>);\n}\n</code></pre>\n<p><strong>inputSize</strong></p>\n<p>Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\nThe <code>inputSize.xy</code> are size of temporary framebuffer that holds input.\nThe <code>inputSize.zw</code> is inverted, it's a shortcut to evade division inside the shader.</p>\n<p>Set <code>inputSize.xy = outputFrame.zw</code> for a fullscreen filter.</p>\n<p>To calculate input normalized coordinate, you have to map it to filter normalized space.\nMultiply by <code>outputFrame.zw</code> to get input coordinate.\nDivide by <code>inputSize.xy</code> to get input normalized coordinate.</p>\n<pre><code class=\"hljs\">vec2 <span class=\"hljs-function\"><span class=\"hljs-title\">filterTextureCoord</span>(<span class=\"hljs-params\"> <span class=\"hljs-keyword\">void</span> </span>)</span>\n{\n    <span class=\"hljs-keyword\">return</span> aVertexPosition * (outputFrame.zw * inputSize.zw); <span class=\"hljs-comment\">// same as /inputSize.xy</span>\n}\n</code></pre>\n<p><strong>resolution</strong></p>\n<p>The <code>resolution</code> is the ratio of screen (CSS) pixels to real pixels.</p>\n<p><strong>inputPixel</strong></p>\n<p><code>inputPixel.xy</code> is the size of framebuffer in real pixels, same as <code>inputSize.xy * resolution</code>\n<code>inputPixel.zw</code> is inverted <code>inputPixel.xy</code>.</p>\n<p>It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.</p>\n<p><strong>inputClamp</strong></p>\n<p>If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\nFor displacements, coordinates has to be clamped.</p>\n<p>The <code>inputClamp.xy</code> is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n<code>inputClamp.zw</code> is bottom-right pixel center.</p>\n<pre><code class=\"hljs\">vec4 color = texture2<span class=\"hljs-constructor\">D(<span class=\"hljs-params\">uSampler</span>, <span class=\"hljs-params\">clamp</span>(<span class=\"hljs-params\">modifigedTextureCoord</span>, <span class=\"hljs-params\">inputClamp</span>.<span class=\"hljs-params\">xy</span>, <span class=\"hljs-params\">inputClamp</span>.<span class=\"hljs-params\">zw</span>)</span>)\n</code></pre>\n<p>OR</p>\n<pre><code class=\"hljs\">vec4 color = texture2<span class=\"hljs-constructor\">D(<span class=\"hljs-params\">uSampler</span>, <span class=\"hljs-params\">min</span>(<span class=\"hljs-params\">modifigedTextureCoord</span>, <span class=\"hljs-params\">inputClamp</span>.<span class=\"hljs-params\">zw</span>)</span>)\n</code></pre>\n<h3>Additional Information</h3>\n<p>Complete documentation on Filter usage is located in the\n{@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.</p>\n<p>Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n{@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.</p>",
					"members": [
						{
							"name": "defaultFragmentSrc",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default fragment shader source</p>",
							"description": ""
						},
						{
							"name": "defaultVertexSrc",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default vertex shader source</p>",
							"description": ""
						},
						{
							"name": "SOURCE_KEY_MAP",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "static",
							"brief": "<p>Used for caching shader IDs</p>",
							"description": ""
						},
						{
							"name": "autoFit",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the blendmode of the filter</p>",
							"description": ""
						},
						{
							"name": "enabled",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
							"description": ""
						},
						{
							"name": "legacy",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Legacy filters use position and uvs from attributes</p>"
						},
						{
							"name": "padding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
						},
						{
							"name": "program",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Program that the shader uses</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The WebGL state the filter requires to render</p>"
						},
						{
							"name": "uniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
						},
						{
							"name": "apply",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies the filter</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "FilterSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage filters.</p>",
					"description": "<h2>Pipeline</h2>\n<p>The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\n[filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.</p>\n<p>The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\n<code>(0, 0, filterFrame.width, filterFrame.height)</code> into the filter render-texture. The filter-frame is also called\nthe source-frame, as it is used to bind the filter render-textures. The last filter outputs to the <code>filterFrame</code>\nin the final render-target.</p>\n<h2>Usage</h2>\n<p>{@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:</p>\n<ul>\n<li><strong>push</strong>: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.</li>\n<li><strong>render</strong>: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\ninside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\nillegal during an existing render cycle, and it may reset the filter system.</li>\n<li><strong>pop</strong>: Use {@link PIXI.FilterSystem#pop} to pop &amp; execute the filters you initially pushed. It will apply them\nserially and output to the bounds of the filter-target.</li>\n</ul>",
					"members": [
						{
							"name": "activeState",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Active state</p>"
						},
						{
							"name": "defaultFilterStack",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>List of filters for the FilterSystem</p>"
						},
						{
							"name": "forceClear",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}</p>"
						},
						{
							"name": "globalUniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This uniform group is attached to filter uniforms when used</p>",
							"members": [
								{
									"name": "filterArea",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "filterClamp",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "inputClamp",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "inputPixel",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "inputSize",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "outputFrame",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								},
								{
									"name": "resolution",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "quad",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A very simple geometry used when drawing a filter effect to the screen</p>"
						},
						{
							"name": "quadUv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Quad UVs</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "statePool",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>a pool for storing filter states, save us creating new ones each tick</p>"
						},
						{
							"name": "tempRect",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Temporary rect for maths</p>"
						},
						{
							"name": "texturePool",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>stores a bunch of PO2 textures used for filtering</p>"
						},
						{
							"name": "useMaxPadding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Old padding behavior is to use the max amount instead of sum padding.\nUse this flag if you need the old behavior.</p>"
						},
						{
							"name": "calculateNormalizedScreenSpaceMatrix",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "calculateScreenSpaceMatrix",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "applyFilter",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws a filter.</p>",
							"description": ""
						},
						{
							"name": "bindAndClear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Binds a renderTexture with corresponding <code>filterFrame</code>, clears it if mode corresponds.</p>"
						},
						{
							"name": "calculateSpriteMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Multiply <em>input normalized coordinates</em> to this matrix to get <em>sprite texture normalized coordinates</em>.</p>",
							"description": "<p>Use <code>outputMatrix * vTextureCoord</code> in the shader.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this Filter System.</p>",
							"description": ""
						},
						{
							"name": "emptyPool",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Empties the texture pool.</p>",
							"description": ""
						},
						{
							"name": "getFilterTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Gets extra render texture to use inside current filter\nTo be compliant with older filters, you can use params in any order</p>"
						},
						{
							"name": "pop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pops off a set of the filters and applies them. This should be called once you've rendered everything to be filtered.</p>",
							"description": ""
						},
						{
							"name": "push",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\ninput render-texture for the rest of the filtering pipeline.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>calls <code>texturePool.resize()</code>, affects fullScreen renderTextures</p>",
							"description": ""
						},
						{
							"name": "returnFilterTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Frees a render texture back into the pool.</p>",
							"description": ""
						},
						{
							"name": "getOptimalFilterTexture",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Gets a Power-of-Two render texture or fullScreen texture</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Framebuffer",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\none internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.</p>\n<p>On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.</p>",
					"members": [
						{
							"name": "colorTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Reference to the colorTexture.</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Height of framebuffer in pixels</p>"
						},
						{
							"name": "multisample",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Desired number of samples for antialiasing. 0 means AA should not be used.</p>",
							"description": "<p>Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\nAntialiasing is the same as for main buffer with renderer <code>antialias:true</code> options.\nSeriously affects GPU memory consumption and GPU performance.</p>\n<pre><code class=\"hljs language-js\"> renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\n <span class=\"hljs-comment\">//...</span>\n renderer.render(renderTexture, myContainer);\n renderer.framebuffer.blit(); <span class=\"hljs-comment\">// copies data from MSAA framebuffer to texture</span>\n</code></pre>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Width of framebuffer in pixels</p>"
						},
						{
							"name": "addColorTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add texture to the colorTexture array</p>",
							"description": ""
						},
						{
							"name": "addDepthTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add a depth texture to the frame buffer</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroyDepthTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys and removes the depth texture added to this framebuffer.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "enableDepth",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enable depth on the frame buffer</p>",
							"description": ""
						},
						{
							"name": "enableStencil",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enable stencil on the frame buffer</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resize the frame buffer</p>",
							"description": ""
						}
					]
				},
				{
					"name": "FramebufferSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage framebuffers.</p>",
					"description": "",
					"members": [
						{
							"name": "managedFramebuffers",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A list of managed framebuffers</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Get the size of the current width and height. Returns object with <code>width</code> and <code>height</code> values.</p>",
							"description": ""
						},
						{
							"name": "unknownFramebuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Framebuffer value that shows that we don't know what is bound</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind a framebuffer</p>",
							"description": ""
						},
						{
							"name": "blit",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Only works with WebGL2</p>",
							"description": "<p>blits framebuffer to another of the same or bigger size\nafter that target framebuffer is bound</p>\n<p>Fails with WebGL warning if blits multisample framebuffer to different size</p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clear the color of the context</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contextChange",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets up the renderer context and necessary buffers.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "detectSamples",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Detects number of samples that is not more than a param but as close to it as possible</p>",
							"description": ""
						},
						{
							"name": "disposeAll",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Disposes all framebuffers, but not textures bound to them</p>"
						},
						{
							"name": "disposeFramebuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Disposes framebuffer</p>"
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>resets framebuffer stored state, binds screen framebuffer</p>",
							"description": "<p>should be called before renderTexture reset()</p>"
						},
						{
							"name": "setViewport",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the WebGLRenderingContext's viewport.</p>",
							"description": ""
						},
						{
							"name": "initFramebuffer",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize framebuffer for this context</p>",
							"description": ""
						},
						{
							"name": "resizeFramebuffer",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Resize the framebuffer</p>",
							"description": ""
						},
						{
							"name": "updateFramebuffer",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Update the framebuffer</p>",
							"description": ""
						},
						{
							"name": "forceStencil",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\nUsed by MaskSystem, when its time to use stencil mask for Graphics element.</p>\n<p>Its an alternative for public lazy <code>framebuffer.enableStencil</code>, in case we need stencil without rebind.</p>"
						}
					]
				},
				{
					"name": "Geometry",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Geometry represents a model. It consists of two components:</p>\n<ul>\n<li>GeometryStyle - The structure of the model such as the attributes layout</li>\n<li>GeometryData - the data of the model - this consists of buffers.\nThis can include anything from positions, uvs, normals, colors etc.</li>\n</ul>\n<p>Geometry can be defined without passing in a style or data if required (thats how I prefer!)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> geometry = <span class=\"hljs-keyword\">new</span> PIXI.Geometry();\n\ngeometry.addAttribute(<span class=\"hljs-string\">&#x27;positions&#x27;</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>], <span class=\"hljs-number\">2</span>);\ngeometry.addAttribute(<span class=\"hljs-string\">&#x27;uvs&#x27;</span>, [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">2</span>)\ngeometry.addIndex([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>])\n\n</code></pre>",
					"members": [
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "merge",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>merges an array of geometries into a new single one\ngeometry attribute styles must match for this operation to work</p>"
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						}
					]
				},
				{
					"name": "GeometrySystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage geometry.</p>",
					"description": "",
					"members": [
						{
							"name": "canUseUInt32ElementIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if support <code>gl.UNSIGNED_INT</code> in <code>gl.drawElements</code> or <code>gl.drawElementsInstanced</code></p>"
						},
						{
							"name": "hasInstance",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if has <code>ANGLE_instanced_arrays</code> extension</p>"
						},
						{
							"name": "hasVao",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if we has <code>*_vertex_array_object</code> extension</p>"
						},
						{
							"name": "managedBuffers",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cache for all buffers by id, used in case renderer gets destroyed or for profiling</p>"
						},
						{
							"name": "managedGeometries",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cache for all geometries by id, used in case renderer gets destroyed or for profiling</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Binds geometry so that is can be drawn. Creating a Vao if required</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contextChange",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets up the renderer context and necessary buffers.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "disposeAll",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>dispose all WebGL resources of all managed geometries and buffers</p>"
						},
						{
							"name": "disposeBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Disposes buffer</p>"
						},
						{
							"name": "disposeGeometry",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Disposes geometry</p>"
						},
						{
							"name": "draw",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draw the geometry</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Reset and unbind any active VAO and geometry</p>",
							"description": ""
						},
						{
							"name": "activateVao",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Activate vertex array object</p>",
							"description": ""
						},
						{
							"name": "checkCompatibility",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Check compability between a geometry and a program</p>"
						},
						{
							"name": "getSignature",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Takes a geometry and program and generates a unique signature for them.</p>",
							"description": ""
						},
						{
							"name": "initGeometryVao",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\nIf vao is created, it is bound automatically.</p>"
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Unbind/reset everything</p>"
						},
						{
							"name": "updateBuffers",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Update buffers</p>"
						}
					]
				},
				{
					"name": "GLFramebuffer",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Internal framebuffer for WebGL context</p>",
					"members": [
						{
							"name": "blitFramebuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>In case we use MSAA, this is actual framebuffer that has colorTextures[0]\nThe contents of that framebuffer are read when we use that renderTexture in sprites</p>"
						},
						{
							"name": "framebuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The WebGL framebuffer</p>"
						},
						{
							"name": "msaaBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info</p>"
						},
						{
							"name": "multisample",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Detected AA samples number</p>"
						},
						{
							"name": "stencil",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>stencil+depth , usually costs 32bits per pixel</p>"
						},
						{
							"name": "dirtyFormat",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>latest known version of framebuffer format</p>"
						},
						{
							"name": "dirtyId",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>latest known version of framebuffer</p>"
						},
						{
							"name": "dirtySize",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>latest known version of framebuffer size</p>"
						}
					]
				},
				{
					"name": "GLProgram",
					"type": "ClassDoc",
					"brief": "<p>Helper class to create a WebGL Program</p>",
					"description": "",
					"members": [
						{
							"name": "program",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The shader program</p>",
							"description": ""
						},
						{
							"name": "uniformData",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>holds the uniform data which contains uniform locations\nand current uniform values used for caching and preventing unneeded GPU commands</p>"
						},
						{
							"name": "uniformGroups",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>uniformGroups holds the various upload functions for the shader. Each uniform group\nand program have a unique upload function generated.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Makes a new Pixi program</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this program</p>",
							"description": ""
						}
					]
				},
				{
					"name": "GLTexture",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Internal texture for WebGL context</p>",
					"members": [
						{
							"name": "dirtyId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Texture contents dirty flag</p>"
						},
						{
							"name": "dirtyStyleId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Texture style dirty flag</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Height of texture that was used in texImage2D</p>"
						},
						{
							"name": "internalFormat",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Type copied from baseTexture</p>"
						},
						{
							"name": "mipmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether mip levels has to be generated</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The WebGL texture</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Type copied from baseTexture</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Width of texture that was used in texImage2D</p>"
						},
						{
							"name": "wrapMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>WrapMode copied from baseTexture</p>"
						}
					]
				},
				{
					"name": "Graphics",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Graphics class is primarily used to render primitive shapes such as lines, circles and\nrectangles to the display, and to color and fill them.  However, you can also use a Graphics\nobject to build a list of primitives to use as a mask, or as a complex hitArea.</p>\n<p>Please note that due to legacy naming conventions, the behavior of some functions in this class\ncan be confusing.  Each call to <code>drawRect()</code>, <code>drawPolygon()</code>, etc. actually stores that primitive\nin the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\nfunctions do not directly draw anything to the screen.  Similarly, the <code>clear()</code> function doesn't\nchange the screen, it simply resets the list of primitives, which can be useful if you want to\nrebuild the contents of an existing Graphics object.</p>\n<p>Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\nan optimization, by passing it into a new Geometry object's constructor.  Because of this\nability, it's important to call <code>destroy()</code> on Geometry objects once you are done with them, to\nproperly dereference each GraphicsGeometry and prevent memory leaks.</p>",
					"members": [
						{
							"name": "graphicsData",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "_TEMP_POINT",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Temporary point to use for containsPoint</p>",
							"description": ""
						},
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "fill",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The current fill style.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "line",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The current line style.</p>",
							"description": ""
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Renderer plugin for batching</p>",
							"description": ""
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_fillStyle",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Current fill style</p>",
							"description": ""
						},
						{
							"name": "_holeMode",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Current hole mode is enabled.</p>",
							"description": ""
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_lineStyle",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Current line style</p>",
							"description": ""
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_matrix",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Current shape transform matrix.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "batchDirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Update dirty for limiting calculating batches.</p>",
							"description": ""
						},
						{
							"name": "batches",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
							"description": ""
						},
						{
							"name": "batchTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
							"description": ""
						},
						{
							"name": "currentPath",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Current path</p>",
							"description": ""
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Copy of the object vertex data.</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "drawChamferRect",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Draw Rectangle with chamfer corners.</p>",
							"description": "<p><em>Note: Only available with <strong>@pixi/graphics-extras</strong>.</em></p>"
						},
						{
							"name": "drawFilletRect",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Draw Rectangle with fillet corners.</p>",
							"description": "<p><em>Note: Only available with <strong>@pixi/graphics-extras</strong>.</em></p>"
						},
						{
							"name": "drawRegularPolygon",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Draw a regular polygon where all sides are the same length.</p>",
							"description": "<p><em>Note: Only available with <strong>@pixi/graphics-extras</strong>.</em></p>"
						},
						{
							"name": "drawTorus",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Draw a torus shape, like a donut. Can be used for something like a circle loader.</p>",
							"description": "<p><em>Note: Only available with <strong>@pixi/graphics-extras</strong>.</em></p>"
						},
						{
							"name": "lineStyle",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "_renderDrawCallDirect",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders specific DrawCall</p>",
							"description": ""
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "arc",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
							"description": ""
						},
						{
							"name": "arcTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
							"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
						},
						{
							"name": "beginFill",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
						},
						{
							"name": "beginHole",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
						},
						{
							"name": "beginTextureFill",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Begin the texture fill</p>",
							"description": ""
						},
						{
							"name": "bezierCurveTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
						},
						{
							"name": "closePath",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Closes the current path.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this graphics object</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Graphics object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "drawCircle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws a circle.</p>",
							"description": ""
						},
						{
							"name": "drawEllipse",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws an ellipse.</p>",
							"description": ""
						},
						{
							"name": "drawPolygon",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws a polygon using the given path.</p>",
							"description": ""
						},
						{
							"name": "drawRect",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws a rectangle shape.</p>",
							"description": ""
						},
						{
							"name": "drawRoundedRect",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
							"description": ""
						},
						{
							"name": "drawShape",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draw any shape.</p>",
							"description": ""
						},
						{
							"name": "drawStar",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
							"description": ""
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "endFill",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
							"description": ""
						},
						{
							"name": "endHole",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>End adding holes to the last draw shape</p>"
						},
						{
							"name": "generateCanvasTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "isFastRect",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
						},
						{
							"name": "lineStyle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
						},
						{
							"name": "lineTextureStyle",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Like line style but support texture for line fill.</p>",
							"description": ""
						},
						{
							"name": "lineTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
						},
						{
							"name": "moveTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Moves the current drawing position to x, y.</p>",
							"description": ""
						},
						{
							"name": "quadraticCurveTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Apply a matrix to the positional data.</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
							"description": ""
						},
						{
							"name": "_initCurve",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize the curve</p>",
							"description": ""
						},
						{
							"name": "_populateBatches",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Populating batches for rendering</p>",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "_renderBatched",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
							"description": ""
						},
						{
							"name": "_renderDirect",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the graphics direct</p>",
							"description": ""
						},
						{
							"name": "_resolveDirectShader",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Resolves shader for direct rendering</p>",
							"description": ""
						},
						{
							"name": "calculateTints",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
						},
						{
							"name": "finishPoly",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Finish the polygon object.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "startPoly",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Start a polygon object internally</p>"
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "GraphicsData",
					"type": "ClassDoc",
					"brief": "<p>A class to contain data useful for Graphics objects</p>",
					"description": "",
					"members": [
						{
							"name": "fillStyle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The style of the fill.</p>"
						},
						{
							"name": "holes",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The collection of holes.</p>"
						},
						{
							"name": "lineStyle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The style of the line.</p>"
						},
						{
							"name": "matrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The transform matrix.</p>"
						},
						{
							"name": "points",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The collection of points.</p>"
						},
						{
							"name": "shape",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The shape object to draw.</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The type of the shape, see the Const.Shapes file for all the existing types,</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a new GraphicsData object with the same values as this one.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Graphics data.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "GraphicsGeometry",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Graphics class contains methods used to draw primitive shapes such as lines, circles and\nrectangles to the display, and to color and fill them.</p>\n<p>GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\nto re-tesselate using <strong>earcut</strong>. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.</p>",
					"members": [
						{
							"name": "BATCHABLE_SIZE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>The maximum number of points to consider an object &quot;batchable&quot;,\nable to be batched by the renderer's batch system.</p>"
						},
						{
							"name": "bounds",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>Get the current bounds of the graphic geometry.</p>",
							"description": ""
						},
						{
							"name": "boundsPadding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Padding to add to the bounds.</p>",
							"description": ""
						},
						{
							"name": "closePointEps",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Minimal distance between points that are considered different.\nAffects line tesselation.</p>"
						},
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cached bounds.</p>",
							"description": ""
						},
						{
							"name": "_buffer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Buffer used for position, color, texture IDs</p>",
							"description": ""
						},
						{
							"name": "_indexBuffer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Index buffer data</p>",
							"description": ""
						},
						{
							"name": "batchDirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Batches need to regenerated if the geometry is updated.</p>",
							"description": ""
						},
						{
							"name": "batches",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Intermediate abstract format sent to batch system.\nCan be converted to drawCalls or to batchable objects.</p>"
						},
						{
							"name": "boundsDirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The bounds dirty flag.</p>",
							"description": ""
						},
						{
							"name": "cacheDirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used to check if the cache is dirty.</p>",
							"description": ""
						},
						{
							"name": "clearDirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used to detect if we cleared the graphicsData.</p>",
							"description": ""
						},
						{
							"name": "colors",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The collection of colors</p>",
							"description": ""
						},
						{
							"name": "dirty",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Used to detect if the graphics object has changed.</p>",
							"description": ""
						},
						{
							"name": "drawCalls",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>List of current draw calls drived from the batches.</p>",
							"description": ""
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "graphicsData",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The collection of drawn shapes.</p>",
							"description": ""
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The indices of the vertices</p>",
							"description": ""
						},
						{
							"name": "points",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>An array of points to draw, 2 numbers per point</p>",
							"description": ""
						},
						{
							"name": "shapeIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Index of the last batched shape in the stack of calls.</p>",
							"description": ""
						},
						{
							"name": "textureIds",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Reference to the texture IDs.</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The UVs collection</p>",
							"description": ""
						},
						{
							"name": "_compareStyles",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Affinity check</p>",
							"description": ""
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "adjustUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Modify uvs array according to position of texture region\nDoes not work with rotated or trimmed textures</p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Check to see if a point is contained within this geometry.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the GraphicsGeometry object.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "drawHole",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.</p>",
							"description": ""
						},
						{
							"name": "drawShape",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						},
						{
							"name": "invalidate",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call if you changed graphicsData manually.\nEmpties all batch buffers.</p>"
						},
						{
							"name": "updateBatches",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generates intermediate batch data. Either gets converted to drawCalls\nor used to convert to batch objects directly by the Graphics object.</p>"
						},
						{
							"name": "addColors",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Add colors.</p>",
							"description": ""
						},
						{
							"name": "addTextureIds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Add texture id that the shader/fragment wants to use.</p>",
							"description": ""
						},
						{
							"name": "addUvs",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Generates the UVs for a shape.</p>",
							"description": ""
						},
						{
							"name": "buildDrawCalls",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Converts intermediate batches data to drawCalls.</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Update the local bounds of the object. Expensive to use performance-wise.</p>",
							"description": ""
						},
						{
							"name": "isBatchable",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks to see if this graphics geometry can be batched.\nCurrently it needs to be small enough and not contain any native lines.</p>"
						},
						{
							"name": "packAttributes",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Packs attributes to single buffer.</p>",
							"description": ""
						},
						{
							"name": "packBatches",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Offset the indices so that it works with the batcher.</p>",
							"description": ""
						},
						{
							"name": "processFill",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Process fill part of Graphics.</p>",
							"description": ""
						},
						{
							"name": "processHoles",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Process the holes data.</p>",
							"description": ""
						},
						{
							"name": "processLine",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Process line part of Graphics.</p>",
							"description": ""
						},
						{
							"name": "transformPoints",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Transform points using matrix.</p>",
							"description": ""
						},
						{
							"name": "validateBatching",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Test geometry for batching process.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ImageBitmapResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for ImageBitmap.</p>",
					"members": [
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy this BaseImageResource</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks if source width/height was changed, resize can cause extra baseTexture update.\nTriggers one update in any case.</p>"
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "ImageResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for HTMLImageElement.</p>",
					"members": [
						{
							"name": "alphaMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Controls texture alphaMode field\nCopies from options\nDefault is <code>null</code>, copies option from baseTexture</p>"
						},
						{
							"name": "bitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The ImageBitmap element created for HTMLImageElement</p>"
						},
						{
							"name": "createBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If capable, convert the image using createImageBitmap API</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "premultiplyAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "set",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "preserveBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If the image should be disposed after upload</p>"
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "url",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>URL of the image source</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "_load",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Promise when loading</p>"
						},
						{
							"name": "_process",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>When process is completed</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys this texture</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a promise when image will be loaded and processed</p>",
							"description": ""
						},
						{
							"name": "process",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Called when we need to convert image into BitmapImage.\nCan be called multiple times, real promise is cached inside.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks if source width/height was changed, resize can cause extra baseTexture update.\nTriggers one update in any case.</p>"
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Upload the image resource to GPU.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "InteractionData",
					"type": "ClassDoc",
					"brief": "<p>Holds all information related to an Interaction event</p>",
					"description": "",
					"members": [
						{
							"name": "button",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicates which button was pressed on the mouse or pointer device to trigger the event.</p>"
						},
						{
							"name": "buttons",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.</p>"
						},
						{
							"name": "global",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This point stores the global coords of where the touch/mouse event happened</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The height of the pointer's contact along the y-axis, measured in CSS pixels.\nradiusY of TouchEvents will be represented by this value.</p>"
						},
						{
							"name": "identifier",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Unique identifier for this interaction</p>",
							"description": ""
						},
						{
							"name": "isPrimary",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicates whether or not the pointer device that created the event is the primary pointer.</p>"
						},
						{
							"name": "originalEvent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>When passed to an event handler, this will be the original DOM Event that was captured</p>",
							"description": ""
						},
						{
							"name": "pointerId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The unique identifier of the pointer. It will be the same as <code>identifier</code>.</p>"
						},
						{
							"name": "pointerType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The type of pointer that triggered the event.</p>"
						},
						{
							"name": "pressure",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pressure applied by the pointing device during the event. A Touch's force property\nwill be represented by this value.</p>"
						},
						{
							"name": "rotationAngle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.</p>"
						},
						{
							"name": "tangentialPressure",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Barrel pressure on a stylus pointer.</p>"
						},
						{
							"name": "target",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The target Sprite that was interacted with</p>",
							"description": ""
						},
						{
							"name": "tiltX",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle, in degrees, between the pointer device and the screen.</p>"
						},
						{
							"name": "tiltY",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle, in degrees, between the pointer device and the screen.</p>"
						},
						{
							"name": "twist",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Twist of a stylus pointer.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The width of the pointer's contact along the x-axis, measured in CSS pixels.\nradiusX of TouchEvents will be represented by this value.</p>"
						},
						{
							"name": "copyEvent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies properties from normalized event data.</p>",
							"description": ""
						},
						{
							"name": "getLocalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>This will return the local coordinates of the specified displayObject for this InteractionData</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets the data for pooling.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "InteractionEvent",
					"type": "ClassDoc",
					"brief": "<p>Event class that mimics native DOM events.</p>",
					"description": "",
					"members": [
						{
							"name": "currentTarget",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The object whose event listener’s callback is currently being invoked.</p>",
							"description": ""
						},
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>InteractionData related to this event</p>",
							"description": ""
						},
						{
							"name": "stopped",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether this event will continue propagating in the tree.</p>",
							"description": "<p>Remaining events for the {@link stopsPropagatingAt} object\nwill still be dispatched.</p>"
						},
						{
							"name": "target",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The object which caused this event to be dispatched.\nFor listener callback see {@link PIXI.InteractionEvent.currentTarget}.</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Type of the event</p>",
							"description": ""
						},
						{
							"name": "stopPropagationHint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether we already reached the element we want to\nstop propagating at. This is important for delayed events,\nwhere we start over deeper in the tree again.</p>"
						},
						{
							"name": "stopsPropagatingAt",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>At which object this event stops propagating.</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets the event.</p>",
							"description": ""
						},
						{
							"name": "stopPropagation",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Prevents event from reaching any objects other than the current object.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "InteractionManager",
					"type": "ClassDoc",
					"brief": "<p>The interaction manager deals with mouse, touch and pointer events.</p>",
					"description": "<p>Any DisplayObject can be interactive if its <code>interactive</code> property is set to true.</p>\n<p>This manager also supports multitouch.</p>\n<p>An instance of this class is automatically created by default, and can be found at <code>renderer.plugins.interaction</code></p>",
					"members": [
						{
							"name": "autoPreventDefault",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Should default browser actions automatically be prevented.\nDoes not apply to pointer events for backwards compatibility\npreventDefault on pointer events stops mouse events from firing\nThus, for every pointer event, there will always be either a mouse of touch event alongside it.</p>"
						},
						{
							"name": "currentCursorMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The mode of the cursor that is being used.\nThe value of this is a key from the cursorStyles dictionary.</p>"
						},
						{
							"name": "cursorStyles",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\nvalues, objects are handled as dictionaries of CSS values for interactionDOMElement,\nand functions are called instead of changing the CSS.\nDefault CSS cursor values are provided for 'default' and 'pointer' modes.</p>"
						},
						{
							"name": "eventData",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An event data object to handle all the event tracking/dispatching</p>",
							"description": ""
						},
						{
							"name": "interactionFrequency",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Maximum requency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.</p>",
							"description": ""
						},
						{
							"name": "mouse",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The mouse data</p>",
							"description": ""
						},
						{
							"name": "moveWhenInside",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This property determines if mousemove and touchmove events are fired only when the cursor\nis over the object.\nSetting to true will make things work more in line with how the DOM version works.\nSetting to false can make things easier for things like dragging\nIt is currently set to false as this is how PixiJS used to work. This will be set to true in\nfuture versions of pixi.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this interaction manager works for.</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The current resolution / device pixel ratio.</p>",
							"description": ""
						},
						{
							"name": "supportsPointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does the device support pointer events\nhttps://www.w3.org/Submission/pointer-events/</p>"
						},
						{
							"name": "supportsTouchEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does the device support touch events\nhttps://www.w3.org/TR/touch-events/</p>"
						},
						{
							"name": "useSystemTicker",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.</p>",
							"description": ""
						},
						{
							"name": "eventsAdded",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Have events been attached to the dom element?</p>",
							"description": ""
						},
						{
							"name": "interactionDOMElement",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The DOM element to bind to.</p>",
							"description": ""
						},
						{
							"name": "lastObjectRendered",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Last rendered object or temp object</p>"
						},
						{
							"name": "mouseOverRenderer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Is the mouse hovering over the renderer?</p>",
							"description": ""
						},
						{
							"name": "tickerAdded",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Has the system ticker been added?</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObject",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Used as a last rendered object in case renderer doesnt have _lastObjectRendered</p>"
						},
						{
							"name": "activeInteractionData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Actively tracked InteractionData</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal cached let.</p>",
							"description": ""
						},
						{
							"name": "delayedEvents",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Delayed pointer events. Used to guarantee correct ordering of over/out events.</p>",
							"description": ""
						},
						{
							"name": "interactionDataPool",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Pool of unused InteractionData</p>",
							"description": ""
						},
						{
							"name": "onPointerCancel",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onPointerDown",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onPointerMove",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onPointerOut",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onPointerOver",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "onPointerUp",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "search",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>TreeSearch component that is used to hitTest stage tree</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the interaction manager</p>",
							"description": ""
						},
						{
							"name": "hitTest",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Hit tests a point against the display tree, returning the first interactive object that is hit.</p>",
							"description": ""
						},
						{
							"name": "mapPositionToPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\nresulting value is stored in the point. This takes into account the fact that the DOM\nelement could be scaled and positioned anywhere on the screen.</p>"
						},
						{
							"name": "setCursorMode",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the current cursor mode, handling any callbacks or CSS style changes.</p>",
							"description": ""
						},
						{
							"name": "setTargetElement",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the DOM element which will receive mouse/touch events. This is useful for when you have\nother DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\nanother DOM element to receive those events.</p>"
						},
						{
							"name": "tickerUpdate",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the state of interactive objects if at least {@link interactionFrequency}\nmilliseconds have passed since the last invocation.</p>\n<p>Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.</p>"
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the state of interactive objects.</p>",
							"description": ""
						},
						{
							"name": "processInteractive",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This function is provides a neat way of crawling through the scene graph and running a\nspecified function on all interactive objects it finds. It will also take care of hit\ntesting the interactive objects and passes the hit across in the function.</p>"
						},
						{
							"name": "addEvents",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Registers all the DOM events</p>",
							"description": ""
						},
						{
							"name": "addTickerListener",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Add the ticker listener</p>",
							"description": ""
						},
						{
							"name": "configureInteractionEventForDOMEvent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData</p>",
							"description": ""
						},
						{
							"name": "delayDispatchEvent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Puts a event on a queue to be dispatched later. This is used to guarantee correct\nordering of over/out events.</p>"
						},
						{
							"name": "dispatchEvent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Dispatches an event on the display object that was interacted with</p>",
							"description": ""
						},
						{
							"name": "getInteractionDataForPointerId",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Get InteractionData for a given pointerId. Store that data as well</p>",
							"description": ""
						},
						{
							"name": "normalizeToPointerData",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Ensures that the original event object contains all data that a regular pointer event would have</p>",
							"description": ""
						},
						{
							"name": "onPointerCancel",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer button is cancelled</p>",
							"description": ""
						},
						{
							"name": "onPointerComplete",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer button is released on the renderer element</p>",
							"description": ""
						},
						{
							"name": "onPointerDown",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer button is pressed down on the renderer element</p>",
							"description": ""
						},
						{
							"name": "onPointerMove",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer moves across the renderer element</p>",
							"description": ""
						},
						{
							"name": "onPointerOut",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer is moved out of the renderer element</p>",
							"description": ""
						},
						{
							"name": "onPointerOver",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer is moved into the renderer element</p>",
							"description": ""
						},
						{
							"name": "onPointerUp",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is called when the pointer button is released on the renderer element</p>",
							"description": ""
						},
						{
							"name": "processPointerCancel",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Processes the result of the pointer cancel check and dispatches the event if need be</p>",
							"description": ""
						},
						{
							"name": "processPointerDown",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Processes the result of the pointer down check and dispatches the event if need be</p>",
							"description": ""
						},
						{
							"name": "processPointerMove",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Processes the result of the pointer move check and dispatches the event if need be</p>",
							"description": ""
						},
						{
							"name": "processPointerOverOut",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Processes the result of the pointer over/out check and dispatches the event if need be</p>",
							"description": ""
						},
						{
							"name": "processPointerUp",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Processes the result of the pointer up check and dispatches the event if need be</p>",
							"description": ""
						},
						{
							"name": "releaseInteractionDataForPointerId",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Return unused InteractionData to the pool, for a given pointerId</p>",
							"description": ""
						},
						{
							"name": "removeEvents",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Removes all the DOM events that were previously registered</p>",
							"description": ""
						},
						{
							"name": "removeTickerListener",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Remove the ticker listener</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display\nobject.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object</p>",
							"description": ""
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device (usually a mouse) is moved off the display object</p>",
							"description": ""
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object</p>",
							"description": ""
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.InteractionManager#event:mousedown}.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when the operating system cancels a pointer event</p>",
							"description": ""
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device button is pressed on the display object.</p>",
							"description": ""
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device is moved while over the display object</p>",
							"description": ""
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device is moved off the display object</p>",
							"description": ""
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device is moved onto the display object</p>",
							"description": ""
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a pointer device button is pressed and released on the display object.</p>",
							"description": ""
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nNot always fired when some buttons are held down while others are released. In those cases,\nuse [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n[mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.</p>"
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.InteractionManager#event:rightdown}.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a touch point is placed and removed from the display object.</p>",
							"description": ""
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when the operating system cancels a touch</p>",
							"description": ""
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a touch point is removed from the display object.</p>",
							"description": ""
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a touch point is moved along the display object.</p>",
							"description": ""
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a touch point is placed on the display object.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "KTXLoader",
					"type": "ClassDoc",
					"brief": "<p>Loader plugin for handling KTX texture container files.</p>",
					"description": "<p>This KTX loader does not currently support the following features:</p>\n<ul>\n<li>cube textures</li>\n<li>3D textures</li>\n<li>vendor-specific key/value data parsing</li>\n<li>endianness conversion for big-endian machines</li>\n<li>embedded *.basis files</li>\n</ul>\n<p>It does supports the following features:</p>\n<ul>\n<li>multiple textures per file</li>\n<li>mipmapping</li>\n</ul>",
					"members": [
						{
							"name": "parse",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Parses the KTX file header, generates base-textures, and puts them into the texture\ncache.</p>"
						},
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Called after a KTX file is loaded.</p>",
							"description": "<p>This will parse the KTX file header and add a {@code BaseTexture} to the texture\ncache.</p>"
						},
						{
							"name": "validate",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Checks whether the arrayBuffer contains a valid *.ktx file.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "LineStyle",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Represents the line style for Graphics.</p>",
					"members": [
						{
							"name": "alignment",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).</p>",
							"description": ""
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The alpha value used when filling the Graphics object.</p>",
							"description": ""
						},
						{
							"name": "cap",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>Line cap style.</p>",
							"description": ""
						},
						{
							"name": "color",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The hex color value used when coloring the Graphics object.</p>",
							"description": ""
						},
						{
							"name": "join",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>Line join style.</p>",
							"description": ""
						},
						{
							"name": "matrix",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The transform aplpied to the texture.</p>",
							"description": ""
						},
						{
							"name": "miterLimit",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>Miter limit.</p>",
							"description": ""
						},
						{
							"name": "native",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>If true the lines will be draw using LINES instead of TRIANGLE_STRIP</p>",
							"description": ""
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The texture to be used for the fill.</p>",
							"description": ""
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>If the current fill is visible.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The width (thickness) of any lines drawn.</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clones the object</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroy and don't use after this</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Reset the line style to default.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Loader",
					"type": "ClassDoc",
					"brief": "<p>The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader</p>",
					"description": "<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> loader = PIXI.Loader.shared; <span class=\"hljs-comment\">// PixiJS exposes a premade instance for you to use.</span>\n<span class=\"hljs-comment\">//or</span>\n<span class=\"hljs-keyword\">const</span> loader = <span class=\"hljs-keyword\">new</span> PIXI.Loader(); <span class=\"hljs-comment\">// you can also create your own if you want</span>\n\n<span class=\"hljs-keyword\">const</span> sprites = {};\n\n<span class=\"hljs-comment\">// Chainable `add` to enqueue a resource</span>\nloader.add(<span class=\"hljs-string\">&#x27;bunny&#x27;</span>, <span class=\"hljs-string\">&#x27;data/bunny.png&#x27;</span>)\n      .add(<span class=\"hljs-string\">&#x27;spaceship&#x27;</span>, <span class=\"hljs-string\">&#x27;assets/spritesheet.json&#x27;</span>);\nloader.add(<span class=\"hljs-string\">&#x27;scoreFont&#x27;</span>, <span class=\"hljs-string\">&#x27;assets/score.fnt&#x27;</span>);\n\n<span class=\"hljs-comment\">// Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.</span>\n<span class=\"hljs-comment\">// This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).</span>\nloader.pre(cachingMiddleware);\n\n<span class=\"hljs-comment\">// Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.</span>\n<span class=\"hljs-comment\">// This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).</span>\nloader.use(parsingMiddleware);\n\n<span class=\"hljs-comment\">// The `load` method loads the queue of resources, and calls the passed in callback called once all</span>\n<span class=\"hljs-comment\">// resources have loaded.</span>\nloader.load(<span class=\"hljs-function\">(<span class=\"hljs-params\">loader, resources</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// resources is an object where the key is the name of the resource loaded and the value is the resource object.</span>\n    <span class=\"hljs-comment\">// They have a couple default properties:</span>\n    <span class=\"hljs-comment\">// - `url`: The URL that the resource was loaded from</span>\n    <span class=\"hljs-comment\">// - `error`: The error that happened when trying to load (if any)</span>\n    <span class=\"hljs-comment\">// - `data`: The raw data that was loaded</span>\n    <span class=\"hljs-comment\">// also may contain other properties based on the middleware that runs.</span>\n    sprites.bunny = <span class=\"hljs-keyword\">new</span> PIXI.TilingSprite(resources.bunny.texture);\n    sprites.spaceship = <span class=\"hljs-keyword\">new</span> PIXI.TilingSprite(resources.spaceship.texture);\n    sprites.scoreFont = <span class=\"hljs-keyword\">new</span> PIXI.TilingSprite(resources.scoreFont.texture);\n});\n\n<span class=\"hljs-comment\">// throughout the process multiple signals can be dispatched.</span>\nloader.onProgress.add(<span class=\"hljs-function\">() =&gt;</span> {}); <span class=\"hljs-comment\">// called once per loaded/errored file</span>\nloader.onError.add(<span class=\"hljs-function\">() =&gt;</span> {}); <span class=\"hljs-comment\">// called once per errored file</span>\nloader.onLoad.add(<span class=\"hljs-function\">() =&gt;</span> {}); <span class=\"hljs-comment\">// called once per loaded file</span>\nloader.onComplete.add(<span class=\"hljs-function\">() =&gt;</span> {}); <span class=\"hljs-comment\">// called once when the queued resources all load.</span>\n</code></pre>",
					"members": [
						{
							"name": "ICallbackID",
							"type": "TypedefDoc",
							"brief": "",
							"description": ""
						},
						{
							"name": "ILoaderSignal",
							"type": "TypedefDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "add",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Register callback</p>"
								},
								{
									"name": "detach",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Detach specific callback by ID</p>"
								},
								{
									"name": "once",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Register oneshot callback</p>"
								}
							]
						},
						{
							"name": "ISignalCallback",
							"type": "TypedefDoc",
							"brief": "",
							"description": ""
						},
						{
							"name": "ISignalDetach",
							"type": "TypedefDoc",
							"brief": "",
							"description": ""
						},
						{
							"name": "loaderMiddleware",
							"type": "TypedefDoc",
							"brief": "",
							"description": "<p>Callback</p>"
						},
						{
							"name": "shared",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>A premade instance of the loader that can be used to load resources.</p>"
						},
						{
							"name": "_plugins",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Collection of all installed <code>use</code> middleware for Loader.</p>",
							"description": ""
						},
						{
							"name": "onComplete",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatched when completely loaded all resources.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatched once per errored resource.</p>"
						},
						{
							"name": "onLoad",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatched once per loaded resource.</p>"
						},
						{
							"name": "onProgress",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatched once per loaded or errored resource.</p>"
						},
						{
							"name": "onStart",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatched when the loader begins to loading process.</p>"
						},
						{
							"name": "_protected",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If this loader cannot be destroyed.</p>"
						},
						{
							"name": "off",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Use the corresponding signal, e.g., event <code>start`` is signal </code>onStart`.</p>"
						},
						{
							"name": "on",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Use the corresponding signal, e.g., event <code>start`` is signal </code>onStart`.</p>"
						},
						{
							"name": "once",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Use the corresponding signal, e.g., event <code>start`` is signal </code>onStart`.</p>"
						},
						{
							"name": "registerPlugin",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Adds a Loader plugin for the global shared loader and all\nnew Loader instances created.</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy the loader, removes references.</p>"
						}
					]
				},
				{
					"name": "LoaderResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Reference to <strong>{@link https://github.com/englercj/resource-loader}</strong>'s Resource class.</p>"
				},
				{
					"name": "MaskData",
					"type": "ClassDoc",
					"brief": "<p>Component for masked elements</p>",
					"description": "<p>Holds mask mode and temporary data about current mask</p>",
					"members": [
						{
							"name": "_scissorRect",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Scissor operation above the mask in stack.\nNull if _scissorCounter is zero, rectangle instance if positive.</p>"
						},
						{
							"name": "autoDetect",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether we know the mask type beforehand</p>"
						},
						{
							"name": "isMaskData",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicator of the type</p>"
						},
						{
							"name": "maskObject",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which element we use to mask</p>"
						},
						{
							"name": "pooled",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether it belongs to MaskSystem pool</p>"
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mask type</p>"
						},
						{
							"name": "_scissorCounter",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Scissor counter above the mask in stack</p>"
						},
						{
							"name": "_stencilCounter",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stencil counter above the mask in stack</p>"
						},
						{
							"name": "_target",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Targeted element. Temporary variable set by MaskSystem</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Create MaskData</p>",
							"description": ""
						},
						{
							"name": "copyCountersOrReset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>copies counters from maskData above, called from pushMask()</p>"
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>resets the mask data after popMask()</p>",
							"description": ""
						}
					]
				},
				{
					"name": "MaskSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage masks.</p>",
					"description": "<p>There are three built-in types of masking:</p>\n<ul>\n<li><strong>Scissor Masking</strong>: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is\nthe most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.</li>\n<li><strong>Stencil Masking</strong>: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil\nbuffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does\ncause the mask to be rendered <strong>twice</strong> for each masking operation; hence, minimize the rendering cost of your masks.</li>\n<li><strong>Sprite Mask Filtering</strong>: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's\ntexture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this\ntype of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.</li>\n</ul>\n<p>The best type of masking is auto-detected when you <code>push</code> one. To use scissor masking, you must pass in a <code>Graphics</code>\nobject with just a rectangle drawn.</p>\n<h2>Mask Stacks</h2>\n<p>In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask\nstack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.\nwhen you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.</p>",
					"members": [
						{
							"name": "alphaMaskIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Current index of alpha mask pool</p>"
						},
						{
							"name": "alphaMaskPool",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pool of used sprite mask filters</p>"
						},
						{
							"name": "enableScissor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Enable scissor masking.</p>",
							"description": ""
						},
						{
							"name": "maskDataPool",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pool of mask data</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "detect",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets type of MaskData based on its maskObject</p>"
						},
						{
							"name": "pop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes the last mask from the mask stack and doesn't return it.</p>",
							"description": "<p>NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.</p>"
						},
						{
							"name": "popSpriteMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes the last filter from the filter stack and doesn't return it.</p>",
							"description": ""
						},
						{
							"name": "push",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enables the mask and appends it to the current mask stack.</p>",
							"description": "<p>NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.</p>"
						},
						{
							"name": "pushSpriteMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies the Mask and adds it to the current filter stack.</p>",
							"description": ""
						},
						{
							"name": "setMaskStack",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the mask stack that is used by this System.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Matrix",
					"type": "ClassDoc",
					"brief": "<p>The PixiJS Matrix as a class makes it a lot faster.</p>",
					"description": "<p>Here is a representation of it:</p>\n<pre><code class=\"hljs language-js\">| a | c | tx|\n| b | d | ty|\n| <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">1</span> |\n</code></pre>",
					"members": [
						{
							"name": "IDENTITY",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>A default (identity) matrix</p>",
							"description": ""
						},
						{
							"name": "TEMP_MATRIX",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>A temp matrix</p>",
							"description": ""
						},
						{
							"name": "a",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "b",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "c",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "d",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "tx",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "ty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "append",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Appends the given Matrix to this Matrix.</p>",
							"description": ""
						},
						{
							"name": "apply",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Get a new position with the current transformation applied.\nCan be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)</p>"
						},
						{
							"name": "applyInverse",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Get a new position with the inverse of the current transformation applied.\nCan be used to go from the world coordinate space to a child's coordinate space. (e.g. input)</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a new Matrix object with the same values as this one.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "copyFrom",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the values of the matrix to be the same as the ones in given matrix</p>",
							"description": ""
						},
						{
							"name": "copyTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the values of the given matrix to be the same as the ones in this matrix</p>",
							"description": ""
						},
						{
							"name": "decompose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.</p>",
							"description": ""
						},
						{
							"name": "fromArray",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:</p>",
							"description": "<p>a = array[0]\nb = array[1]\nc = array[3]\nd = array[4]\ntx = array[2]\nty = array[5]</p>"
						},
						{
							"name": "identity",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets this Matrix to an identity (default) matrix.</p>",
							"description": ""
						},
						{
							"name": "invert",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Inverts this matrix</p>",
							"description": ""
						},
						{
							"name": "prepend",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Prepends the given Matrix to this Matrix.</p>",
							"description": ""
						},
						{
							"name": "rotate",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies a rotation transformation to the matrix.</p>",
							"description": ""
						},
						{
							"name": "scale",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies a scale transformation to the matrix.</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>sets the matrix properties</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the matrix based on all the available properties</p>",
							"description": ""
						},
						{
							"name": "toArray",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates an array from the current Matrix object.</p>",
							"description": ""
						},
						{
							"name": "translate",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Translates the matrix on the x and y.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Mesh",
					"type": "ClassDoc",
					"brief": "<p>Base mesh class.</p>",
					"description": "<p>This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\nThis class assumes a certain level of WebGL knowledge.\nIf you know a bit this should abstract enough away to make you life easier!</p>\n<p>Pretty much ALL WebGL can be broken down into the following:</p>\n<ul>\n<li>Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..</li>\n<li>Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)</li>\n<li>State - This is the state of WebGL required to render the mesh.</li>\n</ul>\n<p>Through a combination of the above elements you can render anything you want, 2D or 3D!</p>",
					"members": [
						{
							"name": "BATCHABLE_SIZE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>The maximum number of vertices to consider batchable. Generally, the complexity\nof the geometry.</p>"
						},
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the Mesh. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "drawMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "material",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for {@link PIXI.Mesh#shader}.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How much of the geometry to draw, by default <code>0</code> renders everything.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "start",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Typically the index of the IndexBuffer where to start drawing.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the Mesh uses.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The multiply tint applied to the Mesh. This is a hex value. A value of\n<code>0xFFFFFF</code> will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh uv's, change its uvBuffer data and increment its _updateID.</p>"
						},
						{
							"name": "verticesBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh vertices, change its uvBuffer data and increment its _updateID.\nIncrementing _updateID is optional because most of Mesh objects do it anyway.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The cache texture is used to generate <code>_tintedCanvas</code>.</p>"
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_canvasPadding",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal variable for <code>canvasPadding</code>.</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "batchUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batched UV's are cached for atlas textures</p>"
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is the caching layer used by the batcher</p>"
						},
						{
							"name": "vertexDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If geometry is changed used to decide to re-transform\nthe vertexData.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates uv field based on from geometry uv's or batchUvs</p>",
							"description": ""
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates vertexData field based on transform and vertices</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Mesh object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\nthere must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard renderer draw.</p>"
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "_renderDefault",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard non-batching way of rendering.</p>"
						},
						{
							"name": "_renderToBatch",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rendering by using the Batch system.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "MeshBatchUvs",
					"type": "ClassDoc",
					"brief": "<p>Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.</p>",
					"description": "",
					"members": [
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>UV Buffer data</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Buffer with normalized UV's</p>"
						},
						{
							"name": "uvMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Material UV matrix</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>updates</p>",
							"description": ""
						}
					]
				},
				{
					"name": "MeshGeometry",
					"type": "ClassDoc",
					"brief": "<p>Standard 2D geometry used in PixiJS.</p>",
					"description": "<p>Geometry can be defined without passing in a style or data if required.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> geometry = <span class=\"hljs-keyword\">new</span> PIXI.Geometry();\n\ngeometry.addAttribute(<span class=\"hljs-string\">&#x27;positions&#x27;</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>], <span class=\"hljs-number\">2</span>);\ngeometry.addAttribute(<span class=\"hljs-string\">&#x27;uvs&#x27;</span>, [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">2</span>);\ngeometry.addIndex([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>]);\n\n</code></pre>",
					"members": [
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "_updateId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dirty flag to limit update calls on Mesh. For example,\nlimiting updates on a single Mesh instance with a shared Geometry\nwithin the render loop.</p>"
						},
						{
							"name": "vertexDirtyId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If the vertex position is updated.</p>"
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						}
					]
				},
				{
					"name": "MeshMaterial",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Slightly opinionated default shader for PixiJS 2D objects.</p>",
					"members": [
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This gets automatically set by the object using this.</p>",
							"description": ""
						},
						{
							"name": "batchable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if shader can be batch with the renderer's batch system.</p>"
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Renderer plugin for batching</p>",
							"description": ""
						},
						{
							"name": "program",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Program that the shader uses</p>",
							"description": ""
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the texture being rendered.</p>"
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Multiply tint for the material.</p>"
						},
						{
							"name": "uniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
						},
						{
							"name": "uvMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>TextureMatrix instance for this Mesh, used to track Texture changes</p>",
							"description": ""
						},
						{
							"name": "_colorDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Only do update if tint or alpha changes.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Gets called automatically by the Mesh. Intended to be overridden for custom\nMeshMaterial objects.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the mesh using the Canvas renderer</p>",
							"description": ""
						}
					]
				},
				{
					"name": "NineSlicePlane",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\nfor buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">let</span> Plane9 = <span class=\"hljs-keyword\">new</span> PIXI.NineSlicePlane(PIXI.Texture.from(<span class=\"hljs-string\">&#x27;BoxWithRoundedCorners.png&#x27;</span>), <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>);\n</code></pre>\n <pre>\n      A                          B\n    +---+----------------------+---+\n  C | 1 |          2           | 3 |\n    +---+----------------------+---+\n    |   |                      |   |\n    | 4 |          5           | 6 |\n    |   |                      |   |\n    +---+----------------------+---+\n  D | 7 |          8           | 9 |\n    +---+----------------------+---+\n\n  When changing this objects width and/or height:\n     areas 1 3 7 and 9 will remain unscaled.\n     areas 2 and 8 will be stretched horizontally\n     areas 4 and 6 will be stretched vertically\n     area 5 will be stretched both horizontally and vertically\n </pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the Mesh. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>"
						},
						{
							"name": "bottomHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the bottom row</p>",
							"description": ""
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "drawMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "leftWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the left column</p>",
							"description": ""
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "material",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for {@link PIXI.Mesh#shader}.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rightWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the right column</p>",
							"description": ""
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How much of the geometry to draw, by default <code>0</code> renders everything.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "start",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Typically the index of the IndexBuffer where to start drawing.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the Mesh uses.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The multiply tint applied to the Mesh. This is a hex value. A value of\n<code>0xFFFFFF</code> will remove any tint effect.</p>"
						},
						{
							"name": "topHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the top row</p>",
							"description": ""
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh uv's, change its uvBuffer data and increment its _updateID.</p>"
						},
						{
							"name": "vertices",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "verticesBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh vertices, change its uvBuffer data and increment its _updateID.\nIncrementing _updateID is optional because most of Mesh objects do it anyway.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The cache texture is used to generate <code>_tintedCanvas</code>.</p>"
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_bottomHeight",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The height of the bottom row (d)</p>",
							"description": ""
						},
						{
							"name": "_canvasPadding",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal variable for <code>canvasPadding</code>.</p>",
							"description": ""
						},
						{
							"name": "_canvasUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Temporary storage for canvas source coords</p>"
						},
						{
							"name": "_leftWidth",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The width of the left column (a)</p>",
							"description": ""
						},
						{
							"name": "_rightWidth",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The width of the right column (b)</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "_topHeight",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The height of the top row (c)</p>",
							"description": ""
						},
						{
							"name": "batchUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batched UV's are cached for atlas textures</p>"
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is the caching layer used by the batcher</p>"
						},
						{
							"name": "vertexDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If geometry is changed used to decide to re-transform\nthe vertexData.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "_refresh",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Refreshes NineSlicePlane coords. All of them.</p>",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates uv field based on from geometry uv's or batchUvs</p>",
							"description": ""
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates vertexData field based on transform and vertices</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Mesh object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "textureUpdated",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Method used for overrides, to do something in case texture frame was changed.\nMeshes based on plane can override it and change more details based on texture.</p>"
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateHorizontalVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the horizontal vertices.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "updateVerticalVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the vertical vertices.</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\nthere must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.</p>"
						},
						{
							"name": "_renderDefault",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard non-batching way of rendering.</p>"
						},
						{
							"name": "_renderToBatch",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rendering by using the Batch system.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getMinScale",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Returns the smaller of a set of vertical and horizontal scale of nine slice corners.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ObjectRenderer",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Base for a common object renderer that can be used as a\nsystem renderer plugin.</p>",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generic destruction method that frees all resources. This\nshould be called by subclasses.</p>"
						},
						{
							"name": "flush",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that should be used to empty the current\nbatch by rendering objects now.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Keeps the object to render. It doesn't have to be\nrendered immediately.</p>"
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that initializes any state required before\nrendering starts. It is different from the <code>prerender</code>\nsignal, which occurs every frame, in that it is called\nwhenever an object requests <em>this</em> renderer specifically.</p>"
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
						}
					]
				},
				{
					"name": "ObservablePoint",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Point object represents a location in a two-dimensional coordinate system, where x represents\nthe horizontal axis and y represents the vertical axis.</p>\n<p>An ObservablePoint is a point that triggers a callback when the point's position is changed.</p>",
					"members": [
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Creates a clone of this point.\nThe callback and scope params can be overidden otherwise they will default\nto the clone object's values.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "copyFrom",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies x and y from the given point</p>",
							"description": ""
						},
						{
							"name": "copyTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies x and y into the given point</p>",
							"description": ""
						},
						{
							"name": "equals",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns true if the given point is equal to this point</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the point to a new x and y position.\nIf y is omitted, both x and y will be set to x.</p>"
						}
					]
				},
				{
					"name": "ParticleContainer",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The ParticleContainer class is a really fast version of the Container built solely for speed,\nso use when you need a lot of sprites or particles.</p>\n<p>The tradeoff of the ParticleContainer is that most advanced functionality will not work.\nParticleContainer implements the basic object transform (position, scale, rotation)\nand some advanced functionality like tint (as of v4.5.6).</p>\n<p>Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.</p>\n<p>It's extremely easy to use:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> container = <span class=\"hljs-keyword\">new</span> ParticleContainer();\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; ++i)\n{\n    <span class=\"hljs-keyword\">let</span> sprite = PIXI.Sprite.from(<span class=\"hljs-string\">&quot;myImage.png&quot;</span>);\n    container.addChild(sprite);\n}\n</code></pre>\n<p>And here you have a hundred sprites that will be rendered at the speed of light.</p>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "autoResize",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true, container allocates more batches in case there are more than <code>maxSize</code> particles.</p>"
						},
						{
							"name": "baseTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture used to render the children.</p>",
							"description": ""
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code>\nto reset the blend mode.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nDefault to true here as performance is usually the priority for particles.</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the container. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.</li>\n</ul>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_batchSize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_buffers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bufferUpdateIDs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>for every batch stores _updateID corresponding to the last change in that batch</p>"
						},
						{
							"name": "_maxSize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_properties",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Set properties to be dynamic (true) / static (false)</p>",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the container.\nThis is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "_updateID",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>when child inserted, removed or changes position this number goes up</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the container</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setProperties",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the private properties array to dynamic / static based on the passed properties object</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>To be overridden by the subclasses.</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>To be overridden by the subclass</p>"
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Set the flag that static data should be updated to true</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the container using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Updates the object transform for rendering</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ParticleRenderer",
					"type": "ClassDoc",
					"brief": "<p>Renderer for Particles that is designer for speed over feature set.</p>",
					"description": "",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The default shader that is used if a sprite doesn't have a more specific one.</p>",
							"description": ""
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The WebGL state in which this renderer will work.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the ParticleRenderer.</p>",
							"description": ""
						},
						{
							"name": "flush",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that should be used to empty the current\nbatch by rendering objects now.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the particle container object.</p>",
							"description": ""
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that initializes any state required before\nrendering starts. It is different from the <code>prerender</code>\nsignal, which occurs every frame, in that it is called\nwhenever an object requests <em>this</em> renderer specifically.</p>"
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
						},
						{
							"name": "uploadPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the position.</p>",
							"description": ""
						},
						{
							"name": "uploadRotation",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the rotation.</p>",
							"description": ""
						},
						{
							"name": "uploadTint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the tint.</p>",
							"description": ""
						},
						{
							"name": "uploadUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the Uvs</p>",
							"description": ""
						},
						{
							"name": "uploadVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the vertices.</p>",
							"description": ""
						},
						{
							"name": "_generateOneMoreBuffer",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Creates one more particle buffer, because container has autoResize feature</p>",
							"description": ""
						},
						{
							"name": "generateBuffers",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Creates one particle buffer for each child in the container we want to render and updates internal properties</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Point",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Point object represents a location in a two-dimensional coordinate system, where x represents\nthe horizontal axis and y represents the vertical axis.</p>",
					"members": [
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "copy",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this point</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "copyFrom",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies x and y from the given point</p>",
							"description": ""
						},
						{
							"name": "copyTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies x and y into the given point</p>",
							"description": ""
						},
						{
							"name": "equals",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns true if the given point is equal to this point</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the point to a new x and y position.\nIf y is omitted, both x and y will be set to x.</p>"
						}
					]
				},
				{
					"name": "Polygon",
					"type": "ClassDoc",
					"brief": "<p>A class to define a shape via user defined co-orinates.</p>",
					"description": "",
					"members": [
						{
							"name": "closeStroke",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>false</code> after moveTo, <code>true</code> after <code>closePath</code>. In all other cases it is <code>true</code>.</p>"
						},
						{
							"name": "points",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An array of the points of this polygon</p>",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this polygon</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates passed to this function are contained within this polygon</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Prepare",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\nasynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.</p>\n<p>Do not instantiate this plugin directly. It is available from the <code>renderer.plugins</code> property.\nSee {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.</p>",
					"members": [
						{
							"name": "limiter",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The limiter to be used to control how quickly items are prepared.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the renderer.</p>"
						},
						{
							"name": "uploadHookHelper",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The only real difference between CanvasPrepare and Prepare is what they pass\nto upload hooks. That different parameter is stored here.</p>"
						},
						{
							"name": "addHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for finding assets.</p>"
						},
						{
							"name": "completes",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Callback to call after completed.</p>"
						},
						{
							"name": "queue",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of items to uploads at once.</p>"
						},
						{
							"name": "ticking",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If prepare is ticking (running).</p>"
						},
						{
							"name": "uploadHooks",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of additional hooks for processing assets.</p>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Manually add an item to the uploading queue.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the plugin, don't use after this.</p>",
							"description": ""
						},
						{
							"name": "registerFindHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for finding items.</p>",
							"description": ""
						},
						{
							"name": "registerUploadHook",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds hooks for uploading items.</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Upload all the textures and graphics to the GPU.</p>",
							"description": ""
						},
						{
							"name": "prepareItems",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Actually prepare items. This is handled outside of the tick because it will take a while\nand we do NOT want to block the current animation frame from rendering.</p>"
						},
						{
							"name": "tick",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Handle tick update</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Program",
					"type": "ClassDoc",
					"brief": "<p>Helper class to create a shader program.</p>",
					"description": "",
					"members": [
						{
							"name": "defaultFragmentSrc",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default fragment shader source</p>",
							"description": ""
						},
						{
							"name": "defaultVertexSrc",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The default vertex shader source</p>",
							"description": ""
						},
						{
							"name": "fragmentSrc",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The fragment shader.</p>",
							"description": ""
						},
						{
							"name": "vertexSrc",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The vertex shader.</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>A short hand function to create a program based of a vertex and fragment shader\nthis method will also check to see if there is a cached program.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "extractData",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Extracts the data for a buy creating a small test program\nor reading the src directly.</p>"
						},
						{
							"name": "getAttributeData",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>returns the attribute data from the program</p>"
						},
						{
							"name": "getUniformData",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>returns the uniform data from the program</p>"
						}
					]
				},
				{
					"name": "ProjectionSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage the projection matrix.</p>",
					"description": "<p>The <code>projectionMatrix</code> is a global uniform provided to all shaders. It is used to transform points in world space to\nnormalized device coordinates.</p>",
					"members": [
						{
							"name": "defaultFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Default destination frame</p>",
							"description": "<p>This is not used internally. It is not advised to use this feature specifically unless you know what\nyou're doing. The <code>update</code> method will default to this frame if you do not pass the destination frame.</p>"
						},
						{
							"name": "destinationFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The destination frame used to calculate the current projection matrix.</p>",
							"description": "<p>The destination frame is the rectangle in the render-target into which contents are rendered. If rendering\nto the screen, the origin is on the top-left. If rendering to a framebuffer, the origin is on the\nbottom-left. This &quot;flipping&quot; phenomenon is because of WebGL convention for (shader) texture coordinates, where\nthe bottom-left corner is (0,0). It allows display-objects to map their (0,0) position in local-space (top-left)\nto (0,0) in texture space (bottom-left). In other words, a sprite's top-left corner actually renders the\ntexture's bottom-left corner. You will also notice this when using a tool like SpectorJS to view your textures\nat runtime.</p>\n<p>The destination frame's dimensions (width,height) should be equal to the source frame. This is because,\notherwise, the contents will be scaled to fill the destination frame. Similarly, the destination frame's (x,y)\ncoordinates are (0,0) unless you know what you're doing.</p>"
						},
						{
							"name": "projectionMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Projection matrix</p>",
							"description": "<p>This matrix can be used to transform points from world space to normalized device coordinates, and is calculated\nfrom the sourceFrame → destinationFrame mapping provided.</p>\n<p>The renderer's <code>globalUniforms</code> keeps a reference to this, and so it is available for all shaders to use as a\nuniform.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "sourceFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The source frame used to calculate the current projection matrix.</p>",
							"description": "<p>The source frame is the rectangle in world space containing the contents to be rendered.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>A transform to be appended to the projection matrix.</p>",
							"description": "<p>This can be used to transform points in world-space one last time before they are outputted by the shader. You can\nuse to rotate the whole scene, for example. Remember to clear it once you've rendered everything.</p>"
						},
						{
							"name": "calculateProjection",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the <code>projectionMatrix</code> to map points inside <code>sourceFrame</code> to inside <code>destinationFrame</code>.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the transform of the active render target to the given matrix</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.</p>",
							"description": "<p>NOTE: It is expected you call <code>renderer.framebuffer.setViewport(destinationFrame)</code> after this. This is because\nthe framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.</p>\n<p>NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected\nthat you dirty the current bindings when calling this manually.</p>"
						}
					]
				},
				{
					"name": "Quad",
					"type": "ClassDoc",
					"brief": "<p>Helper class to create a quad</p>",
					"description": "",
					"members": [
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						}
					]
				},
				{
					"name": "QuadUv",
					"type": "ClassDoc",
					"brief": "<p>Helper class to create a quad with uvs like in v4</p>",
					"description": "",
					"members": [
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The Uvs of the quad</p>",
							"description": ""
						},
						{
							"name": "vertices",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An array of vertices</p>",
							"description": ""
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						},
						{
							"name": "invalidate",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>legacy upload method, just marks buffers dirty</p>"
						},
						{
							"name": "map",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Maps two Rectangle to the quad.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Rectangle",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Rectangle object is an area defined by its position, as indicated by its top-left corner\npoint (x, y) and by its width and its height.</p>",
					"members": [
						{
							"name": "EMPTY",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>A constant empty rectangle.</p>",
							"description": ""
						},
						{
							"name": "bottom",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>returns the bottom edge of the rectangle</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "left",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>returns the left edge of the rectangle</p>",
							"description": ""
						},
						{
							"name": "right",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>returns the right edge of the rectangle</p>",
							"description": ""
						},
						{
							"name": "top",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>returns the top edge of the rectangle</p>",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "ceil",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enlarges rectangle that way its corners lie on grid</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this Rectangle</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates given are contained within this Rectangle</p>",
							"description": ""
						},
						{
							"name": "copyFrom",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies another rectangle to this one.</p>",
							"description": ""
						},
						{
							"name": "copyTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Copies this rectangle to another one.</p>",
							"description": ""
						},
						{
							"name": "enlarge",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enlarges this rectangle to include the passed rectangle.</p>",
							"description": ""
						},
						{
							"name": "fit",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Fits this rectangle around the passed one.</p>",
							"description": ""
						},
						{
							"name": "pad",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pads the rectangle making it grow in all directions.\nIf paddingY is omitted, both paddingX and paddingY will be set to paddingX.</p>"
						}
					]
				},
				{
					"name": "Renderer",
					"type": "ClassDoc",
					"brief": "<p>The Renderer draws the scene and all its content onto a WebGL enabled canvas.</p>",
					"description": "<p>This renderer should be used for browsers that support WebGL.</p>\n<p>This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\nDon't forget to add the view to your DOM or you will not see anything!</p>\n<p>Renderer is composed of systems that manage specific tasks. The following systems are added by default\nwhenever you create a renderer:</p>\n<table>\n<thead>\n<tr>\n<th>System</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>{@link PIXI.BatchSystem}</td>\n<td>This manages object renderers that defer rendering until a flush.</td>\n</tr>\n<tr>\n<td>{@link PIXI.ContextSystem}</td>\n<td>This manages the WebGL context and extensions.</td>\n</tr>\n<tr>\n<td>{@link PIXI.FilterSystem}</td>\n<td>This manages the filtering pipeline for post-processing effects.</td>\n</tr>\n<tr>\n<td>{@link PIXI.FramebufferSystem}</td>\n<td>This manages framebuffers, which are used for offscreen rendering.</td>\n</tr>\n<tr>\n<td>{@link PIXI.GeometrySystem}</td>\n<td>This manages geometries &amp; buffers, which are used to draw object meshes.</td>\n</tr>\n<tr>\n<td>{@link PIXI.MaskSystem}</td>\n<td>This manages masking operations.</td>\n</tr>\n<tr>\n<td>{@link PIXI.ProjectionSystem}</td>\n<td>This manages the <code>projectionMatrix</code>, used by shaders to get NDC coordinates.</td>\n</tr>\n<tr>\n<td>{@link PIXI.RenderTextureSystem}</td>\n<td>This manages render-textures, which are an abstraction over framebuffers.</td>\n</tr>\n<tr>\n<td>{@link PIXI.ScissorSystem}</td>\n<td>This handles scissor masking, and is used internally by {@link MaskSystem}</td>\n</tr>\n<tr>\n<td>{@link PIXI.ShaderSystem}</td>\n<td>This manages shaders, programs that run on the GPU to calculate 'em pixels.</td>\n</tr>\n<tr>\n<td>{@link PIXI.StateSystem}</td>\n<td>This manages the WebGL state variables like blend mode, depth testing, etc.</td>\n</tr>\n<tr>\n<td>{@link PIXI.StencilSystem}</td>\n<td>This handles stencil masking, and is used internally by {@link MaskSystem}</td>\n</tr>\n<tr>\n<td>{@link PIXI.TextureSystem}</td>\n<td>This manages textures and their resources on the GPU.</td>\n</tr>\n<tr>\n<td>{@link PIXI.TextureGCSystem}</td>\n<td>This will automatically remove textures from the GPU if they are not used.</td>\n</tr>\n</tbody>\n</table>\n<p>The breadth of the API surface provided by the renderer is contained within these systems.</p>",
					"members": [
						{
							"name": "plugins",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Collection of installed plugins. These are included by default in PIXI, but can be excluded\nby creating a custom build. Consult the README for more information about creating custom\nbuilds and excluding plugins.</p>",
							"members": [
								{
									"name": "accessibility",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Support tabbing interactive elements.</p>"
								},
								{
									"name": "batch",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Batching of Sprite, Graphics and Mesh objects.</p>"
								},
								{
									"name": "extract",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Extract image data from renderer.</p>"
								},
								{
									"name": "interaction",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Handles mouse, touch and pointer events.</p>"
								},
								{
									"name": "particle",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Renderer for ParticleContainer objects.</p>"
								},
								{
									"name": "prepare",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Pre-render display objects.</p>"
								},
								{
									"name": "tilingSprite",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Renderer for TilingSprite objects.</p>"
								}
							]
						},
						{
							"name": "textureManager",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "autoDensity",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.</p>",
							"description": ""
						},
						{
							"name": "backgroundColor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The background color to fill if not transparent</p>",
							"description": ""
						},
						{
							"name": "batch",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batch system instance</p>"
						},
						{
							"name": "clearBeforeRender",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\nIf the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\nframe to set the canvas background color. If the scene is transparent PixiJS will use clearRect\nto clear the canvas every frame. Disable this by setting this to false. For example, if\nyour game has a canvas filling background image you often don't need this set.</p>"
						},
						{
							"name": "context",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Context system instance</p>"
						},
						{
							"name": "extract",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture</p>",
							"description": ""
						},
						{
							"name": "filter",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Filter system instance</p>"
						},
						{
							"name": "framebuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Framebuffer system instance</p>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Geometry system instance</p>"
						},
						{
							"name": "gl",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>WebGL context, set by the contextSystem (this.context)</p>",
							"description": ""
						},
						{
							"name": "globalUniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Global uniforms</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.height, actual number of pixels in the canvas by vertical.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mask system instance</p>"
						},
						{
							"name": "options",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The supplied constructor options.</p>",
							"description": ""
						},
						{
							"name": "preserveDrawingBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The value of the preserveDrawingBuffer flag affects whether or not the contents of\nthe stencil buffer is retained after rendering.</p>"
						},
						{
							"name": "projection",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Projection system instance</p>"
						},
						{
							"name": "renderingToScreen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag if we are rendering to the screen vs renderTexture</p>"
						},
						{
							"name": "renderTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>RenderTexture system instance</p>"
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The resolution / device pixel ratio of the renderer.</p>",
							"description": ""
						},
						{
							"name": "scissor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Scissor system instance</p>"
						},
						{
							"name": "screen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Measurements of the screen. (0, 0, screenWidth, screenHeight).</p>",
							"description": "<p>Its safe to use as filterArea or hitArea for the whole stage.</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shader system instance</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>State system instance</p>"
						},
						{
							"name": "stencil",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stencil system instance</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Texture system instance</p>"
						},
						{
							"name": "textureGC",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Texture garbage collector system instance</p>"
						},
						{
							"name": "transparent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether the render view is transparent.</p>",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the renderer.</p>",
							"description": ""
						},
						{
							"name": "view",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The canvas element that everything is drawn to.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Same as view.width, actual number of pixels in the canvas by horizontal.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColor",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a number.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorRgba",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as an [R, G, B] array.</p>",
							"description": ""
						},
						{
							"name": "_backgroundColorString",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The background color as a string.</p>",
							"description": ""
						},
						{
							"name": "_lastObjectRendered",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The last root object that the renderer tried to render.</p>",
							"description": ""
						},
						{
							"name": "runners",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal signal instances of <strong>runner</strong>, these\nare assigned to each system created.</p>",
							"members": [
								{
									"name": "contextChange",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Context change runner</p>"
								},
								{
									"name": "destroy",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Destroy runner</p>"
								},
								{
									"name": "postrender",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Post-render runner</p>"
								},
								{
									"name": "prerender",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Pre-render runner</p>"
								},
								{
									"name": "reset",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Reset runner</p>"
								},
								{
									"name": "resize",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Resize runner</p>"
								},
								{
									"name": "update",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Update runner</p>"
								}
							]
						},
						{
							"name": "registerPlugin",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Adds a plugin to the renderer.</p>",
							"description": ""
						},
						{
							"name": "addSystem",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Add a new system to the renderer.</p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clear the frame buffer</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes everything from the renderer (event listeners, spritebatch, etc...)</p>",
							"description": ""
						},
						{
							"name": "generateTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Useful function that returns a texture of the display object that can then be used to create sprites\nThis can be quite useful if your displayObject is complicated and needs to be reused multiple times.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object to its WebGL view</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets the WebGL state so you can render things however you fancy!</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resizes the WebGL view to the specified width and height.</p>",
							"description": ""
						},
						{
							"name": "initPlugins",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Initialize the plugins.</p>",
							"description": ""
						},
						{
							"name": "context",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when the WebGL context is set.</p>",
							"description": ""
						},
						{
							"name": "postrender",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired after rendering finishes.</p>",
							"description": ""
						},
						{
							"name": "prerender",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired before rendering starts.</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired after view has been resized.</p>",
							"description": ""
						},
						{
							"name": "create",
							"type": "FunctionDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Create renderer if WebGL is available. Overrideable\nby the <strong>@pixi/canvas-renderer</strong> package to allow fallback.\nthrows error if WebGL is not available.</p>"
						}
					]
				},
				{
					"name": "RenderTexture",
					"type": "ClassDoc",
					"brief": "<p>A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.</p>",
					"description": "<p><strong>Hint</strong>: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\notherwise black rectangles will be drawn instead.</p>\n<p><strong>Hint-2</strong>: The actual memory allocation will happen on first render.\nYou shouldn't create renderTextures each frame just to delete them after, try to reuse them.</p>\n<p>A RenderTexture takes a snapshot of any Display Object given to its render method. For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> renderer = PIXI.autoDetectRenderer();\n<span class=\"hljs-keyword\">let</span> renderTexture = PIXI.RenderTexture.create({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span> });\n<span class=\"hljs-keyword\">let</span> sprite = PIXI.Sprite.from(<span class=\"hljs-string\">&quot;spinObj_01.png&quot;</span>);\n\nsprite.position.x = <span class=\"hljs-number\">800</span>/<span class=\"hljs-number\">2</span>;\nsprite.position.y = <span class=\"hljs-number\">600</span>/<span class=\"hljs-number\">2</span>;\nsprite.anchor.x = <span class=\"hljs-number\">0.5</span>;\nsprite.anchor.y = <span class=\"hljs-number\">0.5</span>;\n\nrenderer.render(sprite, renderTexture);\n</code></pre>\n<p>Note that you should not create a new renderer, but reuse the same one as the rest of the application.</p>\n<p>The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\nyou can clear the transform</p>\n<pre><code class=\"hljs language-js\">\nsprite.setTransform()\n\n<span class=\"hljs-keyword\">let</span> renderTexture = <span class=\"hljs-keyword\">new</span> PIXI.RenderTexture.create(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>);\n\nrenderer.render(sprite, renderTexture);  <span class=\"hljs-comment\">// Renders to center of RenderTexture</span>\n</code></pre>",
					"members": [
						{
							"name": "_frame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\nirrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)</p>"
						},
						{
							"name": "baseTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The base texture that this texture uses.</p>",
							"description": ""
						},
						{
							"name": "defaultAnchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Anchor point that is used as default if sprite is created with this texture.\nChanging the <code>defaultAnchor</code> at a later point of time will not update Sprite's anchor point.</p>"
						},
						{
							"name": "filterFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stores <code>sourceFrame</code> when this texture is inside current filter stack.\nYou can read it inside filters.</p>"
						},
						{
							"name": "frame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The frame specifies the region of the base texture that this texture uses.\nPlease call <code>updateUvs()</code> after you change coordinates of <code>frame</code> manually.</p>"
						},
						{
							"name": "framebuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shortcut to <code>this.baseTexture.framebuffer</code>, saves baseTexture cast.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Texture in pixels.</p>",
							"description": ""
						},
						{
							"name": "noFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Does this Texture have any frame data assigned to it?</p>",
							"description": "<p>This mode is enabled automatically if no frame was passed inside constructor.</p>\n<p>In this mode texture is subscribed to baseTexture events, and fires <code>update</code> on any change.</p>\n<p>Beware, after loading or resize of baseTexture event can fired two times!\nIf you want more control, subscribe on baseTexture itself.</p>\n<pre><code class=\"hljs language-js\">texture.on(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {});\n</code></pre>\n<p>Any assignment of <code>frame</code> switches off <code>noFrame</code> mode.</p>"
						},
						{
							"name": "orig",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This is the area of original texture, before it was put in atlas</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Returns resolution of baseTexture</p>",
							"description": ""
						},
						{
							"name": "rotate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicates whether the texture is rotated inside the atlas\nset to 2 to compensate for texture packer rotation\nset to 6 to compensate for spine packer rotation\ncan be used to rotate or mirror sprites\nSee {@link PIXI.groupD8} for explanation</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "sourceFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "textureCacheIds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The ids under which this Texture has been added to the texture cache. This is\nautomatically set as long as Texture.addToCache is used, but may not be set if a\nTexture is added directly to the TextureCache array.</p>"
						},
						{
							"name": "trim",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This is the trimmed area of original texture, before it was put in atlas\nPlease call <code>updateUvs()</code> after you change coordinates of <code>trim</code> manually.</p>"
						},
						{
							"name": "uvMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Default TextureMatrix instance for this texture\nBy default that object is not created because its heavy</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Texture in pixels.</p>",
							"description": ""
						},
						{
							"name": "_updateID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Update ID is observed by sprites and TextureMatrix instances.\nCall updateUvs() to increment it.</p>"
						},
						{
							"name": "_uvs",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The WebGL UV data cache. Can be used as quad UV</p>",
							"description": ""
						},
						{
							"name": "filterPoolKey",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The key for pooled texture of FilterSystem</p>"
						},
						{
							"name": "create",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>A short hand way of creating a render texture.</p>",
							"description": ""
						},
						{
							"name": "castToBaseTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Utility function for BaseTexture|Texture cast</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a new texture object that acts the same as this one.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this texture</p>",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resizes the RenderTexture.</p>",
							"description": ""
						},
						{
							"name": "setResolution",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the resolution of baseTexture, but does not change framebuffer size.</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates this texture on the gpu.</p>",
							"description": "<p>Calls the TextureResource update.</p>\n<p>If you adjusted <code>frame</code> manually, please call <code>updateUvs()</code> instead.</p>"
						},
						{
							"name": "updateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the internal WebGL UV cache. Use it after you change <code>frame</code> or <code>trim</code> of the texture.\nCall it after changing the frame</p>"
						},
						{
							"name": "onBaseTextureUpdated",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Called when the base texture is updated</p>",
							"description": ""
						}
					]
				},
				{
					"name": "RenderTexturePool",
					"type": "ClassDoc",
					"brief": "<p>Experimental!</p>",
					"description": "<p>Texture pool, used by FilterSystem and plugins\nStores collection of temporary pow2 or screen-sized renderTextures</p>\n<p>If you use custom RenderTexturePool for your filters, you can use methods\n<code>getFilterTexture</code> and <code>returnFilterTexture</code> same as in</p>",
					"members": [
						{
							"name": "SCREEN_KEY",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Key that is used to store fullscreen renderTextures in a pool</p>",
							"description": ""
						},
						{
							"name": "enableFullScreen",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Allow renderTextures of the same size as screen, not just pow2</p>",
							"description": "<p>Automatically sets to true after <code>setScreenSize</code></p>"
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Clears the pool</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "createTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>creates of texture with params that were specified in pool constructor</p>",
							"description": ""
						},
						{
							"name": "getFilterTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Gets extra texture of the same size as input renderTexture</p>",
							"description": "<p><code>getFilterTexture(input, 0.5)</code> or <code>getFilterTexture(0.5, input)</code></p>"
						},
						{
							"name": "returnFilterTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for returnTexture, to be compliant with FilterSystem interface</p>"
						},
						{
							"name": "returnTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Place a render texture back into the pool.</p>"
						},
						{
							"name": "setScreenSize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If screen size was changed, drops all screen-sized textures,\nsets new screen size, sets <code>enableFullScreen</code> to true</p>\n<p>Size is measured in pixels, <code>renderer.view</code> can be passed here, not <code>renderer.screen</code></p>"
						},
						{
							"name": "getOptimalTexture",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Gets a Power-of-Two render texture or fullScreen texture</p>",
							"description": ""
						}
					]
				},
				{
					"name": "RenderTextureSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage render textures.</p>",
					"description": "<p>Should be added after FramebufferSystem</p>\n<h3>Frames</h3>\n<p>The <code>RenderTextureSystem</code> holds a sourceFrame → destinationFrame projection. The following table explains the different\ncoordinate spaces used:</p>\n<table>\n<thead>\n<tr>\n<th>Frame</th>\n<th>Description</th>\n<th>Coordinate System</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sourceFrame</td>\n<td>The rectangle inside of which display-objects are being rendered</td>\n<td><strong>World Space</strong>: The origin on the top-left</td>\n</tr>\n<tr>\n<td>destinationFrame</td>\n<td>The rectangle in the render-target (canvas or texture) into which contents should be rendered</td>\n<td>If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.</td>\n</tr>\n<tr>\n<td>viewportFrame</td>\n<td>The framebuffer viewport corresponding to the destination-frame</td>\n<td><strong>Window Coordinates</strong>: The origin is always on the bottom-left.</td>\n</tr>\n</tbody>\n</table>",
					"members": [
						{
							"name": "clearColor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The clear background color as rgba</p>"
						},
						{
							"name": "current",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Render texture</p>"
						},
						{
							"name": "defaultMaskStack",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>List of masks for the StencilSystem</p>"
						},
						{
							"name": "destinationFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The destination frame for the render-target's projection mapping.</p>",
							"description": "<p>See {@link PIXI.Projection#destinationFrame} for more details.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "sourceFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The source frame for the render-target's projection mapping.</p>",
							"description": "<p>See {@link PIXI.ProjectionSystem#sourceFrame} for more details.</p>"
						},
						{
							"name": "viewportFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\nfor render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\nthe bottom-left).</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind the current render texture</p>",
							"description": ""
						},
						{
							"name": "clear",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Erases the render texture and fills the drawing area with a colour</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets renderTexture state</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Resource",
					"type": "ClassDoc",
					"brief": "<p>Base resource class for textures that manages validation and uploading, depending on its type.</p>",
					"description": "<p>Uploading of a base texture to the GPU is required.</p>",
					"members": [
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Abstract, used to auto-detect resource type</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Has been updated trigger event</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the texture or returns false if it cant for some reason. Override this.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Clean up anything, this happens when destroying is ready.</p>",
							"description": ""
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This can be overridden to start preloading a resource\nor do any other prepare step.</p>"
						}
					]
				},
				{
					"name": "RopeGeometry",
					"type": "ClassDoc",
					"brief": "<p>RopeGeometry allows you to draw a geometry across several points and then manipulate these points.</p>",
					"description": "<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\n    points.push(<span class=\"hljs-keyword\">new</span> PIXI.Point(i * <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>));\n};\n<span class=\"hljs-keyword\">const</span> rope = <span class=\"hljs-keyword\">new</span> PIXI.RopeGeometry(<span class=\"hljs-number\">100</span>, points);\n</code></pre>",
					"members": [
						{
							"name": "_width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The width (i.e., thickness) of the rope.</p>"
						},
						{
							"name": "instanceCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
						},
						{
							"name": "points",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>An array of points that determine the rope</p>"
						},
						{
							"name": "refCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
						},
						{
							"name": "textureScale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rope texture scale, if zero then the rope texture is stretched.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The width (i.e., thickness) of the rope.</p>"
						},
						{
							"name": "glVertexArrayObjects",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
							"description": ""
						},
						{
							"name": "_updateId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dirty flag to limit update calls on Mesh. For example,\nlimiting updates on a single Mesh instance with a shared Geometry\nwithin the render loop.</p>"
						},
						{
							"name": "vertexDirtyId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If the vertex position is updated.</p>"
						},
						{
							"name": "addAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
						},
						{
							"name": "addIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns a clone of the geometry</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the geometry.</p>",
							"description": ""
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
							"description": ""
						},
						{
							"name": "getAttribute",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested attribute</p>",
							"description": ""
						},
						{
							"name": "getBuffer",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the requested buffer</p>",
							"description": ""
						},
						{
							"name": "getIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>returns the index buffer</p>",
							"description": ""
						},
						{
							"name": "interleave",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
						},
						{
							"name": "updateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>refreshes vertices of Rope mesh</p>",
							"description": ""
						},
						{
							"name": "build",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Refreshes Rope indices and uvs</p>"
						}
					]
				},
				{
					"name": "RoundedRectangle",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\ntop-left corner point (x, y) and by its width and its height and its radius.</p>",
					"members": [
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "radius",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "type",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The type of the object, mainly used to avoid <code>instanceof</code> checks</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a clone of this Rounded Rectangle</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates given are contained within this Rounded Rectangle</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Runner",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>A Runner is a highly performant and simple alternative to signals. Best used in situations\nwhere events are dispatched to many objects at high frequency (say every frame!)</p>\n<p>like a signal..</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { Runner } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/runner&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> myObject = {\n    <span class=\"hljs-attr\">loaded</span>: <span class=\"hljs-keyword\">new</span> Runner(<span class=\"hljs-string\">&#x27;loaded&#x27;</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> listener = {\n    <span class=\"hljs-attr\">loaded</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">// thin</span>\n    }\n}\n\nmyObject.update.add(listener);\n\nmyObject.loaded.emit();\n</code></pre>\n<p>Or for handling calling the same function on many items</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { Runner } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/runner&#x27;</span>;\n\nconst myGame = {\n    <span class=\"hljs-keyword\">update</span>: <span class=\"hljs-built_in\">new</span> Runner(<span class=\"hljs-string\">&#x27;update&#x27;</span>)\n}\n\nconst gameObject = {\n    <span class=\"hljs-keyword\">update</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-type\">time</span>){\n        // <span class=\"hljs-keyword\">update</span> my gamey state\n    }\n}\n\nmyGame.<span class=\"hljs-keyword\">update</span>.<span class=\"hljs-keyword\">add</span>(gameObject1);\n\nmyGame.<span class=\"hljs-keyword\">update</span>.emit(<span class=\"hljs-type\">time</span>);\n</code></pre>",
					"members": [
						{
							"name": "empty",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p><code>true</code> if there are no this Runner contains no listeners</p>",
							"description": ""
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "<p>The name of the runner.</p>",
							"description": ""
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add a listener to the Runner</p>",
							"description": "<p>Runners do not need to have scope or functions passed to them.\nAll that is required is to pass the listening object and ensure that it has contains a function that has the same name\nas the name provided to the Runner when it was created.</p>\n<p>Eg A listener passed to this Runner will require a 'complete' function.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { Runner } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@pixi/runner&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> complete = <span class=\"hljs-keyword\">new</span> Runner(<span class=\"hljs-string\">&#x27;complete&#x27;</span>);\n</code></pre>\n<p>The scope used will be the object itself.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Check to see if the listener is already in the Runner</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Remove all references, don't use after this.</p>",
							"description": ""
						},
						{
							"name": "dispatch",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for <code>emit</code></p>"
						},
						{
							"name": "emit",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Dispatch/Broadcast Runner to all listeners added to the queue.</p>"
						},
						{
							"name": "remove",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Remove a single listener from the dispatch queue.</p>"
						},
						{
							"name": "removeAll",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Remove all listeners from the Runner</p>"
						},
						{
							"name": "run",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for <code>emit</code></p>"
						}
					]
				},
				{
					"name": "ScissorSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage scissor masking.</p>",
					"description": "<p>Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer\nviewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically\nby this system.</p>",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "pop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\nlast mask in the stack.</p>\n<p>This can also be called when you directly modify the scissor box and want to restore PixiJS state.</p>"
						},
						{
							"name": "push",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies the Mask and adds it to the current stencil stack.</p>",
							"description": ""
						},
						{
							"name": "_useCurrent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setup renderer to use the current scissor data.</p>"
						}
					]
				},
				{
					"name": "Shader",
					"type": "ClassDoc",
					"brief": "<p>A helper class for shaders</p>",
					"description": "",
					"members": [
						{
							"name": "program",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Program that the shader uses</p>",
							"description": ""
						},
						{
							"name": "uniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>A short hand function to create a shader based of a vertex and fragment shader</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "ShaderSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage shaders.</p>",
					"description": "",
					"members": [
						{
							"name": "gl",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The current WebGL rendering context</p>",
							"description": ""
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "cache",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cache to holds the generated functions. Stored against UniformObjects unique signature</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the current shader to the one given in parameter</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this System and removes all its textures</p>",
							"description": ""
						},
						{
							"name": "getglProgram",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Returns the underlying GLShade rof the currently bound shader.\nThis can be handy for when you to have a little more control over the setting of your uniforms.</p>"
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets ShaderSystem state, does not affect WebGL state</p>",
							"description": ""
						},
						{
							"name": "setUniforms",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Uploads the uniforms values to the currently bound shader.</p>",
							"description": ""
						},
						{
							"name": "syncUniformGroup",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>syncs uniforms on the group</p>"
						},
						{
							"name": "generateShader",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Generates a glProgram version of the Shader provided.</p>",
							"description": ""
						},
						{
							"name": "getSignature",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Takes a uniform group and data and generates a unique signature for them.</p>",
							"description": ""
						},
						{
							"name": "syncUniforms",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Overrideable by the @pixi/unsafe-eval package to use static\nsyncUnforms instead.</p>"
						},
						{
							"name": "systemCheck",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Overrideable function by <code>@pixi/unsafe-eval</code> to silence\nthrowing an error if platform doesn't support unsafe-evals.</p>"
						}
					]
				},
				{
					"name": "SimpleMesh",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\nFor more robust customization, use {@link PIXI.Mesh}.</p>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "autoUpdate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>upload vertices buffer each frame</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the Mesh. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "canvasPadding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Triangles in canvas mode are automatically antialiased, use this value to force triangles\nto overlap a bit with each other. To set the global default, set {@link PIXI.settings.MESH_CANVAS_PADDING}</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "drawMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "material",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for {@link PIXI.Mesh#shader}.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How much of the geometry to draw, by default <code>0</code> renders everything.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "start",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Typically the index of the IndexBuffer where to start drawing.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the Mesh uses.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The multiply tint applied to the Mesh. This is a hex value. A value of\n<code>0xFFFFFF</code> will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh uv's, change its uvBuffer data and increment its _updateID.</p>"
						},
						{
							"name": "vertices",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of vertices data.</p>"
						},
						{
							"name": "verticesBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh vertices, change its uvBuffer data and increment its _updateID.\nIncrementing _updateID is optional because most of Mesh objects do it anyway.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The cache texture is used to generate <code>_tintedCanvas</code>.</p>"
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_canvasPadding",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal variable for <code>canvasPadding</code>.</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "batchUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batched UV's are cached for atlas textures</p>"
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is the caching layer used by the batcher</p>"
						},
						{
							"name": "vertexDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If geometry is changed used to decide to re-transform\nthe vertexData.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates uv field based on from geometry uv's or batchUvs</p>",
							"description": ""
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates vertexData field based on transform and vertices</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Mesh object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\nthere must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard renderer draw.</p>"
						},
						{
							"name": "_renderDefault",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard non-batching way of rendering.</p>"
						},
						{
							"name": "_renderToBatch",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rendering by using the Batch system.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "SimplePlane",
					"type": "ClassDoc",
					"brief": "<p>The SimplePlane allows you to draw a texture across several points and then manipulate these points</p>",
					"description": "<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\n     points.push(<span class=\"hljs-keyword\">new</span> PIXI.Point(i * <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>));\n };\n <span class=\"hljs-keyword\">let</span> SimplePlane = <span class=\"hljs-keyword\">new</span> PIXI.SimplePlane(PIXI.Texture.from(<span class=\"hljs-string\">&quot;snake.png&quot;</span>), points);\n</code></pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the Mesh. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "drawMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "material",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for {@link PIXI.Mesh#shader}.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How much of the geometry to draw, by default <code>0</code> renders everything.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "start",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Typically the index of the IndexBuffer where to start drawing.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the Mesh uses.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The multiply tint applied to the Mesh. This is a hex value. A value of\n<code>0xFFFFFF</code> will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh uv's, change its uvBuffer data and increment its _updateID.</p>"
						},
						{
							"name": "verticesBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh vertices, change its uvBuffer data and increment its _updateID.\nIncrementing _updateID is optional because most of Mesh objects do it anyway.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The cache texture is used to generate <code>_tintedCanvas</code>.</p>"
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_canvasPadding",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal variable for <code>canvasPadding</code>.</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "batchUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batched UV's are cached for atlas textures</p>"
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is the caching layer used by the batcher</p>"
						},
						{
							"name": "vertexDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If geometry is changed used to decide to re-transform\nthe vertexData.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates uv field based on from geometry uv's or batchUvs</p>",
							"description": ""
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates vertexData field based on transform and vertices</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Mesh object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "textureUpdated",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Method used for overrides, to do something in case texture frame was changed.\nMeshes based on plane can override it and change more details based on texture.</p>"
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\nthere must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.</p>"
						},
						{
							"name": "_renderDefault",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard non-batching way of rendering.</p>"
						},
						{
							"name": "_renderToBatch",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rendering by using the Batch system.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "SimpleRope",
					"type": "ClassDoc",
					"brief": "<p>The rope allows you to draw a texture across several points and then manipulate these points</p>",
					"description": "<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\n     points.push(<span class=\"hljs-keyword\">new</span> PIXI.Point(i * <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>));\n };\n <span class=\"hljs-keyword\">let</span> rope = <span class=\"hljs-keyword\">new</span> PIXI.SimpleRope(PIXI.Texture.from(<span class=\"hljs-string\">&quot;snake.png&quot;</span>), points);\n</code></pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "autoUpdate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>re-calculate vertices by rope points each frame</p>",
							"description": ""
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied to the Mesh. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>"
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "drawMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.</p>",
							"description": ""
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "material",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Alias for {@link PIXI.Mesh#shader}.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Mesh objects.</p>"
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How much of the geometry to draw, by default <code>0</code> renders everything.</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "start",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Typically the index of the IndexBuffer where to start drawing.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the Mesh uses.</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The multiply tint applied to the Mesh. This is a hex value. A value of\n<code>0xFFFFFF</code> will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh uv's, change its uvBuffer data and increment its _updateID.</p>"
						},
						{
							"name": "verticesBuffer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>To change mesh vertices, change its uvBuffer data and increment its _updateID.\nIncrementing _updateID is optional because most of Mesh objects do it anyway.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTexture",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The cache texture is used to generate <code>_tintedCanvas</code>.</p>"
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_canvasPadding",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal variable for <code>canvasPadding</code>.</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "batchUvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Batched UV's are cached for atlas textures</p>"
						},
						{
							"name": "indices",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>thease are used as easy access for batching</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is the caching layer used by the batcher</p>"
						},
						{
							"name": "vertexDirty",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If geometry is changed used to decide to re-transform\nthe vertexData.</p>"
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates uv field based on from geometry uv's or batchUvs</p>",
							"description": ""
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates vertexData field based on transform and vertices</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys the Mesh object.</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
							"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\nthere must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.</p>"
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard renderer draw.</p>"
						},
						{
							"name": "_renderDefault",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Standard non-batching way of rendering.</p>"
						},
						{
							"name": "_renderToBatch",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Rendering by using the Batch system.</p>"
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Sprite",
					"type": "ClassDoc",
					"brief": "<p>The Sprite object is the base for all textured objects that are rendered to the screen</p>",
					"description": "<p>A sprite can be created directly from an image like this:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> sprite = PIXI.Sprite.from(<span class=\"hljs-string\">&#x27;assets/image.png&#x27;</span>);\n</code></pre>\n<p>The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\nas swapping base textures when rendering to the screen is inefficient.</p>\n<pre><code class=\"hljs language-js\">PIXI.Loader.shared.add(<span class=\"hljs-string\">&quot;assets/spritesheet.json&quot;</span>).load(setup);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> sheet = PIXI.Loader.shared.resources[<span class=\"hljs-string\">&quot;assets/spritesheet.json&quot;</span>].spritesheet;\n  <span class=\"hljs-keyword\">let</span> sprite = <span class=\"hljs-keyword\">new</span> PIXI.Sprite(sheet.textures[<span class=\"hljs-string\">&quot;image.png&quot;</span>]);\n  ...\n}\n</code></pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "anchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
							"description": ""
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the sprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' &amp; '_renderCanvas' methods.</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the sprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The height of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The width of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_anchor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "_texture",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "_tintRGB",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
							"description": ""
						},
						{
							"name": "vertexTrimmedData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Helper function that creates a new sprite based on the source you provide.\nThe source can be - frame id, image url, video url, canvas element, video element, base texture</p>"
						},
						{
							"name": "fromCanvas",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromFrame",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromImage",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromSVG",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromVideo",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateTrimmedVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this sprite</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this sprite and optionally its texture and children</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Gets the local bounds of the sprite object.</p>",
							"description": ""
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Updates the bounds of the sprite.</p>",
							"description": ""
						},
						{
							"name": "_onTextureUpdate",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>When the texture is updated, this event will fire to update the scale and frame</p>",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_onAnchorUpdate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Called when the anchor position updates.</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "SpriteMaskFilter",
					"type": "ClassDoc",
					"brief": "<p>This handles a Sprite acting as a mask, as opposed to a Graphic.</p>",
					"description": "<p>WebGL only.</p>",
					"members": [
						{
							"name": "autoFit",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, PixiJS will fit the filter area into boundaries for better performance.\nSwitch it off if it does not work for specific shader.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the blendmode of the filter</p>",
							"description": ""
						},
						{
							"name": "enabled",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>If enabled is true the filter is applied, if false it will not.</p>",
							"description": ""
						},
						{
							"name": "legacy",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Legacy filters use position and uvs from attributes</p>"
						},
						{
							"name": "maskMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mask matrix</p>"
						},
						{
							"name": "maskSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sprite mask</p>"
						},
						{
							"name": "padding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The padding of the filter. Some filters require extra space to breath such as a blur.\nIncreasing this will add extra width and height to the bounds of the object that the\nfilter is applied to.</p>"
						},
						{
							"name": "program",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Program that the shader uses</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resolution of the filter. Setting this to be lower will lower the quality but\nincrease the performance of the filter.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The WebGL state the filter requires to render</p>"
						},
						{
							"name": "uniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
						},
						{
							"name": "apply",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies the filter</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "Spritesheet",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Utility class for maintaining reference to a collection\nof Textures on a single Spritesheet.</p>\n<p>To access a sprite sheet from your code pass its JSON data file to Pixi's loader:</p>\n<pre><code class=\"hljs language-js\">PIXI.Loader.shared.add(<span class=\"hljs-string\">&quot;images/spritesheet.json&quot;</span>).load(setup);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> sheet = PIXI.Loader.shared.resources[<span class=\"hljs-string\">&quot;images/spritesheet.json&quot;</span>].spritesheet;\n  ...\n}\n</code></pre>\n<p>With the <code>sheet.textures</code> you can create Sprite objects,<code>sheet.animations</code> can be used to create an AnimatedSprite.</p>\n<p>Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n{@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\nDefault anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\nsupported by TexturePacker.</p>",
					"members": [
						{
							"name": "BATCH_SIZE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>The maximum number of Textures to build per process.</p>",
							"description": ""
						},
						{
							"name": "animations",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A map containing the textures for each animation.\nCan be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">new</span> PIXI.AnimatedSprite(sheet.animations[<span class=\"hljs-string\">&quot;anim_name&quot;</span>])\n</code></pre>"
						},
						{
							"name": "baseTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to ths source texture.</p>"
						},
						{
							"name": "data",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to the original JSON data.</p>"
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resolution of the spritesheet.</p>"
						},
						{
							"name": "textures",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A map containing all textures of the sprite sheet.\nCan be used to create a {@link PIXI.Sprite|Sprite}:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">new</span> PIXI.Sprite(sheet.textures[<span class=\"hljs-string\">&quot;image.png&quot;</span>]);\n</code></pre>"
						},
						{
							"name": "_batchIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Current batch index being processed.</p>"
						},
						{
							"name": "_callback",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Callback when parse is completed.</p>"
						},
						{
							"name": "_frameKeys",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of frame names.</p>"
						},
						{
							"name": "_frames",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Map of spritesheet frames.</p>"
						},
						{
							"name": "_texture",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Reference to original source image from the Loader. This reference is retained so we\ncan destroy the Texture later on. It is never used internally.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroy Spritesheet and don't use after this.</p>",
							"description": ""
						},
						{
							"name": "parse",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Parser spritesheet from loaded data. This is done asynchronously\nto prevent creating too many Texture within a single process.</p>"
						},
						{
							"name": "_nextBatch",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Begin the next batch of textures.</p>",
							"description": ""
						},
						{
							"name": "_parseComplete",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The parse has completed.</p>",
							"description": ""
						},
						{
							"name": "_processAnimations",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Parse animations config</p>",
							"description": ""
						},
						{
							"name": "_processFrames",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Process a batch of frames</p>",
							"description": ""
						},
						{
							"name": "_updateResolution",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generate the resolution from the filename or fallback\nto the meta.scale field of the JSON data.</p>"
						}
					]
				},
				{
					"name": "SpritesheetLoader",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>{@link PIXI.Loader} middleware for loading texture atlases that have been created with\nTexturePacker or similar JSON-based spritesheet.</p>\n<p>This middleware automatically generates Texture resources.</p>\n<p>If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\nuse the {@link PIXI.Spritesheet} class to directly parse the JSON.</p>\n<p>The Loader's image Resource name is automatically appended with <code>&quot;_image&quot;</code>.\nIf a Resource with this name is already loaded, the Loader will skip parsing the\nSpritesheet. The code below will generate an internal Loader Resource called <code>&quot;myatlas_image&quot;</code>.</p>",
					"members": [
						{
							"name": "getResourcePath",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Get the spritesheets root path</p>"
						},
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Called after a resource is loaded.</p>"
						}
					]
				},
				{
					"name": "State",
					"type": "ClassDoc",
					"brief": "<p>This is a WebGL state, and is is passed The WebGL StateManager.</p>",
					"description": "<p>Each mesh rendered may require WebGL to be in a different state.\nFor example you may want different blend mode or to enable polygon offsets</p>",
					"members": [
						{
							"name": "blend",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Activates blending of the computed fragment color values</p>",
							"description": ""
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The blend mode to be applied when this state is set. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.\nSetting this mode to anything other than NO_BLEND will automatically switch blending on.</p>"
						},
						{
							"name": "clockwiseFrontFace",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specifies whether or not front or back-facing polygons can be culled.</p>"
						},
						{
							"name": "culling",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Activates culling of polygons.</p>",
							"description": ""
						},
						{
							"name": "depthMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Enables or disables writing to the depth buffer.</p>",
							"description": ""
						},
						{
							"name": "depthTest",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Activates depth comparisons and updates to the depth buffer.</p>",
							"description": ""
						},
						{
							"name": "offsets",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Activates adding an offset to depth values of polygon's fragments</p>",
							"description": ""
						},
						{
							"name": "polygonOffset",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "StateSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage WebGL state machines.</p>",
					"description": "",
					"members": [
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Blend mode</p>"
						},
						{
							"name": "checks",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of check calls</p>"
						},
						{
							"name": "defaultState",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Default WebGL State</p>"
						},
						{
							"name": "gl",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>GL context</p>"
						},
						{
							"name": "map",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Collection of calls</p>"
						},
						{
							"name": "polygonOffset",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Polygon offset</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "stateId",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>State ID</p>"
						},
						{
							"name": "_blendEq",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether current blend equation is different</p>"
						},
						{
							"name": "setState",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "checkBlendMode",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>A private little wrapper function that we call to check the blend mode.</p>",
							"description": ""
						},
						{
							"name": "checkPolygonOffset",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>A private little wrapper function that we call to check the polygon offset.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "forceState",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the state, when previous state is unknown</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets all the logic and disables the vaos</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the current state</p>",
							"description": ""
						},
						{
							"name": "setBlend",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enables or disabled blending.</p>",
							"description": ""
						},
						{
							"name": "setBlendMode",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the blend mode.</p>",
							"description": ""
						},
						{
							"name": "setCullFace",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets whether to enable or disable cull face.</p>",
							"description": ""
						},
						{
							"name": "setDepthMask",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets whether to enable or disable depth mask.</p>",
							"description": ""
						},
						{
							"name": "setDepthTest",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets whether to enable or disable depth test.</p>",
							"description": ""
						},
						{
							"name": "setFrontFace",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the gl front face.</p>",
							"description": ""
						},
						{
							"name": "setOffset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Enables or disable polygon offset fill</p>",
							"description": ""
						},
						{
							"name": "setPolygonOffset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets the polygon offset.</p>",
							"description": ""
						},
						{
							"name": "updateCheck",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>checks to see which updates should be checked based on which settings have been activated.\nFor example, if blend is enabled then we should check the blend modes each time the state is changed\nor if polygon fill is activated then we need to check if the polygon offset changes.\nThe idea is that we only check what we have too.</p>"
						}
					]
				},
				{
					"name": "StencilSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage stencils (used for masks).</p>",
					"description": "",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "pop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pops stencil mask. MaskData is already removed from stack</p>",
							"description": ""
						},
						{
							"name": "push",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Applies the Mask and adds it to the current stencil stack.</p>",
							"description": ""
						},
						{
							"name": "_getBitwiseMask",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Fill 1s equal to the number of acitve stencil masks.</p>"
						},
						{
							"name": "_useCurrent",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setup renderer to use the current stencil data.</p>"
						}
					]
				},
				{
					"name": "SVGResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for SVG elements and graphics.</p>",
					"members": [
						{
							"name": "SVG_SIZE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>RegExp for SVG size.</p>",
							"description": ""
						},
						{
							"name": "_overrideHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A height override for rasterization on load</p>"
						},
						{
							"name": "_overrideWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A width override for rasterization on load</p>"
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source scale to apply when rasterizing on load</p>"
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "svg",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Base64 encoded SVG element or URL for SVG file</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "_crossorigin",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cross origin value to use</p>"
						},
						{
							"name": "_load",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Promise when loading</p>"
						},
						{
							"name": "_resolve",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when completely loaded</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "getSize",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Get size from an svg string using regexp.</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys this texture</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks if source width/height was changed, resize can cause extra baseTexture update.\nTriggers one update in any case.</p>"
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "_loadSvg",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Loads an SVG image from <code>imageUrl</code> or <code>data URL</code>.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "System",
					"type": "ClassDoc",
					"brief": "<p>System is a base class used for extending systems used by the {@link PIXI.Renderer}</p>",
					"description": "",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Text",
					"type": "ClassDoc",
					"brief": "<p>A Text Object will create a line or multiple lines of text.</p>",
					"description": "<p>The text is created using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">Canvas API</a>.</p>\n<p>The primary advantage of this class over BitmapText is that you have great control over the style of the text,\nwhich you can change at runtime.</p>\n<p>The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\nWhen text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.</p>\n<p>To split a line you can use '\\n' in your text string, or, on the <code>style</code> object,\nchange its <code>wordWrap</code> property to true and and give the <code>wordWrapWidth</code> property a value.</p>\n<p>A Text can be created directly from a string and a style object,\nwhich can be generated <a href=\"https://pixijs.io/pixi-text-style\">here</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> text = <span class=\"hljs-keyword\">new</span> PIXI.Text(<span class=\"hljs-string\">&#x27;This is a PixiJS text&#x27;</span>,{<span class=\"hljs-attr\">fontFamily</span> : <span class=\"hljs-string\">&#x27;Arial&#x27;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>, <span class=\"hljs-attr\">fill</span> : <span class=\"hljs-number\">0xff1010</span>, <span class=\"hljs-attr\">align</span> : <span class=\"hljs-string\">&#x27;center&#x27;</span>});\n</code></pre>",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "_resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resolution / device pixel ratio of the canvas.\nThis is set to automatically match the renderer resolution by default, but can be overridden by setting manually.</p>"
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "anchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
							"description": ""
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "canvas",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The canvas element that everything is drawn to</p>",
							"description": ""
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "context",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The canvas 2d context that everything is drawn with</p>"
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Text, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' &amp; '_renderCanvas' methods.</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The resolution / device pixel ratio of the canvas.\nThis is set to automatically match the renderer resolution by default, but can be overridden by setting manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "style",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set the style of the text. Set up an event listener to listen for changes on the style\nobject and mark the text as dirty.</p>"
						},
						{
							"name": "text",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set the copy for the text object. To split a line you can use '\\n'.</p>",
							"description": ""
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Text, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The height of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The width of the sprite (this is initially set by the texture)</p>",
							"description": ""
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_anchor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
						},
						{
							"name": "_font",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current font.</p>",
							"description": ""
						},
						{
							"name": "_ownCanvas",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Keep track if this Text object created it's own canvas\nelement (<code>true</code>) or uses the constructor argument (<code>false</code>).\nUsed to workaround a GC issues with Safari &lt; 13 when\ndestroying Text. See <code>destroy</code> for more info.</p>"
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "_style",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current style.</p>",
							"description": ""
						},
						{
							"name": "_styleListener",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private listener to track style changes.</p>",
							"description": ""
						},
						{
							"name": "_text",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Private tracker for the current text.</p>",
							"description": ""
						},
						{
							"name": "_texture",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "_tintRGB",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
							"description": ""
						},
						{
							"name": "vertexTrimmedData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateTrimmedVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Tests if a point is inside this sprite</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys this text object.\nNote* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\nthe majority of the time the texture will not be shared with any other Sprites.</p>"
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Gets the local bounds of the text object.</p>",
							"description": ""
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateText",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders text to its canvas, and updates its texture.\nBy default this is used internally to ensure the texture is correct before rendering,\nbut it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\nand then shared across multiple Sprites.</p>"
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.</p>"
						},
						{
							"name": "_onTextureUpdate",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>When the texture is updated, this event will fire to update the scale and frame</p>",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_generateFillStyle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Generates the fill style. Can automatically generate a gradient based on the fill style being an array</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_onAnchorUpdate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Called when the anchor position updates.</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						},
						{
							"name": "drawLetterSpacing",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Render the text with letter-spacing.</p>"
						},
						{
							"name": "updateTexture",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Updates texture size based on canvas size</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TextMetrics",
					"type": "ClassDoc",
					"brief": "<p>The TextMetrics object represents the measurement of a block of text with a specified style.</p>",
					"description": "<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> style = <span class=\"hljs-keyword\">new</span> PIXI.TextStyle({<span class=\"hljs-attr\">fontFamily</span> : <span class=\"hljs-string\">&#x27;Arial&#x27;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>, <span class=\"hljs-attr\">fill</span> : <span class=\"hljs-number\">0xff1010</span>, <span class=\"hljs-attr\">align</span> : <span class=\"hljs-string\">&#x27;center&#x27;</span>})\n<span class=\"hljs-keyword\">let</span> textMetrics = PIXI.TextMetrics.measureText(<span class=\"hljs-string\">&#x27;Your text&#x27;</span>, style)\n</code></pre>",
					"members": [
						{
							"name": "FontMetrics",
							"type": "TypedefDoc",
							"access": "private",
							"brief": "<p>Internal return object for {@link PIXI.TextMetrics.measureFont <code>TextMetrics.measureFont</code>}.</p>",
							"description": "",
							"members": [
								{
									"name": "ascent",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>The ascent distance</p>"
								},
								{
									"name": "descent",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>The descent distance</p>"
								},
								{
									"name": "fontSize",
									"type": "PropertyDoc",
									"access": "public",
									"scope": "static",
									"brief": "",
									"description": "<p>Font size from ascent to descent</p>"
								}
							]
						},
						{
							"name": "BASELINE_MULTIPLIER",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Baseline multiplier for calculate font metrics.</p>",
							"description": ""
						},
						{
							"name": "BASELINE_SYMBOL",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "<p>Baseline symbol for calculate font metrics.</p>",
							"description": ""
						},
						{
							"name": "METRICS_STRING",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>String used for calculate font metrics.\nThese characters are all tall to help calculate the height required for text.</p>"
						},
						{
							"name": "_breakingSpaces",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Cache of breaking spaces.</p>",
							"description": ""
						},
						{
							"name": "_canvas",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Cached canvas element for measuring text</p>",
							"description": ""
						},
						{
							"name": "_context",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Cache for context to use.</p>",
							"description": ""
						},
						{
							"name": "_fonts",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Cache of {@see PIXI.TextMetrics.FontMetrics} objects.</p>",
							"description": ""
						},
						{
							"name": "_newlines",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Cache of new line chars.</p>",
							"description": ""
						},
						{
							"name": "fontProperties",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The font properties object from TextMetrics.measureFont</p>",
							"description": ""
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The measured height of the text</p>",
							"description": ""
						},
						{
							"name": "lineHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The measured line height for this style</p>",
							"description": ""
						},
						{
							"name": "lines",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An array of lines of the text broken by new lines and wrapping is specified in style</p>",
							"description": ""
						},
						{
							"name": "lineWidths",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>An array of the line widths for each line matched to <code>lines</code></p>",
							"description": ""
						},
						{
							"name": "maxLineWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The maximum line width for all measured lines</p>",
							"description": ""
						},
						{
							"name": "style",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The style that was measured</p>",
							"description": ""
						},
						{
							"name": "text",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The text that was measured</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The measured width of the text</p>",
							"description": ""
						},
						{
							"name": "canBreakChars",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.</p>",
							"description": "<p>It allows one to determine whether a pair of characters\nshould be broken by newlines\nFor example certain characters in CJK langs or numbers.\nIt must return a boolean.</p>"
						},
						{
							"name": "canBreakWords",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.</p>",
							"description": "<p>It allows one to customise which words should break\nExamples are if the token is CJK or numbers.\nIt must return a boolean.</p>"
						},
						{
							"name": "clearMetrics",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Clear font metrics in metrics cache.</p>",
							"description": ""
						},
						{
							"name": "measureFont",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Calculates the ascent, descent and fontSize of a given font-style</p>",
							"description": ""
						},
						{
							"name": "measureText",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Measures the supplied string of text and returns a Rectangle.</p>",
							"description": ""
						},
						{
							"name": "wordWrapSplit",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.</p>",
							"description": "<p>It is called when a token (usually a word) has to be split into separate pieces\nin order to determine the point to break a word.\nIt must return an array of characters.</p>"
						},
						{
							"name": "addLine",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Convienience function for logging each line added during the wordWrap\nmethod</p>"
						},
						{
							"name": "collapseNewlines",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Determines whether we should collapse newLine chars</p>",
							"description": ""
						},
						{
							"name": "collapseSpaces",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Determines whether we should collapse breaking spaces</p>",
							"description": ""
						},
						{
							"name": "getFromCache",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Gets &amp; sets the widths of calculated characters in a cache object</p>",
							"description": ""
						},
						{
							"name": "isBreakingSpace",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Determines if char is a breaking whitespace.</p>",
							"description": ""
						},
						{
							"name": "isNewline",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Determines if char is a newline.</p>",
							"description": ""
						},
						{
							"name": "tokenize",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Splits a string into words, breaking-spaces and newLine characters</p>",
							"description": ""
						},
						{
							"name": "trimRight",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>trims breaking whitespaces from string</p>",
							"description": ""
						},
						{
							"name": "wordWrap",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "",
							"description": "<p>Applies newlines to a string to have it optimally fit into the horizontal\nbounds set by the Text object's wordWrapWidth property.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "TextStyle",
					"type": "ClassDoc",
					"brief": "<p>A TextStyle Object contains information to decorate a Text objects.</p>",
					"description": "<p>An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.</p>\n<p>A tool can be used to generate a text style <a href=\"https://pixijs.io/pixi-text-style\">here</a>.</p>",
					"members": [
						{
							"name": "align",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text</p>",
							"description": ""
						},
						{
							"name": "breakWords",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if lines can be wrapped within words, it needs wordWrap to be set to true</p>",
							"description": ""
						},
						{
							"name": "dropShadow",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set a drop shadow for the text</p>",
							"description": ""
						},
						{
							"name": "dropShadowAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set alpha for the drop shadow</p>",
							"description": ""
						},
						{
							"name": "dropShadowAngle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set a angle of the drop shadow</p>",
							"description": ""
						},
						{
							"name": "dropShadowBlur",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set a shadow blur radius</p>",
							"description": ""
						},
						{
							"name": "dropShadowColor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>A fill style to be used on the dropshadow e.g 'red', '#00FF00'</p>",
							"description": ""
						},
						{
							"name": "dropShadowDistance",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Set a distance of the drop shadow</p>",
							"description": ""
						},
						{
							"name": "fill",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\nCan be an array to create a gradient eg ['#000000','#FFFFFF']\n{@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}</p>"
						},
						{
							"name": "fillGradientStops",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If fill is an array of colours to create a gradient, this array can set the stop points\n(numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.</p>"
						},
						{
							"name": "fillGradientType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\nSee {@link PIXI.TEXT_GRADIENT}</p>"
						},
						{
							"name": "fontFamily",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The font family</p>",
							"description": ""
						},
						{
							"name": "fontSize",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The font size\n(as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')</p>"
						},
						{
							"name": "fontStyle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The font style\n('normal', 'italic' or 'oblique')</p>"
						},
						{
							"name": "fontVariant",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The font variant\n('normal' or 'small-caps')</p>"
						},
						{
							"name": "fontWeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The font weight\n('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')</p>"
						},
						{
							"name": "leading",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The space between lines</p>",
							"description": ""
						},
						{
							"name": "letterSpacing",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The amount of spacing between letters, default is 0</p>",
							"description": ""
						},
						{
							"name": "lineHeight",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The line height, a number that represents the vertical space that a letter uses</p>",
							"description": ""
						},
						{
							"name": "lineJoin",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The lineJoin property sets the type of corner created, it can resolve spiked text issues.\nDefault is 'miter' (creates a sharp corner).</p>"
						},
						{
							"name": "miterLimit",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The miter limit to use when using the 'miter' lineJoin mode\nThis can reduce or increase the spikiness of rendered text.</p>"
						},
						{
							"name": "padding",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Occasionally some fonts are cropped. Adding some padding will prevent this from happening\nby adding padding to all sides of the text.</p>"
						},
						{
							"name": "stroke",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A canvas fillstyle that will be used on the text stroke\ne.g 'blue', '#FCFF00'</p>"
						},
						{
							"name": "strokeThickness",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>A number that represents the thickness of the stroke.\nDefault is 0 (no stroke)</p>"
						},
						{
							"name": "textBaseline",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The baseline of the text that is rendered.</p>",
							"description": ""
						},
						{
							"name": "trim",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Trim transparent borders</p>",
							"description": ""
						},
						{
							"name": "whiteSpace",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How newlines and spaces should be handled.\nDefault is 'pre' (preserve, preserve).</p>\n<table>\n<thead>\n<tr>\n<th>value</th>\n<th>New lines</th>\n<th>Spaces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>'normal'</td>\n<td>Collapse</td>\n<td>Collapse</td>\n</tr>\n<tr>\n<td>'pre'</td>\n<td>Preserve</td>\n<td>Preserve</td>\n</tr>\n<tr>\n<td>'pre-line'</td>\n<td>Preserve</td>\n<td>Collapse</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "wordWrap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if word wrap should be used</p>",
							"description": ""
						},
						{
							"name": "wordWrapWidth",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width at which text will wrap, it needs wordWrap to be set to true</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Creates a new TextStyle object with the same values as this one.\nNote that the only the properties of the object are cloned.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets all properties to the defaults specified in TextStyle.prototype._default</p>",
							"description": ""
						},
						{
							"name": "toFontString",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generates a font style string to use for <code>TextMetrics.measureFont()</code>.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Texture",
					"type": "ClassDoc",
					"brief": "<p>A texture stores the information that represents an image or part of an image.</p>",
					"description": "<p>It cannot be added to the display list directly; instead use it as the texture for a Sprite.\nIf no frame is provided for a texture, then the whole image is used.</p>\n<p>You can directly create a texture from an image and then reuse it multiple times like this :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> texture = PIXI.Texture.from(<span class=\"hljs-string\">&#x27;assets/image.png&#x27;</span>);\n<span class=\"hljs-keyword\">let</span> sprite1 = <span class=\"hljs-keyword\">new</span> PIXI.Sprite(texture);\n<span class=\"hljs-keyword\">let</span> sprite2 = <span class=\"hljs-keyword\">new</span> PIXI.Sprite(texture);\n</code></pre>\n<p>If you didnt pass the texture frame to constructor, it enables <code>noFrame</code> mode:\nit subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.</p>\n<p>Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\nYou can check for this by checking the sprite's _textureID property.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> texture = PIXI.Texture.from(<span class=\"hljs-string\">&#x27;assets/image.svg&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> sprite1 = <span class=\"hljs-keyword\">new</span> PIXI.Sprite(texture);\n<span class=\"hljs-comment\">//sprite1._textureID should not be undefined if the texture has finished processing the SVG file</span>\n</code></pre>\n<p>You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.</p>",
					"members": [
						{
							"name": "EMPTY",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>An empty texture, used often to not have to create multiple empty textures.\nCan not be destroyed.</p>"
						},
						{
							"name": "WHITE",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>A white texture of 16x16 size, used for graphics and other things\nCan not be destroyed.</p>"
						},
						{
							"name": "_frame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\nirrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)</p>"
						},
						{
							"name": "baseTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The base texture that this texture uses.</p>",
							"description": ""
						},
						{
							"name": "defaultAnchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Anchor point that is used as default if sprite is created with this texture.\nChanging the <code>defaultAnchor</code> at a later point of time will not update Sprite's anchor point.</p>"
						},
						{
							"name": "frame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The frame specifies the region of the base texture that this texture uses.\nPlease call <code>updateUvs()</code> after you change coordinates of <code>frame</code> manually.</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the Texture in pixels.</p>",
							"description": ""
						},
						{
							"name": "noFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Does this Texture have any frame data assigned to it?</p>",
							"description": "<p>This mode is enabled automatically if no frame was passed inside constructor.</p>\n<p>In this mode texture is subscribed to baseTexture events, and fires <code>update</code> on any change.</p>\n<p>Beware, after loading or resize of baseTexture event can fired two times!\nIf you want more control, subscribe on baseTexture itself.</p>\n<pre><code class=\"hljs language-js\">texture.on(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {});\n</code></pre>\n<p>Any assignment of <code>frame</code> switches off <code>noFrame</code> mode.</p>"
						},
						{
							"name": "orig",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This is the area of original texture, before it was put in atlas</p>",
							"description": ""
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Returns resolution of baseTexture</p>",
							"description": ""
						},
						{
							"name": "rotate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Indicates whether the texture is rotated inside the atlas\nset to 2 to compensate for texture packer rotation\nset to 6 to compensate for spine packer rotation\ncan be used to rotate or mirror sprites\nSee {@link PIXI.groupD8} for explanation</p>"
						},
						{
							"name": "textureCacheIds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The ids under which this Texture has been added to the texture cache. This is\nautomatically set as long as Texture.addToCache is used, but may not be set if a\nTexture is added directly to the TextureCache array.</p>"
						},
						{
							"name": "trim",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This is the trimmed area of original texture, before it was put in atlas\nPlease call <code>updateUvs()</code> after you change coordinates of <code>trim</code> manually.</p>"
						},
						{
							"name": "uvMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Default TextureMatrix instance for this texture\nBy default that object is not created because its heavy</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.</p>",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the Texture in pixels.</p>",
							"description": ""
						},
						{
							"name": "_updateID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Update ID is observed by sprites and TextureMatrix instances.\nCall updateUvs() to increment it.</p>"
						},
						{
							"name": "_uvs",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The WebGL UV data cache. Can be used as quad UV</p>",
							"description": ""
						},
						{
							"name": "addToCache",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Helper function that creates a new Texture based on the source you provide.\nThe source can be - frame id, image url, video url, canvas element, video element, base texture</p>"
						},
						{
							"name": "fromBuffer",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Create a new Texture with a BufferResource from a Float32Array.\nRGBA values are floats from 0 to 1.</p>"
						},
						{
							"name": "fromCanvas",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromFrame",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromImage",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromLoader",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Create a texture from a source and add to the cache.</p>",
							"description": ""
						},
						{
							"name": "fromSVG",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromURL",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Useful for loading textures via URLs. Use instead of <code>Texture.from</code> because\nit does a better job of handling failed URLs more effectively. This also ignores\n<code>PIXI.settings.STRICT_TEXTURE_CACHE</code>. Works for Videos, SVGs, Images.</p>"
						},
						{
							"name": "fromVideo",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "removeFromCache",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Remove a Texture from the global TextureCache.</p>",
							"description": ""
						},
						{
							"name": "castToBaseTexture",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Utility function for BaseTexture|Texture cast</p>",
							"description": ""
						},
						{
							"name": "clone",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Creates a new texture object that acts the same as this one.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this texture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates this texture on the gpu.</p>",
							"description": "<p>Calls the TextureResource update.</p>\n<p>If you adjusted <code>frame</code> manually, please call <code>updateUvs()</code> instead.</p>"
						},
						{
							"name": "updateUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Updates the internal WebGL UV cache. Use it after you change <code>frame</code> or <code>trim</code> of the texture.\nCall it after changing the frame</p>"
						},
						{
							"name": "onBaseTextureUpdated",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Called when the base texture is updated</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TextureGCSystem",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>System plugin to the renderer to manage texture garbage collection on the GPU,\nensuring that it does not get clogged up with textures that are no longer being used.</p>",
					"members": [
						{
							"name": "checkCount",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Check count</p>"
						},
						{
							"name": "checkCountMax",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Maximum number of item to check</p>"
						},
						{
							"name": "count",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Count</p>"
						},
						{
							"name": "maxIdle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Maximum idle time, in seconds</p>"
						},
						{
							"name": "mode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Current garabage collection mode</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "postrender",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks to see when the last time a texture was used\nif the texture has not been used for a specified amount of time it will be removed from the GPU</p>"
						},
						{
							"name": "run",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks to see when the last time a texture was used\nif the texture has not been used for a specified amount of time it will be removed from the GPU</p>"
						},
						{
							"name": "unload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all the textures within the specified displayObject and its children from the GPU</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TextureLoader",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Loader plugin for handling Texture resources.</p>",
					"members": [
						{
							"name": "use",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Called after a resource is loaded.</p>"
						}
					]
				},
				{
					"name": "TextureMatrix",
					"type": "ClassDoc",
					"brief": "<p>Class controls uv mapping from Texture normal space to BaseTexture normal space.</p>",
					"description": "<p>Takes <code>trim</code> and <code>rotate</code> into account. May contain clamp settings for Meshes and TilingSprite.</p>\n<p>Can be used in Texture <code>uvMatrix</code> field, or separately, you can use different clamp settings on the same texture.\nIf you want to add support for texture region of certain feature or filter, that's what you're looking for.</p>\n<p>Takes track of Texture changes through <code>_lastTextureID</code> private field.\nUse <code>update()</code> method call to track it from outside.</p>",
					"members": [
						{
							"name": "clampMargin",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Changes frame clamping\nWorks with TilingSprite and Mesh\nChange to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas</p>"
						},
						{
							"name": "clampOffset",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Changes frame clamping\nWorks with TilingSprite and Mesh\nChange to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders</p>"
						},
						{
							"name": "isSimple",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If texture size is the same as baseTexture</p>"
						},
						{
							"name": "mapCoord",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Matrix operation that converts texture region coords to texture coords</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>texture property</p>"
						},
						{
							"name": "uClampFrame",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\nCalculated based on clampOffset.</p>"
						},
						{
							"name": "uClampOffset",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Normalized clamp offset.\nCalculated based on clampOffset.</p>"
						},
						{
							"name": "_textureID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Tracks Texture frame changes</p>"
						},
						{
							"name": "_updateID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Tracks Texture frame changes</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "multiplyUvs",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Multiplies uvs array to transform</p>"
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>updates matrices if texture was changed</p>"
						}
					]
				},
				{
					"name": "TextureSystem",
					"type": "ClassDoc",
					"brief": "<p>System plugin to the renderer to manage textures.</p>",
					"description": "",
					"members": [
						{
							"name": "boundTextures",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Bound textures</p>"
						},
						{
							"name": "currentLocation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Current location</p>"
						},
						{
							"name": "managedTextures",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>List of managed textures</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "unknownTexture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>BaseTexture value that shows that we don't know what is bound</p>"
						},
						{
							"name": "_unknownBoundTextures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Did someone temper with textures state? We'll overwrite them when we need to unbind something.</p>"
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind a texture to a specific location</p>",
							"description": "<p>If you want to unbind something, please use <code>unbind(texture)</code> instead of <code>bind(null, textureLocation)</code></p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "contextChange",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sets up the renderer context and necessary buffers.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Generic destroy methods to be overridden by the subclass</p>",
							"description": ""
						},
						{
							"name": "reset",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets texture location and bound textures</p>",
							"description": "<p>Actual <code>bind(null, i)</code> calls will be performed at next <code>unbind()</code> call</p>"
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Unbind a texture</p>"
						},
						{
							"name": "destroyTexture",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Deletes the texture from WebGL</p>",
							"description": ""
						},
						{
							"name": "initTexture",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Initialize a texture</p>",
							"description": ""
						},
						{
							"name": "setStyle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Set style for texture</p>",
							"description": ""
						},
						{
							"name": "updateTexture",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Update a texture</p>",
							"description": ""
						},
						{
							"name": "updateTextureStyle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Update texture style such as mipmap flag</p>",
							"description": ""
						}
					]
				},
				{
					"name": "Ticker",
					"type": "ClassDoc",
					"brief": "<p>A Ticker class that runs an update loop that other objects listen to.</p>",
					"description": "<p>This class is composed around listeners meant for execution on the next requested animation frame.\nAnimation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.</p>",
					"members": [
						{
							"name": "shared",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n{@link PIXI.VideoResource} to update animation frames / video textures.</p>\n<p>It may also be used by {@link PIXI.Application} if created with the <code>sharedTicker</code> option property set to true.</p>\n<p>The property {@link PIXI.Ticker#autoStart} is set to <code>true</code> for this instance.\nPlease follow the examples for usage, including how to opt-out of auto-starting the shared ticker.</p>"
						},
						{
							"name": "system",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>The system ticker instance used by {@link PIXI.InteractionManager} and by\n{@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\nunlike the <code>shared</code> ticker which drives visual animations and rendering which may want to be paused.</p>\n<p>The property {@link PIXI.Ticker#autoStart} is set to <code>true</code> for this instance.</p>"
						},
						{
							"name": "autoStart",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether or not this ticker should invoke the method\n{@link PIXI.Ticker#start} automatically\nwhen a listener is added.</p>"
						},
						{
							"name": "count",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The number of listeners on this ticker, calculated by walking through linked list</p>",
							"description": ""
						},
						{
							"name": "deltaMS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Scaler time elapsed in milliseconds from last frame to this frame.\nThis value is capped by setting {@link PIXI.Ticker#minFPS}\nand is scaled with {@link PIXI.Ticker#speed}.\n<strong>Note:</strong> The cap may be exceeded by scaling.\nIf the platform supports DOMHighResTimeStamp,\nthis value will have a precision of 1 µs.\nDefaults to target frame time</p>"
						},
						{
							"name": "deltaTime",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Scalar time value from last frame to this frame.\nThis value is capped by setting {@link PIXI.Ticker#minFPS}\nand is scaled with {@link PIXI.Ticker#speed}.\n<strong>Note:</strong> The cap may be exceeded by scaling.</p>"
						},
						{
							"name": "elapsedMS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Time elapsed in milliseconds from last frame to this frame.\nOpposed to what the scalar {@link PIXI.Ticker#deltaTime}\nis based, this value is neither capped nor scaled.\nIf the platform supports DOMHighResTimeStamp,\nthis value will have a precision of 1 µs.\nDefaults to target frame time</p>"
						},
						{
							"name": "FPS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The frames per second at which this ticker is running.\nThe default is approximately 60 in most modern browsers.\n<strong>Note:</strong> This does not factor in the value of\n{@link PIXI.Ticker#speed}, which is specific\nto scaling {@link PIXI.Ticker#deltaTime}.</p>"
						},
						{
							"name": "lastTime",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The last time {@link PIXI.Ticker#update} was invoked.\nThis value is also reset internally outside of invoking\nupdate, but only when a new animation frame is requested.\nIf the platform supports DOMHighResTimeStamp,\nthis value will have a precision of 1 µs.</p>"
						},
						{
							"name": "maxFPS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Manages the minimum amount of milliseconds required to\nelapse between invoking {@link PIXI.Ticker#update}.\nThis will effect the measured value of {@link PIXI.Ticker#FPS}.\nIf it is set to <code>0</code>, then there is no limit; PixiJS will render as many frames as it can.\nOtherwise it will be at least <code>minFPS</code></p>"
						},
						{
							"name": "minFPS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Manages the maximum amount of milliseconds allowed to\nelapse between invoking {@link PIXI.Ticker#update}.\nThis value is used to cap {@link PIXI.Ticker#deltaTime},\nbut does not effect the measured value of {@link PIXI.Ticker#FPS}.\nWhen setting this property it is clamped to a value between\n<code>0</code> and <code>PIXI.settings.TARGET_FPMS * 1000</code>.</p>"
						},
						{
							"name": "speed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Factor of current {@link PIXI.Ticker#deltaTime}.</p>"
						},
						{
							"name": "started",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Whether or not this ticker has been started.\n<code>true</code> if {@link PIXI.Ticker#start} has been called.\n<code>false</code> if {@link PIXI.Ticker#stop} has been called.\nWhile <code>false</code>, this value may change to <code>true</code> in the\nevent of {@link PIXI.Ticker#autoStart} being <code>true</code>\nand a listener is added.</p>"
						},
						{
							"name": "_head",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The first listener. All new listeners added are chained on this.</p>"
						},
						{
							"name": "_lastFrame",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The last time keyframe was executed.\nMaintains a relatively fixed interval with the previous value.</p>"
						},
						{
							"name": "_maxElapsedMS",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal value managed by minFPS property setter and getter.\nThis is the maximum allowed milliseconds between updates.</p>"
						},
						{
							"name": "_minElapsedMS",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal value managed by maxFPS property setter and getter.\nThis is the minimum allowed milliseconds between updates.</p>"
						},
						{
							"name": "_protected",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, deleting is disabled.</p>"
						},
						{
							"name": "_requestId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal current frame request ID</p>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Register a handler for tick events. Calls continuously unless\nit is removed or the ticker is stopped.</p>"
						},
						{
							"name": "addOnce",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Add a handler for the tick event which is only execute once.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy the ticker and don't use after this. Calling\nthis method removes all references to internal events.</p>"
						},
						{
							"name": "remove",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Removes any handlers matching the function and context parameters.\nIf no handlers are left after removing, then it cancels the animation frame.</p>"
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Starts the ticker. If the ticker has listeners\na new animation frame is requested at this point.</p>"
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stops the ticker. If the ticker has requested\nan animation frame it is canceled at this point.</p>"
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Triggers an update. An update entails setting the\ncurrent {@link PIXI.Ticker#elapsedMS},\nthe current {@link PIXI.Ticker#deltaTime},\ninvoking all listeners with current deltaTime,\nand then finally setting {@link PIXI.Ticker#lastTime}\nwith the value of currentTime that was provided.\nThis method will be called automatically by animation\nframe callbacks if the ticker instance has been started\nand listeners are added.</p>"
						},
						{
							"name": "_addListener",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internally adds the event handler so that it can be sorted by priority.\nPriority allows certain handler (user, AnimatedSprite, Interaction) to be run\nbefore the rendering.</p>"
						},
						{
							"name": "_cancelIfNeeded",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Conditionally cancels a pending animation frame.</p>",
							"description": ""
						},
						{
							"name": "_requestIfNeeded",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Conditionally requests a new animation frame.\nIf a frame has not already been requested, and if the internal\nemitter has listeners, a new frame is requested.</p>"
						},
						{
							"name": "_startIfPossible",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Conditionally requests a new animation frame.\nIf the ticker has been started it checks if a frame has not already\nbeen requested, and if the internal emitter has listeners. If these\nconditions are met, a new frame is requested. If the ticker has not\nbeen started, but autoStart is <code>true</code>, then the ticker starts now,\nand continues with the previous conditions to request a new frame.</p>"
						},
						{
							"name": "_tick",
							"type": "FunctionDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal tick method bound to ticker instance.\nThis is because in early 2015, Function.bind\nis still 60% slower in high performance scenarios.\nAlso separating frame requests from update method\nso listeners may be called at any time and with\nany animation API, just invoke ticker.update(time).</p>"
						}
					]
				},
				{
					"name": "TickerPlugin",
					"type": "ClassDoc",
					"brief": "<p>Middleware for for Application Ticker.</p>",
					"description": "",
					"members": [
						{
							"name": "destroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Clean up the ticker, scoped to application.</p>",
							"description": ""
						},
						{
							"name": "init",
							"type": "MethodDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Initialize the plugin with scope of application instance</p>",
							"description": "",
							"members": [
								{
									"name": "get",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						}
					]
				},
				{
					"name": "TilingSprite",
					"type": "ClassDoc",
					"brief": "<p>A tiling sprite is a fast way of rendering a tiling image</p>",
					"description": "",
					"members": [
						{
							"name": "_accessibleActive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_accessibleDiv",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_bounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "_localBounds",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
							"description": ""
						},
						{
							"name": "accessible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
						},
						{
							"name": "accessibleChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
						},
						{
							"name": "accessibleHint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
							"description": ""
						},
						{
							"name": "accessiblePointerEvents",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
						},
						{
							"name": "accessibleTitle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
						},
						{
							"name": "accessibleType",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
						},
						{
							"name": "alpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The opacity of the object.</p>",
							"description": ""
						},
						{
							"name": "anchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
						},
						{
							"name": "angle",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "blendMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
							"description": ""
						},
						{
							"name": "buttonMode",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
						},
						{
							"name": "cacheAsBitmap",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
						},
						{
							"name": "children",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The array of children of this container.</p>",
							"description": ""
						},
						{
							"name": "clampMargin",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Changes frame clamping in corresponding textureTransform, shortcut\nChange to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas</p>"
						},
						{
							"name": "cursor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
						},
						{
							"name": "filterArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
						},
						{
							"name": "filters",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the TilingSprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "hitArea",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
						},
						{
							"name": "interactive",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
						},
						{
							"name": "interactiveChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
						},
						{
							"name": "isMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Does any other displayObject use this object as a mask?</p>"
						},
						{
							"name": "isSprite",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
							"description": ""
						},
						{
							"name": "mask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
						},
						{
							"name": "name",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The instance name of the object.</p>",
							"description": ""
						},
						{
							"name": "parent",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The display object container that contains this display object.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
						},
						{
							"name": "pluginName",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' method.</p>"
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "renderable",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
						},
						{
							"name": "roundPixels",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
							"description": "<p>The default scale is (1, 1).</p>"
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew factor for the object in radians.</p>",
							"description": ""
						},
						{
							"name": "smartMask",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
						},
						{
							"name": "sortableChildren",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
						},
						{
							"name": "sortDirty",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
							"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
						},
						{
							"name": "texture",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "tilePosition",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The offset of the image that is being tiled</p>",
							"description": ""
						},
						{
							"name": "tileScale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scaling of the image that is being tiled</p>",
							"description": ""
						},
						{
							"name": "tileTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Tile transform</p>",
							"description": ""
						},
						{
							"name": "tint",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
						},
						{
							"name": "transform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
						},
						{
							"name": "uvMatrix",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space</p>",
							"description": ""
						},
						{
							"name": "uvRespectAnchor",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Whether or not anchor affects uvs</p>",
							"description": ""
						},
						{
							"name": "visible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the sprite, setting this will actually modify the scale to achieve the value set</p>",
							"description": ""
						},
						{
							"name": "worldAlpha",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The multiplied alpha of the displayObject.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
							"description": ""
						},
						{
							"name": "worldVisible",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Indicates if the object is globally visible.</p>",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
						},
						{
							"name": "zIndex",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The zIndex of the displayObject.</p>",
							"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
						},
						{
							"name": "_boundsID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Flags the cached bounds as dirty.</p>",
							"description": ""
						},
						{
							"name": "_boundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
							"description": ""
						},
						{
							"name": "_cachedTint",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
						},
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
							"description": ""
						},
						{
							"name": "_enabledFilters",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Currently enabled filters</p>"
						},
						{
							"name": "_lastSortedIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
						},
						{
							"name": "_localBoundsRect",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
							"description": ""
						},
						{
							"name": "_mask",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The original, cached mask of the object.</p>",
							"description": ""
						},
						{
							"name": "_tempDisplayObjectParent",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_tintedCanvas",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Cached tinted texture.</p>"
						},
						{
							"name": "_zIndex",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
						},
						{
							"name": "_anchor",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The height of the tiling sprite</p>",
							"description": ""
						},
						{
							"name": "_roundPixels",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal roundPixels field</p>",
							"description": ""
						},
						{
							"name": "_texture",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The texture that the sprite is using</p>",
							"description": ""
						},
						{
							"name": "_tint",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "_tintRGB",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
							"description": ""
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The with of the tiling sprite</p>",
							"description": ""
						},
						{
							"name": "tabIndex",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Internal set of all active pointers, by identifier</p>",
							"description": ""
						},
						{
							"name": "uvs",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
						},
						{
							"name": "vertexData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
							"description": ""
						},
						{
							"name": "vertexTrimmedData",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
							"description": ""
						},
						{
							"name": "from",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Helper function that creates a new tiling sprite based on the source you provide.\nThe source can be - frame id, image url, video url, canvas element, video element, base texture</p>"
						},
						{
							"name": "fromFrame",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "fromImage",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "_recursivePostUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
						},
						{
							"name": "addChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds one or more children to the container.</p>",
							"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
						},
						{
							"name": "addChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
							"description": ""
						},
						{
							"name": "calculateBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Recalculates the bounds of the container.</p>",
							"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
						},
						{
							"name": "calculateTrimmedVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
						},
						{
							"name": "calculateVertices",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "containerUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "containsPoint",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks if a point is inside this tiling sprite.</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this sprite and optionally its texture and children</p>",
							"description": ""
						},
						{
							"name": "disableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Pair method for <code>enableTempParent</code></p>",
							"description": ""
						},
						{
							"name": "displayObjectUpdateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
						},
						{
							"name": "enableTempParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
							"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
							"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
						},
						{
							"name": "getChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the child at the specified index</p>",
							"description": ""
						},
						{
							"name": "getChildByName",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the display object in the container.</p>",
							"description": "<p>Recursive searches are done in a preorder traversal.</p>"
						},
						{
							"name": "getChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
							"description": ""
						},
						{
							"name": "getGlobalPosition",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
							"description": ""
						},
						{
							"name": "getLocalBounds",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Gets the local bounds of the sprite object.</p>",
							"description": ""
						},
						{
							"name": "removeChild",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes one or more children from the container.</p>",
							"description": ""
						},
						{
							"name": "removeChildAt",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes a child from the specified index position.</p>",
							"description": ""
						},
						{
							"name": "removeChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer.</p>",
							"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
						},
						{
							"name": "renderCanvas",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Renders the object using the Canvas renderer</p>"
						},
						{
							"name": "renderWebGL",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "setChildIndex",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Changes the position of an existing child in the display object container</p>",
							"description": ""
						},
						{
							"name": "setParent",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the parent Container of this DisplayObject.</p>",
							"description": ""
						},
						{
							"name": "setTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
							"description": ""
						},
						{
							"name": "sortChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
							"description": ""
						},
						{
							"name": "swapChildren",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
							"description": ""
						},
						{
							"name": "toGlobal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the global position of the display object.</p>",
							"description": ""
						},
						{
							"name": "toLocal",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the transform on all children of this container for rendering</p>",
							"description": ""
						},
						{
							"name": "_calculateBounds",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Updates the bounds of the tiling sprite.</p>",
							"description": ""
						},
						{
							"name": "_onTextureUpdate",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "_render",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the WebGL renderer</p>",
							"description": ""
						},
						{
							"name": "onChildrenChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
							"description": ""
						},
						{
							"name": "renderAdvanced",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
							"description": ""
						},
						{
							"name": "_cacheAsBitmapDestroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached object.</p>",
							"description": ""
						},
						{
							"name": "_calculateCachedBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Calculates the bounds of the cached sprite</p>",
							"description": ""
						},
						{
							"name": "_destroyCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_getCachedLocalBounds",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Gets the bounds of the cached sprite.</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObject",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_initCachedDisplayObjectCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
							"description": ""
						},
						{
							"name": "_onAnchorUpdate",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Called when the anchor position updates.</p>",
							"description": ""
						},
						{
							"name": "_renderCached",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
							"description": ""
						},
						{
							"name": "_renderCachedCanvas",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a cached version of the sprite with canvas</p>",
							"description": ""
						},
						{
							"name": "childAdded",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
							"description": ""
						},
						{
							"name": "click",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousedown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mousemove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "mouseupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointercancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointermove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerout",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerover",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointertap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "pointerupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "removedFrom",
							"type": "EventDoc",
							"scope": "static",
							"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
							"description": ""
						},
						{
							"name": "rightclick",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightdown",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightup",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "rightupoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "tap",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchcancel",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchend",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchendoutside",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchmove",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "touchstart",
							"type": "EventDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
						},
						{
							"name": "added",
							"type": "EventDoc",
							"scope": "instance",
							"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
							"description": ""
						},
						{
							"name": "removed",
							"type": "EventDoc",
							"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
							"description": ""
						},
						{
							"name": "_renderCanvas",
							"type": "FunctionDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Renders the object using the Canvas renderer</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TilingSpriteRenderer",
					"type": "ClassDoc",
					"brief": "<p>WebGL renderer plugin for tiling sprites</p>",
					"description": "",
					"members": [
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The WebGL state in which this renderer will work.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>constructor for renderer</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Generic destruction method that frees all resources. This\nshould be called by subclasses.</p>"
						},
						{
							"name": "flush",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that should be used to empty the current\nbatch by rendering objects now.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stub method that initializes any state required before\nrendering starts. It is different from the <code>prerender</code>\nsignal, which occurs every frame, in that it is called\nwhenever an object requests <em>this</em> renderer specifically.</p>"
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
						}
					]
				},
				{
					"name": "TimeLimiter",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\nnumber of milliseconds per frame.</p>",
					"members": [
						{
							"name": "frameStart",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The start time of the current frame.</p>"
						},
						{
							"name": "maxMilliseconds",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The maximum milliseconds that can be spent preparing items each frame.</p>"
						},
						{
							"name": "allowedToUpload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Checks to see if another item can be uploaded. This should only be called once per item.</p>"
						},
						{
							"name": "beginFrame",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Resets any counting properties to start fresh on a new frame.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "Transform",
					"type": "ClassDoc",
					"brief": "<p>Transform that takes care about its versions</p>",
					"description": "",
					"members": [
						{
							"name": "IDENTITY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "<p>A default (identity) transform</p>",
							"description": ""
						},
						{
							"name": "localTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The local transformation matrix.</p>",
							"description": ""
						},
						{
							"name": "pivot",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The pivot point of the displayObject that it rotates around.</p>",
							"description": ""
						},
						{
							"name": "position",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
							"description": ""
						},
						{
							"name": "rotation",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The rotation of the object in radians.</p>",
							"description": ""
						},
						{
							"name": "scale",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The scale factor of the object.</p>",
							"description": ""
						},
						{
							"name": "skew",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The skew amount, on the x and y axis.</p>",
							"description": ""
						},
						{
							"name": "worldTransform",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The world transformation matrix.</p>",
							"description": ""
						},
						{
							"name": "_currentLocalID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The locally unique ID of the local transform\nused to calculate the current local transformation matrix.</p>"
						},
						{
							"name": "_cx",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The X-coordinate value of the normalized local X axis,\nthe first column of the local transformation matrix without a scale.</p>"
						},
						{
							"name": "_cy",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The X-coordinate value of the normalized local Y axis,\nthe second column of the local transformation matrix without a scale.</p>"
						},
						{
							"name": "_localID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The locally unique ID of the local transform.</p>",
							"description": ""
						},
						{
							"name": "_parentID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The locally unique ID of the parent's world transform\nused to calculate the current world transformation matrix.</p>"
						},
						{
							"name": "_rotation",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The rotation amount.</p>",
							"description": ""
						},
						{
							"name": "_sx",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The Y-coordinate value of the normalized local X axis,\nthe first column of the local transformation matrix without a scale.</p>"
						},
						{
							"name": "_sy",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The Y-coordinate value of the normalized local Y axis,\nthe second column of the local transformation matrix without a scale.</p>"
						},
						{
							"name": "_worldID",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>The locally unique ID of the world transform.</p>",
							"description": ""
						},
						{
							"name": "setFromMatrix",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Decomposes a matrix and sets the transforms properties based on it.</p>",
							"description": ""
						},
						{
							"name": "updateLocalTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the local transformation matrix.</p>",
							"description": ""
						},
						{
							"name": "updateTransform",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Updates the local and the world transformation matrices.</p>",
							"description": ""
						},
						{
							"name": "onChange",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Called when a value changes.</p>",
							"description": ""
						},
						{
							"name": "updateSkew",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Called when the skew or the rotation changes.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "UniformGroup",
					"type": "ClassDoc",
					"brief": "<p>Uniform group holds uniform map and some ID's for work</p>",
					"description": "",
					"members": [
						{
							"name": "group",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Its a group and not a single uniforms</p>"
						},
						{
							"name": "static",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Uniforms wont be changed after creation</p>"
						},
						{
							"name": "uniforms",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>uniform values</p>"
						},
						{
							"name": "dirtyId",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>dirty version</p>"
						},
						{
							"name": "id",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>unique id</p>"
						},
						{
							"name": "add",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "VideoResource",
					"type": "ClassDoc",
					"brief": "",
					"description": "<p>Resource type for HTMLVideoElement.</p>",
					"members": [
						{
							"name": "MIME_TYPES",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Map of video MIME types that can't be directly derived from file extensions.</p>"
						},
						{
							"name": "TYPES",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>List of common video file extensions supported by VideoResource.</p>"
						},
						{
							"name": "autoPlay",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>When set to true will automatically play videos used by this texture once\nthey are loaded. If false, it will not modify the playing state.</p>"
						},
						{
							"name": "autoUpdate",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Should the base texture automatically update itself, set to true by default</p>",
							"description": ""
						},
						{
							"name": "destroyed",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>If resource has been destroyed</p>"
						},
						{
							"name": "height",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The height of the resource.</p>",
							"description": ""
						},
						{
							"name": "source",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The source element</p>"
						},
						{
							"name": "updateFPS",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>How many times a second to update the texture from the video. Leave at 0 to update at every render.\nA lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.</p>"
						},
						{
							"name": "valid",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Has been validated</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The width of the resource.</p>",
							"description": ""
						},
						{
							"name": "_height",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal height of the resource</p>"
						},
						{
							"name": "_width",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>Internal width of the resource</p>"
						},
						{
							"name": "internal",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if resource is created by BaseTexture\nuseful for doing cleanup with BaseTexture destroy\nand not cleaning up resources that were created\nexternally.</p>"
						},
						{
							"name": "_autoUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p><code>true</code> to use PIXI.Ticker.shared to auto update the base texture.</p>",
							"description": ""
						},
						{
							"name": "_isConnectedToTicker",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p><code>true</code> if the instance is currently connected to PIXI.Ticker.shared to auto update the base texture.</p>",
							"description": ""
						},
						{
							"name": "_load",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Promise when loading</p>"
						},
						{
							"name": "_resolve",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Callback when completed with load.</p>"
						},
						{
							"name": "noSubImage",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If set to <code>true</code>, will force <code>texImage2D</code> over <code>texSubImage2D</code> for uploading.\nCertain types of media (e.g. video) using <code>texImage2D</code> is more performant.</p>"
						},
						{
							"name": "onError",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Handle internal errors, such as loading errors\naccepts 1 param: error</p>"
						},
						{
							"name": "onResize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Mini-runner for handling resize events\naccepts 2 parameters: width, height</p>"
						},
						{
							"name": "onUpdate",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Mini-runner for handling update events</p>",
							"description": ""
						},
						{
							"name": "test",
							"type": "MethodDoc",
							"scope": "static",
							"brief": "<p>Used to auto-detect the type of resource.</p>",
							"description": ""
						},
						{
							"name": "bind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Call when destroying resource, unbind any BaseTexture object\nbefore calling this method, as reference counts are maintained\ninternally.</p>"
						},
						{
							"name": "dispose",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys this texture</p>"
						},
						{
							"name": "resize",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Trigger a resize event</p>"
						},
						{
							"name": "style",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Set the style, optional to override</p>",
							"description": ""
						},
						{
							"name": "unbind",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Unbind to a parent BaseTexture</p>",
							"description": ""
						},
						{
							"name": "update",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Trigger updating of the texture</p>",
							"description": ""
						},
						{
							"name": "upload",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Upload the texture to the GPU.</p>"
						},
						{
							"name": "load",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Start preloading the video resource.</p>",
							"description": ""
						},
						{
							"name": "_isSourcePlaying",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Returns true if the underlying source is playing.</p>",
							"description": ""
						},
						{
							"name": "_isSourceReady",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Returns true if the underlying source is ready for playing.</p>",
							"description": ""
						},
						{
							"name": "_onCanPlay",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Fired when the video is loaded and ready to play</p>",
							"description": ""
						},
						{
							"name": "_onError",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Handle video error events.</p>",
							"description": ""
						},
						{
							"name": "_onPlayStart",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Runs the update loop when the video is ready to play</p>",
							"description": ""
						},
						{
							"name": "_onPlayStop",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Fired when a pause event is triggered, stops the update loop</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ViewableBuffer",
					"type": "ClassDoc",
					"brief": "<p>Flexible wrapper around <code>ArrayBuffer</code> that also provides typed array views on demand.</p>",
					"description": "",
					"members": [
						{
							"name": "float32View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Float32Array</code>.</p>",
							"description": ""
						},
						{
							"name": "int16View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Int16Array</code>.</p>",
							"description": ""
						},
						{
							"name": "int32View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Int32Array</code>.</p>",
							"description": ""
						},
						{
							"name": "int8View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Int8Array</code>.</p>",
							"description": ""
						},
						{
							"name": "rawBinaryData",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Underlying <code>ArrayBuffer</code> that holds all the data and is of capacity <code>this.size</code>.</p>",
							"description": ""
						},
						{
							"name": "uint16View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Uint16Array</code>.</p>",
							"description": ""
						},
						{
							"name": "uint32View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Uint32Array</code>.</p>",
							"description": ""
						},
						{
							"name": "uint8View",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>View on the raw binary data as a <code>Uint8Array</code>.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroys all buffer references. Do not use after calling\nthis.</p>"
						},
						{
							"name": "view",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns the view of the given type.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "AbstractBatchRenderer",
					"type": "ClassDoc",
					"access": "protected",
					"brief": "<p>Renderer dedicated to drawing and batching sprites.</p>",
					"description": "<p>This is the default batch renderer. It buffers objects\nwith texture-based geometries and renders them in\nbatches. It uploads multiple textures to the GPU to\nreduce to the number of draw calls.</p>",
					"members": [
						{
							"name": "_drawCallPool",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Pool of <code>BatchDrawCall</code> objects that <code>flush</code> used\nto create &quot;batches&quot; of the objects being rendered.</p>\n<p>These are never re-allocated again.\nShared between all batch renderers because it can be only one &quot;flush&quot; working at the moment.</p>"
						},
						{
							"name": "_textureArrayPool",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "<p>Pool of <code>BatchDrawCall</code> objects that <code>flush</code> used\nto create &quot;batches&quot; of the objects being rendered.</p>\n<p>These are never re-allocated again.\nShared between all batch renderers because it can be only one &quot;flush&quot; working at the moment.</p>"
						},
						{
							"name": "MAX_TEXTURES",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Maximum number of textures that can be uploaded to\nthe GPU under the current context. It is initialized\nproperly in <code>this.contextChange</code>.</p>"
						},
						{
							"name": "renderer",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The renderer this manager works for.</p>",
							"description": ""
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>The number of bufferable objects before a flush\noccurs automatically.</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>The WebGL state in which this renderer will work.</p>",
							"description": ""
						},
						{
							"name": "vertexSize",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Size of data being buffered per vertex in the\nattribute buffers (in floats). By default, the\nbatch-renderer plugin uses 6:</p>\n<table>\n<thead>\n<tr>\n<th>aVertexPosition</th>\n<th>2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aTextureCoords</td>\n<td>2</td>\n</tr>\n<tr>\n<td>aColor</td>\n<td>1</td>\n</tr>\n<tr>\n<td>aTextureId</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>"
						},
						{
							"name": "_shader",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>This shader is generated by <code>this.shaderGenerator</code>.</p>",
							"description": "<p>It is generated specifically to handle the required\nnumber of textures being batched together.</p>"
						},
						{
							"name": "geometryClass",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>The class that represents the geometry of objects\nthat are going to be batched with this.</p>"
						},
						{
							"name": "shaderGenerator",
							"type": "PropertyDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "",
							"description": "<p>This is used to generate a shader that can\ncolor each vertex based on a <code>aTextureId</code>\nattribute that points to an texture in <code>uSampler</code>.</p>\n<p>This enables the objects with different textures\nto be drawn in the same draw call.</p>\n<p>You can customize your shader by creating your\ncustom shader generator.</p>"
						},
						{
							"name": "_aBuffers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pool of <code>ViewableBuffer</code> objects that are sorted in\norder of increasing size. The flush method uses\nthe buffer with the least size above the amount\nit requires. These are used for passing attributes.</p>\n<p>The first buffer has a size of 8; each subsequent\nbuffer has double capacity of its previous.</p>"
						},
						{
							"name": "_bufferedElements",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Buffer of objects that are yet to be rendered.</p>",
							"description": ""
						},
						{
							"name": "_bufferedTextures",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Data for texture batch builder, helps to save a bit of CPU on a pass.</p>"
						},
						{
							"name": "_bufferSize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Number of elements that are buffered and are\nwaiting to be flushed.</p>"
						},
						{
							"name": "_flushId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>A flush may occur multiple times in a single\nframe. On iOS devices or when\n<code>settings.CAN_UPLOAD_SAME_BUFFER</code> is false, the\nbatch renderer does not upload data to the same\n<code>WebGLBuffer</code> for performance reasons.</p>\n<p>This is the index into <code>packedGeometries</code> that points to\ngeometry holding the most recent buffers.</p>"
						},
						{
							"name": "_iBuffers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pool of <code>Uint16Array</code> objects that are sorted in\norder of increasing size. The flush method uses\nthe buffer with the least size above the amount\nit requires. These are used for passing indices.</p>\n<p>The first buffer has a size of 12; each subsequent\nbuffer has double capacity of its previous.</p>"
						},
						{
							"name": "_indexCount",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Total count of all indices used by the currently\nbuffered objects.</p>"
						},
						{
							"name": "_packedGeometries",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Pool of <code>this.geometryClass</code> geometry objects\nthat store buffers. They are used to pass data\nto the shader on each draw call.</p>\n<p>These are never re-allocated again, unless a\ncontext change occurs; however, the pool may\nbe expanded if required.</p>"
						},
						{
							"name": "_packedGeometryPoolSize",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Size of <code>this._packedGeometries</code>. It can be expanded\nif more than <code>this._packedGeometryPoolSize</code> flushes\noccur in a single frame.</p>"
						},
						{
							"name": "_vertexCount",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Total count of all vertices used by the currently\nbuffered objects.</p>"
						},
						{
							"name": "bindAndClearTexArray",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Bind textures for current rendering</p>",
							"description": ""
						},
						{
							"name": "buildDrawCalls",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Populating drawcalls for rendering</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>This will hook onto the renderer's <code>contextChange</code>\nand <code>prerender</code> signals.</p>"
						},
						{
							"name": "contextChange",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Handles the <code>contextChange</code> signal.</p>",
							"description": "<p>It calculates <code>this.MAX_TEXTURES</code> and allocating the\npacked-geometry object pool.</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Destroys this <code>AbstractBatchRenderer</code>. It cannot be used again.</p>",
							"description": ""
						},
						{
							"name": "drawBatches",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "flush",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the content <em>now</em> and empties the current batch.</p>",
							"description": ""
						},
						{
							"name": "initFlushBuffers",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Makes sure that static and dynamic flush pooled objects have correct dimensions</p>",
							"description": ""
						},
						{
							"name": "onPrerender",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Handles the <code>prerender</code> signal.</p>",
							"description": "<p>It ensures that flushes start from the first geometry\nobject again.</p>"
						},
						{
							"name": "packInterleavedGeometry",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Takes the four batching parameters of <code>element</code>, interleaves\nand pushes them into the batching attribute/index buffers given.</p>\n<p>It uses these properties: <code>vertexData</code> <code>uvs</code>, <code>textureId</code> and\n<code>indicies</code>. It also uses the &quot;tint&quot; of the base-texture, if\npresent.</p>"
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Buffers the &quot;batchable&quot; object. It need not be rendered\nimmediately.</p>"
						},
						{
							"name": "start",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Starts a new sprite batch.</p>",
							"description": ""
						},
						{
							"name": "stop",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Stops and flushes the current batch.</p>",
							"description": ""
						},
						{
							"name": "getAttributeBuffer",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Fetches an attribute buffer from <code>this._aBuffers</code> that\ncan hold atleast <code>size</code> floats.</p>"
						},
						{
							"name": "getIndexBuffer",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Fetches an index buffer from <code>this._iBuffers</code> that can\nhave at least <code>size</code> capacity.</p>"
						}
					]
				},
				{
					"name": "CanvasGraphicsRenderer",
					"type": "ClassDoc",
					"access": "protected",
					"brief": "<p>Renderer dedicated to drawing and batching graphics objects.</p>",
					"description": "",
					"members": [
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>destroy graphics object</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders a Graphics object to a canvas.</p>",
							"description": ""
						},
						{
							"name": "_calcCanvasStyle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>calculates fill/stroke style for canvas</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasMeshRenderer",
					"type": "ClassDoc",
					"access": "protected",
					"brief": "<p>Renderer dedicated to meshes.</p>",
					"description": "",
					"members": [
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>destroy the the renderer.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the Mesh</p>",
							"description": ""
						},
						{
							"name": "_renderDrawTriangle",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Draws one of the triangles that from the Mesh</p>",
							"description": ""
						},
						{
							"name": "_renderTriangleMesh",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Draws the object in Triangle Mesh mode</p>",
							"description": ""
						},
						{
							"name": "_renderTriangles",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Draws the object in triangle mode using canvas</p>",
							"description": ""
						},
						{
							"name": "renderMeshFlat",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Renders a flat Mesh</p>",
							"description": ""
						}
					]
				},
				{
					"name": "CanvasSpriteRenderer",
					"type": "ClassDoc",
					"access": "protected",
					"brief": "<p>Renderer dedicated to drawing and batching sprites.</p>",
					"description": "",
					"members": [
						{
							"name": "constructor",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>destroy the sprite object.</p>",
							"description": ""
						},
						{
							"name": "render",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Renders the sprite object.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TextureUvs",
					"type": "ClassDoc",
					"access": "protected",
					"brief": "",
					"description": "<p>Stores a texture's frame in UV coordinates, in\nwhich everything lies in the rectangle <code>[(0,0), (1,0),  (1,1), (0,1)]</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Corner</th>\n<th>Coordinates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Top-Left</td>\n<td><code>(x0,y0)</code></td>\n</tr>\n<tr>\n<td>Top-Right</td>\n<td><code>(x1,y1)</code></td>\n</tr>\n<tr>\n<td>Bottom-Right</td>\n<td><code>(x2,y2)</code></td>\n</tr>\n<tr>\n<td>Bottom-Left</td>\n<td><code>(x3,y3)</code></td>\n</tr>\n</tbody>\n</table>",
					"members": [
						{
							"name": "x0",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>X-component of top-left corner <code>(x0,y0)</code>.</p>",
							"description": ""
						},
						{
							"name": "x1",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>X-component of top-right corner <code>(x1,y1)</code>.</p>",
							"description": ""
						},
						{
							"name": "x2",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>X-component of bottom-right corner <code>(x2,y2)</code>.</p>",
							"description": ""
						},
						{
							"name": "x3",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>X-component of bottom-left corner <code>(x3,y3)</code>.</p>",
							"description": ""
						},
						{
							"name": "y0",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Y-component of top-left corner <code>(x0,y0)</code>.</p>",
							"description": ""
						},
						{
							"name": "y1",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Y-component of top-right corner <code>(x1,y1)</code>.</p>",
							"description": ""
						},
						{
							"name": "y2",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Y-component of bottom-right corner <code>(x2,y2)</code>.</p>",
							"description": ""
						},
						{
							"name": "y3",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "<p>Y-component of bottom-right corner <code>(x3,y3)</code>.</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"access": "protected",
							"scope": "instance",
							"brief": "<p>Sets the texture Uvs based on the given frame information.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "InteractionTrackingData",
					"type": "ClassDoc",
					"access": "private",
					"brief": "<p>DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions</p>",
					"description": "",
					"members": [
						{
							"name": "flags",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>State of the tracking data, expressed as bit flags</p>",
							"description": ""
						},
						{
							"name": "leftDown",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Did the left mouse button come down in the DisplayObject?</p>",
							"description": ""
						},
						{
							"name": "none",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is the tracked event inactive (not over or down)?</p>",
							"description": ""
						},
						{
							"name": "over",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Is the tracked event over the DisplayObject?</p>",
							"description": ""
						},
						{
							"name": "pointerId",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Unique pointer id of the event</p>",
							"description": ""
						},
						{
							"name": "rightDown",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Did the right mouse button come down in the DisplayObject?</p>",
							"description": ""
						},
						{
							"name": "_doSet",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "ParticleBuffer",
					"type": "ClassDoc",
					"access": "private",
					"brief": "<p>The particle buffer manages the static and dynamic buffers for a particle container.</p>",
					"description": "",
					"members": [
						{
							"name": "dynamicProperties",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>A list of the properties that are dynamic.</p>",
							"description": ""
						},
						{
							"name": "indexBuffer",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Holds the indices of the geometry (quads) to draw</p>",
							"description": ""
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>The number of particles the buffer can hold</p>",
							"description": ""
						},
						{
							"name": "staticProperties",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>A list of the properties that are static.</p>",
							"description": ""
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": ""
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Destroys the ParticleBuffer.</p>",
							"description": ""
						},
						{
							"name": "initBuffers",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Sets up the renderer context and necessary buffers.</p>",
							"description": ""
						},
						{
							"name": "uploadDynamic",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Uploads the dynamic properties.</p>",
							"description": ""
						},
						{
							"name": "uploadStatic",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Uploads the static properties.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "TickerListener",
					"type": "ClassDoc",
					"access": "private",
					"brief": "<p>Internal class for handling the priority sorting of ticker handlers.</p>",
					"description": "",
					"members": [
						{
							"name": "_destroyed",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p><code>true</code> if this listener has been destroyed already.</p>"
						},
						{
							"name": "context",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The calling to execute.</p>"
						},
						{
							"name": "fn",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The handler function to execute.</p>"
						},
						{
							"name": "next",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The next item in chain.</p>"
						},
						{
							"name": "once",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>If this should only execute once.</p>"
						},
						{
							"name": "previous",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The previous item in chain.</p>"
						},
						{
							"name": "priority",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>The current priority.</p>"
						},
						{
							"name": "connect",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Connect to the list.</p>"
						},
						{
							"name": "constructor",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Constructor</p>"
						},
						{
							"name": "destroy",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Destroy and don't use after this.</p>"
						},
						{
							"name": "emit",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Emit by calling the current function.</p>"
						},
						{
							"name": "match",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>Simple compare function to figure out if a function and context match.</p>"
						}
					]
				},
				{
					"name": "TreeSearch",
					"type": "ClassDoc",
					"access": "private",
					"brief": "<p>Strategy how to search through stage tree for interactive objects</p>",
					"description": "",
					"members": [
						{
							"name": "findHit",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "",
							"description": "<p>This function is provides a neat way of crawling through the scene graph and running a\nspecified function on all interactive objects it finds. It will also take care of hit\ntesting the interactive objects and passes the hit across in the function.</p>"
						},
						{
							"name": "recursiveFindHit",
							"type": "MethodDoc",
							"access": "private",
							"scope": "instance",
							"brief": "<p>Recursive implementation for findHit</p>",
							"description": ""
						}
					]
				},
				{
					"name": "ALPHA_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>How to treat textures with premultiplied alpha</p>",
					"description": "",
					"members": [
						{
							"name": "NO_PREMULTIPLIED_ALPHA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Source is not premultiplied, leave it like that.\nOption for compressed and data textures that are created from typed arrays.</p>"
						},
						{
							"name": "NPM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Alias for NO_PREMULTIPLIED_ALPHA.</p>"
						},
						{
							"name": "PMA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Alias for PREMULTIPLIED_ALPHA.</p>"
						},
						{
							"name": "PREMULTIPLIED_ALPHA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Source is already premultiplied\nExample: spine atlases with <code>_pma</code> suffix.</p>"
						},
						{
							"name": "PREMULTIPLY_ON_UPLOAD",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Source is not premultiplied, premultiply on upload.\nDefault option, used for all loaded images.</p>"
						},
						{
							"name": "UNPACK",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Default option, alias for PREMULTIPLY_ON_UPLOAD.</p>"
						}
					]
				},
				{
					"name": "BUFFER_BITS",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Bitwise OR of masks that indicate the buffers to be cleared.</p>",
					"description": "",
					"members": [
						{
							"name": "COLOR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Indicates the buffers currently enabled for color writing.</p>"
						},
						{
							"name": "DEPTH",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Indicates the depth buffer.</p>"
						},
						{
							"name": "STENCIL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Indicates the stencil buffer.</p>"
						}
					]
				},
				{
					"name": "CLEAR_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>How to clear renderTextures in filter</p>",
					"description": "",
					"members": [
						{
							"name": "AUTO",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Alias for BLIT</p>"
						},
						{
							"name": "BLEND",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Preserve the information in the texture, blend above</p>"
						},
						{
							"name": "BLIT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Clear or blit it, depends on device and level of paranoia</p>"
						},
						{
							"name": "CLEAR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Must use <code>gl.clear</code> operation</p>"
						},
						{
							"name": "NO",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Alias for BLEND, same as <code>false</code> in earlier versions</p>"
						},
						{
							"name": "YES",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Alias for CLEAR, same as <code>true</code> in earlier versions</p>"
						}
					]
				},
				{
					"name": "DRAW_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Various webgl draw modes. These can be used to specify which GL drawMode to use\nunder certain situations and renderers.</p>",
					"members": [
						{
							"name": "LINE_LOOP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LINE_STRIP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LINES",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "POINTS",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TRIANGLE_FAN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TRIANGLE_STRIP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TRIANGLES",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "ENV",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Different types of environments for WebGL.</p>",
					"description": "",
					"members": [
						{
							"name": "WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Version 1 of WebGL</p>"
						},
						{
							"name": "WEBGL_LEGACY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\nwith older / less advanced devices. If you experience unexplained flickering prefer this environment.</p>"
						},
						{
							"name": "WEBGL2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Version 2 of WebGL</p>"
						}
					]
				},
				{
					"name": "FORMATS",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Various GL texture/resources formats.</p>",
					"description": "",
					"members": [
						{
							"name": "ALPHA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DEPTH_COMPONENT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DEPTH_STENCIL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LUMINANCE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LUMINANCE_ALPHA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "RGB",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "RGBA",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "GC_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>The gc modes that are supported by pixi.</p>",
					"description": "<p>The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\nIf set to GC_MODE, the renderer will occasionally check textures usage. If they are not\nused for a specified period of time they will be removed from the GPU. They will of course\nbe uploaded again when they are required. This is a silent behind the scenes process that\nshould ensure that the GPU does not  get filled up.</p>\n<p>Handy for mobile devices!\nThis property only affects WebGL.</p>",
					"members": [
						{
							"name": "AUTO",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Garbage collection will happen periodically automatically</p>"
						},
						{
							"name": "MANUAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Garbage collection will need to be called manually</p>"
						}
					]
				},
				{
					"name": "INTERNAL_FORMATS",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>WebGL internal formats, including compressed texture formats provided by extensions</p>",
					"description": "",
					"members": [
						{
							"name": "COMPRESSED_R11_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RG11_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB_ATC_WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB_ETC1_WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB_PVRTC_2BPPV1_IMG",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB_S3TC_DXT1_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB8_ETC2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_S3TC_DXT1_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_S3TC_DXT3_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA_S3TC_DXT5_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_RGBA8_ETC2_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SIGNED_R11_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SIGNED_RG11_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB_S3TC_DXT1_EXT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB8_ETC2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "LINE_CAP",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Support line caps in <code>PIXI.LineStyle</code> for graphics.</p>",
					"description": "",
					"members": [
						{
							"name": "BUTT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'butt': don't add any cap at line ends (leaves orthogonal edges)</p>"
						},
						{
							"name": "ROUND",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'round': add semicircle at ends</p>"
						},
						{
							"name": "SQUARE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'square': add square at end (like <code>BUTT</code> except more length at end)</p>"
						}
					]
				},
				{
					"name": "LINE_JOIN",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Supported line joints in <code>PIXI.LineStyle</code> for graphics.</p>",
					"description": "",
					"members": [
						{
							"name": "BEVEL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'bevel': add a square butt at each end of line segment and fill the triangle at turn</p>"
						},
						{
							"name": "MITER",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'miter': make a sharp corner where outer part of lines meet</p>"
						},
						{
							"name": "ROUND",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>'round': add an arc at the joint</p>"
						}
					]
				},
				{
					"name": "MASK_TYPES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Constants for mask implementations.\nWe use <code>type</code> suffix because it leads to very different behaviours</p>",
					"members": [
						{
							"name": "NONE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Mask is ignored</p>"
						},
						{
							"name": "SCISSOR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Scissor mask, rectangle on screen, cheap</p>"
						},
						{
							"name": "SPRITE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Mask that uses SpriteMaskFilter, uses temporary RenderTexture</p>"
						},
						{
							"name": "STENCIL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Stencil mask, 1-bit, medium, works only if renderer supports stencil</p>"
						}
					]
				},
				{
					"name": "MIPMAP_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Mipmap filtering modes that are supported by pixi.</p>",
					"description": "<p>The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\nMipmaps are generated for a baseTexture if its <code>mipmap</code> field is <code>ON</code>,\nor its <code>POW2</code> and texture dimensions are powers of 2.\nDue to platform restriction, <code>ON</code> option will work like <code>POW2</code> for webgl-1.</p>\n<p>This property only affects WebGL.</p>",
					"members": [
						{
							"name": "OFF",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>No mipmaps</p>"
						},
						{
							"name": "ON",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Always generate mipmaps</p>"
						},
						{
							"name": "ON_MANUAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Use mipmaps, but do not auto-generate them; this is used with a resource\nthat supports buffering each level-of-detail.</p>"
						},
						{
							"name": "POW2",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Generate mipmaps if texture dimensions are pow2</p>"
						}
					]
				},
				{
					"name": "MSAA_QUALITY",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Constants for multi-sampling antialiasing.</p>",
					"description": "",
					"members": [
						{
							"name": "HIGH",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Try 8 samples</p>"
						},
						{
							"name": "LOW",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Try 2 samples</p>"
						},
						{
							"name": "MEDIUM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Try 4 samples</p>"
						},
						{
							"name": "NONE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>No multisampling for this renderTexture</p>"
						}
					]
				},
				{
					"name": "PRECISION",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Constants that specify float precision in shaders.</p>",
					"description": "",
					"members": [
						{
							"name": "HIGH",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LOW",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "MEDIUM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "RENDERER_TYPE",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Constant to identify the Renderer Type.</p>",
					"description": "",
					"members": [
						{
							"name": "CANVAS",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Canvas render type.</p>"
						},
						{
							"name": "UNKNOWN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Unknown render type.</p>"
						},
						{
							"name": "WEBGL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>WebGL render type.</p>"
						}
					]
				},
				{
					"name": "SCALE_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>The scale modes that are supported by pixi.</p>",
					"description": "<p>The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\nIt can be re-assigned to either LINEAR or NEAREST, depending upon suitability.</p>",
					"members": [
						{
							"name": "LINEAR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Smooth scaling</p>"
						},
						{
							"name": "NEAREST",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Pixelating scaling</p>"
						}
					]
				},
				{
					"name": "SHAPES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Constants that identify shapes, mainly to prevent <code>instanceof</code> calls.</p>",
					"description": "",
					"members": [
						{
							"name": "CIRC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Circle</p>"
						},
						{
							"name": "ELIP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Ellipse</p>"
						},
						{
							"name": "POLY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Polygon</p>"
						},
						{
							"name": "RECT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Rectangle</p>"
						},
						{
							"name": "RREC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Rounded Rectangle</p>"
						}
					]
				},
				{
					"name": "TARGETS",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Various GL target types.</p>",
					"description": "",
					"members": [
						{
							"name": "TEXTURE_2D",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_2D_ARRAY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_NEGATIVE_X",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_NEGATIVE_Y",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_NEGATIVE_Z",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_POSITIVE_X",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_POSITIVE_Y",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "TEXTURE_CUBE_MAP_POSITIVE_Z",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "TEXT_GRADIENT",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Constants that define the type of gradient on text.</p>",
					"description": "",
					"members": [
						{
							"name": "LINEAR_HORIZONTAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Linear gradient</p>"
						},
						{
							"name": "LINEAR_VERTICAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Vertical gradient</p>"
						}
					]
				},
				{
					"name": "TYPES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>Various GL data format types.</p>",
					"description": "",
					"members": [
						{
							"name": "FLOAT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "HALF_FLOAT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "UNSIGNED_BYTE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "UNSIGNED_SHORT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "UNSIGNED_SHORT_4_4_4_4",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "UNSIGNED_SHORT_5_5_5_1",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "UNSIGNED_SHORT_5_6_5",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "UPDATE_PRIORITY",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Represents the update priorities used by internal PIXI classes when registered with\nthe {@link PIXI.Ticker} object. Higher priority items are updated first and lower\npriority items, such as render, should go later.</p>",
					"members": [
						{
							"name": "HIGH",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}</p>"
						},
						{
							"name": "INTERACTION",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Highest priority, used for {@link PIXI.InteractionManager}</p>"
						},
						{
							"name": "LOW",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Low priority used for {@link PIXI.Application} rendering.</p>"
						},
						{
							"name": "NORMAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Default priority for ticker events, see {@link PIXI.Ticker#add}.</p>"
						},
						{
							"name": "UTILITY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Lowest priority used for {@link PIXI.BasePrepare} utility.</p>"
						}
					]
				},
				{
					"name": "WRAP_MODES",
					"type": "EnumDoc",
					"scope": "static",
					"brief": "<p>The wrap modes that are supported by pixi.</p>",
					"description": "<p>The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\nIt can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\nIf the texture is non power of two then clamp will be used regardless as WebGL can\nonly use REPEAT if the texture is po2.</p>\n<p>This property only affects WebGL.</p>",
					"members": [
						{
							"name": "CLAMP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>The textures uvs are clamped</p>"
						},
						{
							"name": "MIRRORED_REPEAT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>The texture uvs tile and repeat with mirroring</p>"
						},
						{
							"name": "REPEAT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>The texture uvs tile and repeat</p>"
						}
					]
				},
				{
					"name": "BLEND_MODES",
					"type": "EnumDoc",
					"brief": "<p>Various blend modes supported by PIXI.</p>",
					"description": "<p>IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\nAnything else will silently act like NORMAL.</p>",
					"members": [
						{
							"name": "ADD",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "ADD_NPM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COLOR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COLOR_BURN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "COLOR_DODGE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DARKEN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DIFFERENCE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DST_ATOP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DST_IN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DST_OUT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "DST_OVER",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "ERASE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "EXCLUSION",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "HARD_LIGHT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "HUE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LIGHTEN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "LUMINOSITY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "MULTIPLY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "NONE",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "NORMAL",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "NORMAL_NPM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "OVERLAY",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SATURATION",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SCREEN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SCREEN_NPM",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SOFT_LIGHT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SRC_ATOP",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SRC_IN",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SRC_OUT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SRC_OVER",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "SUBTRACT",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "XOR",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "BVHSplitAxis",
					"type": "EnumDoc",
					"brief": "<p>Axes in 2D space used by <code>@pixi-essentials/bvh</code>.</p>",
					"description": "",
					"members": [
						{
							"name": "X",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "Y",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "GD8Symmetry",
					"type": "TypedefDoc",
					"brief": "",
					"description": ""
				},
				{
					"name": "IBitmapFontDataChar",
					"type": "TypedefDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "height",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "id",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "page",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "x",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "xadvance",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "xoffset",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "yoffset",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "IBitmapFontDataCommon",
					"type": "TypedefDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "lineHeight",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "IBitmapFontDataInfo",
					"type": "TypedefDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "face",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "size",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "IBitmapFontDataKerning",
					"type": "TypedefDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "amount",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "first",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "second",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "IBitmapFontDataPage",
					"type": "TypedefDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "file",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "id",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "ICanvasImageSource",
					"type": "TypedefDoc",
					"brief": "",
					"description": "<p>Types that can be passed to drawImage</p>"
				},
				{
					"name": "IFontMetrics",
					"type": "TypedefDoc",
					"brief": "<p>A number, or a string containing a number.</p>",
					"description": "",
					"members": [
						{
							"name": "ascent",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Font ascent</p>"
						},
						{
							"name": "descent",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Font descent</p>"
						},
						{
							"name": "fontSize",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Font size</p>"
						}
					]
				},
				{
					"name": "ILoaderPlugin",
					"type": "TypedefDoc",
					"brief": "<p>Plugin to be installed for handling specific Loader resources.</p>",
					"description": "",
					"members": [
						{
							"name": "add",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Function to call immediate after registering plugin.</p>"
						},
						{
							"name": "pre",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Middleware function to run before load, the\narguments for this are <code>(resource, next)</code></p>"
						},
						{
							"name": "use",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Middleware function to run after load, the\narguments for this are <code>(resource, next)</code></p>"
						}
					]
				},
				{
					"name": "ISize",
					"type": "TypedefDoc",
					"brief": "<p>Size object, contains width and height</p>",
					"description": "",
					"members": [
						{
							"name": "height",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Height component</p>"
						},
						{
							"name": "width",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>Width component</p>"
						}
					]
				},
				{
					"name": "DATA_URI",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Regexp for data URI.\nBased on: {@link https://github.com/ragingwind/data-uri-regex}</p>"
				},
				{
					"name": "DEG_TO_RAD",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "<p>Conversion factor for converting degrees to radians.</p>",
					"description": ""
				},
				{
					"name": "GRAPHICS_CURVES",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Graphics curves resolution settings. If <code>adaptive</code> flag is set to <code>true</code>,\nthe resolution is calculated based on the curve's length to ensure better visual quality.\nAdaptive draw works with <code>bezierCurveTo</code> and <code>quadraticCurveTo</code>.</p>",
					"members": [
						{
							"name": "adaptive",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>flag indicating if the resolution should be adaptive</p>"
						},
						{
							"name": "maxLength",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>maximal length of a single segment of the curve (if adaptive = false, ignored)</p>"
						},
						{
							"name": "maxSegments",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>maximal number of segments in the curve (if adaptive = false, ignored)</p>"
						},
						{
							"name": "minSegments",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": "<p>minimal number of segments in the curve (if adaptive = false, ignored)</p>"
						}
					]
				},
				{
					"name": "INSTALLED",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Collection of installed resource types, class must extend {@link PIXI.Resource}.</p>"
				},
				{
					"name": "loader",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "PI_2",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "<p>Two Pi.</p>",
					"description": ""
				},
				{
					"name": "RAD_TO_DEG",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "<p>Conversion factor for converting radians to degrees.</p>",
					"description": ""
				},
				{
					"name": "SVG_SIZE",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				},
				{
					"name": "TRANSFORM_MODE",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "<p>Constants that specify the transform type.</p>",
					"description": "",
					"members": [
						{
							"name": "DYNAMIC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "STATIC",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "static",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "VERSION",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "<p>String of the current PIXI version.</p>",
					"description": ""
				},
				{
					"name": "defaultFilterVertex",
					"type": "PropertyDoc",
					"brief": "",
					"description": "<p>Default filter vertex shader</p>"
				},
				{
					"name": "defaultVertex",
					"type": "PropertyDoc",
					"brief": "",
					"description": "<p>Default vertex shader</p>"
				},
				{
					"name": "accessibleTarget",
					"type": "PropertyDoc",
					"access": "private",
					"brief": "",
					"description": "<p>Default property values of accessible objects\nused by {@link PIXI.AccessibilityManager}.</p>"
				},
				{
					"name": "interactiveTarget",
					"type": "PropertyDoc",
					"access": "private",
					"brief": "",
					"description": "<p>Default property values of interactive objects\nUsed by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties</p>",
					"members": [
						{
							"name": "_trackedPointers",
							"type": "PropertyDoc",
							"access": "private",
							"scope": "static",
							"brief": "<p>Map of all tracked pointers, by identifier. Use trackedPointers to access.</p>",
							"description": ""
						}
					]
				},
				{
					"name": "autoDetectResource",
					"type": "FunctionDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Create a resource element from a single source element. This\nauto-detects which type of resource to create. All resources that\nare auto-detectable must have a static <code>test</code> method and a constructor\nwith the arguments <code>(source, options?)</code>. Currently, the supported\nresources for auto-detection include:</p>\n<ul>\n<li>{@link PIXI.ImageResource}</li>\n<li>{@link PIXI.CanvasResource}</li>\n<li>{@link PIXI.VideoResource}</li>\n<li>{@link PIXI.SVGResource}</li>\n<li>{@link PIXI.BufferResource}</li>\n</ul>"
				},
				{
					"name": "autoDetectRenderer",
					"type": "FunctionDoc",
					"brief": "",
					"description": "<p>This helper function will automatically detect which renderer you should be using.\nWebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\nthe browser then this function will return a canvas renderer</p>"
				},
				{
					"name": "BVHObject",
					"type": "InterfaceDoc",
					"brief": "",
					"description": "<p>A bounded polygon that has a measurable perimeter (boundary length). This is what constitutes a\nleaf node in <code>BVHTree</code>.</p>\n<p>It is expected that these polygons are <strong>convex</strong>.</p>",
					"members": [
						{
							"name": "getBoundaryLength",
							"type": "MethodDoc",
							"brief": "<p>The length of the polygon's boundary, i.e. its perimeter.</p>",
							"description": ""
						},
						{
							"name": "getBounds",
							"type": "MethodDoc",
							"brief": "<p>The axis-aligned bounding box for this object</p>",
							"description": ""
						},
						{
							"name": "getCentroid",
							"type": "MethodDoc",
							"brief": "<p>The average of all vertices in this polygon</p>",
							"description": ""
						}
					]
				},
				{
					"name": "IBitmapFontOptions",
					"type": "InterfaceDoc",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "chars",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the character set to generate</p>"
						},
						{
							"name": "padding",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the padding between glyphs in the atlas</p>"
						},
						{
							"name": "resolution",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the resolution for rendering</p>"
						},
						{
							"name": "textureHeight",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the height of the texture atlas</p>"
						},
						{
							"name": "textureWidth",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the width of the texture atlas</p>"
						}
					]
				},
				{
					"name": "IHitArea",
					"type": "InterfaceDoc",
					"brief": "<p>Interface for classes that represent a hit area.</p>",
					"description": "<p>It is implemented by the following classes:</p>\n<ul>\n<li>{@link PIXI.Circle}</li>\n<li>{@link PIXI.Ellipse}</li>\n<li>{@link PIXI.Polygon}</li>\n<li>{@link PIXI.RoundedRectangle}</li>\n</ul>",
					"members": [
						{
							"name": "contains",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Checks whether the x and y coordinates given are contained within this area</p>",
							"description": ""
						}
					]
				},
				{
					"name": "IInstancedRendererOptions",
					"type": "InterfaceDoc",
					"brief": "<p>This options define how display-objects are rendered by the instanced renderer.</p>",
					"description": "<p>NOTE:</p>\n<ul>\n<li>\n<p>Make sure your instanceBuilder is in the order you want attributes to be packed\nin the same buffer. Also, make sure that floats are aligned at 4-byte boundaries and\nshorts are aligned at 2-byte boundaries.</p>\n</li>\n<li>\n<p>PixiJS Bug: Make sure the first attribute is <strong>not</strong> instanced.</p>\n</li>\n</ul>",
					"members": [
						{
							"name": "geometry",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the geometry style used to render the display-objects</p>"
						},
						{
							"name": "instanceBuilder",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>an object mapping display-object\nproperties holding &quot;instance attributes&quot; from their attribute name.</p>"
						},
						{
							"name": "shader",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the shader used to render display-objects</p>"
						},
						{
							"name": "state",
							"type": "PropertyDoc",
							"access": "public",
							"scope": "instance",
							"brief": "",
							"description": "<p>the WebGL state used to run the shader</p>"
						}
					]
				},
				{
					"name": "IPoint",
					"type": "InterfaceDoc",
					"brief": "",
					"description": "<p>Common interface for points. Both Point and ObservablePoint implement it</p>",
					"members": [
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>X coord</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Y coord</p>"
						},
						{
							"name": "copyFrom",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Copies x and y from the given point</p>"
						},
						{
							"name": "copyTo",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Copies x and y into the given point</p>"
						},
						{
							"name": "equals",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "<p>Returns true if the given point is equal to this point</p>",
							"description": ""
						},
						{
							"name": "set",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Sets the point to a new x and y position.\nIf y is omitted, both x and y will be set to x.</p>"
						}
					]
				},
				{
					"name": "IPointData",
					"type": "InterfaceDoc",
					"brief": "",
					"description": "<p>Common interface for points. Both Point and ObservablePoint implement it</p>",
					"members": [
						{
							"name": "x",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>X coord</p>"
						},
						{
							"name": "y",
							"type": "PropertyDoc",
							"scope": "instance",
							"brief": "",
							"description": "<p>Y coord</p>"
						}
					]
				},
				{
					"name": "IResourcePlugin",
					"type": "InterfaceDoc",
					"brief": "<p>Shape of supported resource plugins</p>",
					"description": ""
				},
				{
					"name": "useDeprecated",
					"type": "FunctionDoc",
					"brief": "",
					"description": "<p>Deprecations (backward compatibilities) are automatically applied for browser bundles\nin the UMD module format. If using Webpack or Rollup, you'll need to apply these\ndeprecations manually by doing something like this:</p>",
					"members": [
						{
							"name": "bitmapFontParser",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "getResourcePath",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "getSvgSize",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "get",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								}
							]
						},
						{
							"name": "parseBitmapFontData",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "spritesheetParser",
							"type": "PropertyDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "addPixiMiddleware",
							"type": "FunctionDoc",
							"scope": "static",
							"brief": "",
							"description": ""
						},
						{
							"name": "textureFrom",
							"type": "FunctionDoc",
							"brief": "",
							"description": ""
						}
					]
				},
				{
					"name": "mapCanvasBlendModesToPixi",
					"type": "FunctionDoc",
					"access": "private",
					"brief": "<p>Maps blend combinations to Canvas.</p>",
					"description": ""
				},
				{
					"name": "mapWebGLBlendModesToPixi",
					"type": "FunctionDoc",
					"access": "private",
					"brief": "<p>Maps gl blend combinations to WebGL.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "PIXI",
			"type": "NSDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "AxisAlignedBounds",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>Rectangle object is an area defined by its position, as indicated by its top-left corner\npoint (x, y) and by its width and its height.</p>",
			"members": [
				{
					"name": "bottom",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>returns the bottom edge of the rectangle</p>",
					"description": ""
				},
				{
					"name": "bottomLeft",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "bottomRight",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "hull",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "left",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>returns the left edge of the rectangle</p>",
					"description": ""
				},
				{
					"name": "right",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>returns the right edge of the rectangle</p>",
					"description": ""
				},
				{
					"name": "top",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>returns the top edge of the rectangle</p>",
					"description": ""
				},
				{
					"name": "topLeft",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "topRight",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "ceil",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Enlarges rectangle that way its corners lie on grid</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a clone of this Rectangle</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "contains",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Checks whether the x and y coordinates given are contained within this Rectangle</p>",
					"description": ""
				},
				{
					"name": "copyFrom",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Copies another rectangle to this one.</p>",
					"description": ""
				},
				{
					"name": "copyTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Copies this rectangle to another one.</p>",
					"description": ""
				},
				{
					"name": "enlarge",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Enlarges this rectangle to include the passed rectangle.</p>",
					"description": ""
				},
				{
					"name": "equals",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Checks whether the given {@link bounds} are equal to this.</p>",
					"description": ""
				},
				{
					"name": "fit",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Fits this rectangle around the passed one.</p>",
					"description": ""
				},
				{
					"name": "isDirty",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "pad",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Pads the rectangle making it grow in all directions.\nIf paddingY is omitted, both paddingX and paddingY will be set to paddingX.</p>"
				},
				{
					"name": "update",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "BasisFile",
			"type": "ClassDoc",
			"brief": "<p>Binding to C++ {@code BasisFile} wrapper class.</p>",
			"description": ""
		},
		{
			"name": "BoundedBufferGeometry",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@code BoundedBufferGeometry} calculates its bounds on lazily via the {@code updateBounds}\nmethod.</p>",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The calculated bounds for this geometry.</p>",
					"description": ""
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				},
				{
					"name": "resetBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Resets the bounds so that they become &quot;unknown&quot;.</p>",
					"description": ""
				},
				{
					"name": "updateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the bounds accordingly to include the given point.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "BoundedGeometry",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@code BoundedGeometry} is an abstraction for a geometry whose bounding box is\nknown in the local space.</p>",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the minimum bounding box of the geometry in its vertex/local reference frame.</p>",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				}
			]
		},
		{
			"name": "BoxGeometry",
			"type": "ClassDoc",
			"brief": "<p>{@code BoxGeometry} represents a quad with a fixed width and height.</p>",
			"description": "",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The calculated bounds for this geometry.</p>",
					"description": ""
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				},
				{
					"name": "resetBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Resets the bounds so that they become &quot;unknown&quot;.</p>",
					"description": ""
				},
				{
					"name": "updateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the bounds accordingly to include the given point.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "BufferInvalidation",
			"type": "ClassDoc",
			"brief": "<p>A buffer invalidation records a region of data that has changed across frames.</p>",
			"description": "",
			"members": [
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clone this object, used for debugging only</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "init",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Initialize the invalidation tracking data.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "BufferInvalidationQueue",
			"type": "ClassDoc",
			"brief": "<p>The buffer invalidation queue manages a singly-linked list of buffer invalidations.</p>",
			"description": "",
			"members": [
				{
					"name": "append",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Appends the invalidation-node to this queue</p>",
					"description": ""
				},
				{
					"name": "append",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Appends an invalidation from offset with the given size.</p>",
					"description": ""
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears this queue, and returns the nodes to {@code BufferInvalidationPool}.</p>",
					"description": ""
				},
				{
					"name": "coalesce",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Coalesces {@code node} and its successor {@code node.next} into one. The successor is released from the\nqueue.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "isEmpty",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "partition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This will repartition the invalidated buffer indices into fewer, larger segments. This is mainly used to avoid\nissuing too many <code>bufferSubData</code> when sparse, small changes occur in the geometry.</p>"
				}
			]
		},
		{
			"name": "BufferPool",
			"type": "ClassDoc",
			"brief": "<p>Pool for any array-like type.</p>",
			"description": "",
			"members": [
				{
					"name": "allocateBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "releaseBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "CanvasTileRenderer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "CircularDoublyLinkedList",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "add",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds {@code node} into this list before {@code nodeAfter}.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "CircularLinkedList",
			"type": "ClassDoc",
			"brief": "<p>An iterable circular linked-list data structure.</p>",
			"description": ""
		},
		{
			"name": "CircularLinkedListIterator",
			"type": "ClassDoc",
			"brief": "<p>Iterator for circular linked-lists</p>",
			"description": "",
			"members": [
				{
					"name": "current",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The last node returned by {@code this.next}.</p>",
					"description": ""
				},
				{
					"name": "done",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Whether the iterator has finished iterating over all elements.</p>",
					"description": ""
				},
				{
					"name": "start",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The first node occurring in this iteration.</p>",
					"description": ""
				},
				{
					"name": "next",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "reset",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Reset the iterator so it can be used again.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "CompositeRectTileLayer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "initialize",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "isModified",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "tileAnimY",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "tileRotate",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "Conic",
			"type": "ClassDoc",
			"access": "public",
			"brief": "<p>Describes a conic section or any quadric curve</p>",
			"description": "<p>A quadric curve can be represented in the form <em>k<sup>2</sup> - lm</em>, where, <em>k</em>, <em>l</em>, <em>m</em>\nare linear functionals. <em>l</em> and <em>m</em> are two lines tangent to the curve, while <em>k</em> is the\nline connecting the two points of tangency.</p>",
			"members": [
				{
					"name": "_dirtyID",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Flags changes in the shape data</p>",
					"description": ""
				},
				{
					"name": "controlPoints",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The control points in design space. The control points allow you to map design space points to the local space\npoints when creating a graphic.</p>\n<p>By default, the conic is a quadratic bezier curve.</p>"
				},
				{
					"name": "k",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The chord connecting the points of tangency on <em>l</em> and <em>m</em>.</p>",
					"description": ""
				},
				{
					"name": "l",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>A line tangent to the curve.</p>",
					"description": ""
				},
				{
					"name": "m",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>A line tangent to the curve.</p>",
					"description": ""
				},
				{
					"name": "createCircle",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Creates a circular conic of the given {@code radius} that is in the bounding box\n(0,0,2_r_,2_r_).</p>\n<p>Implicit form:\n(<em>x</em>/√2 + <em>y</em>/√2 - <em>r</em>/√2)<sup>2</sup> - <em>xy</em> = <em>0</em></p>\n<p>Simplified form:\n(<em>x</em> - <em>r</em>)<sup>2</sup> - (<em>y</em> - <em>r</em>)<sup>2</sup> - r<sup>2</sup> = <em>0</em></p>"
				},
				{
					"name": "createEllipse",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Creates an ellipse with the given major &amp; minor semi-axes that is located in the\nbounding box (0,0,2_a_,2_b_).</p>\n<p>Implicit form:\n(<em>x</em>/<em>a</em> + <em>y</em>/<em>b</em> - 1)<sup>2</sup> - 2_xy_/<em>ab</em> = 0</p>\n<p>Simplified form:\n(<em>x</em>/<em>a</em> - 1)<sup>2</sup> + (<em>y</em>/<em>b</em> -  1)<sup>2</sup> - 1 = 0</p>"
				},
				{
					"name": "createHyperbola",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Creates a hyperbola that opens up and down; since hyperbolas are not closed curves,\nthey do not have a bounding box.</p>\n<p>Implicit form:\n1<sup>2</sup> - (<em>y</em>/<em>b</em> - <em>x</em>/<em>a</em>)(<em>y</em>/<em>b</em> + <em>x</em>/<em>a</em>) = 0</p>\n<p>Simplified form:\n(y/b)<sup>2</sup> - (x/a)<sup>2</sup> = 1</p>"
				},
				{
					"name": "createParabola",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Creates a parabola that opens upward (for <em>a</em> &gt; 0); since parabolas are not closed\ncurves, they do not have a bounding box.</p>\n<p>The standard bezier curve is the parabola <em>x</em><sup>2</sup> - <em>y</em>, with the control\npoints (0,0), (1/2,0), (1,1).</p>\n<p>Equation:\nx<sup>2 - 4_ay_ = 0</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setControlPoints",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set control points in texture space</p>"
				},
				{
					"name": "setk",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sets the equation of the &quot;k&quot; line to <em>ax + by + c = 0</em>.</p>",
					"description": ""
				},
				{
					"name": "setl",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sets the equation of the &quot;l&quot; line to <em>ax + by + c = 0</em>.</p>",
					"description": ""
				},
				{
					"name": "setm",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sets the equation of the line &quot;m&quot; to <em>ax + by + c = 0</em>.</p>",
					"description": ""
				},
				{
					"name": "update",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Flag the shape as dirty after you have modified the data directly.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "ConicDisplay",
			"type": "ClassDoc",
			"brief": "<p>Draws a segment of conic section represented by the equation <em>k</em><sup>2</sup>- <em>lm = 0</em>, where k, l, m are lines.</p>",
			"description": "<p>This display-object shades the inside/outside of a conic section within a mesh.</p>\n<p>A conic curve can be represented in the form: <em>k</em><sup>2</sup> - <em>lm = 0</em>, where k, l, m are lines described in\nthe form <em>ax + by + c = 0</em>. <em>l</em> and <em>m</em> are the tangents to the curve, and <em>k</em> is a chord connecting the points\nof tangency.</p>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_dirtyID",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Flags whether the geometry data needs to be updated.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "_transformID",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The world transform ID last when the geometry was updated.</p>",
					"description": ""
				},
				{
					"name": "_updateID",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Last {@link _dirtyID} when the geometry was updated.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "k",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "l",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "m",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shape",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The conic curve drawn by this graphic.</p>",
					"description": ""
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "uvData",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Texture positions of the vertices.</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>World positions of the vertices</p>",
					"description": ""
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "drawControlPoints",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws the triangle formed by the control points of the shape.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "drawTriangle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draw a triangle defined in texture space transformed into local space. Generally, you would want to draw the triangle\nformed by the shape's control points.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setControlPoints",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the local-space control points of the curve.</p>"
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the transform of the conic</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set the transformation by defining a triangle in design space <em>(a0, b0, c0)</em> mapping to\nthe triangle <em>(a1, b1, c1)</em> in texture space.</p>"
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set the transformation by defining the triangle in design space <em>(ax0, ay0), (bx0, by0), (cx0, cy0)</em>\nmapping to the triangle <em>(ax1, ay1), (bx1, by1), (cx1, cy1)</em> in texture space.</p>"
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateConic",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the geometry data for this conic.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform of the conic, and if changed updates the geometry data.</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "Cull",
			"type": "ClassDoc",
			"access": "public",
			"brief": "<p>Provides a simple, configurable mechanism for culling a subtree of your scene graph.</p>",
			"description": "<p>If your scene graph is not static, culling needs to be done before rendering. You\ncan run it on the <code>prerender</code> event fired by the renderer.</p>",
			"members": [
				{
					"name": "add",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a display-object to the culling list</p>",
					"description": ""
				},
				{
					"name": "addAll",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds all the display-objects to the culling list</p>",
					"description": ""
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the culling list</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "cull",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "cullRecursive",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recursively culls the subtree of {@code displayObject}.</p>",
					"description": ""
				},
				{
					"name": "remove",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes the display-object from the culling list</p>",
					"description": ""
				},
				{
					"name": "removeAll",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all the passed display-objects from the culling list</p>",
					"description": ""
				},
				{
					"name": "uncull",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sets all display-objects to the unculled state.</p>",
					"description": "<p>This happens regardless of whether the culling toggle was set by {@code this.cull} or manually. This\nis why it is recommended to one of <code>visible</code> or <code>renderable</code> for normal use and the other for culling.</p>"
				},
				{
					"name": "uncullRecursive",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recursively unculls the subtree of {@code displayObject}.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "DashedLineStyle",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "alignment",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).</p>",
					"description": ""
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The alpha value used when filling the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "cap",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>Line cap style.</p>",
					"description": ""
				},
				{
					"name": "color",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The hex color value used when coloring the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "dashArray",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The dashing pattern of dashes and gaps to stroke paths.</p>",
					"description": ""
				},
				{
					"name": "dashOffset",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The distance into the dash pattern to start from.</p>",
					"description": ""
				},
				{
					"name": "join",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>Line join style.</p>",
					"description": ""
				},
				{
					"name": "matrix",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The transform aplpied to the texture.</p>",
					"description": ""
				},
				{
					"name": "miterLimit",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>Miter limit.</p>",
					"description": ""
				},
				{
					"name": "native",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>If true the lines will be draw using LINES instead of TRIANGLE_STRIP</p>",
					"description": ""
				},
				{
					"name": "texture",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The texture to be used for the fill.</p>",
					"description": ""
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>If the current fill is visible.</p>",
					"description": ""
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The width (thickness) of any lines drawn.</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroy and don't use after this</p>",
					"description": ""
				},
				{
					"name": "reset",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "DiffBuffer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "data",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The data in the buffer, as a typed array</p>",
					"description": ""
				},
				{
					"name": "_glBuffers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl buffer</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the buffer</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "update",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "DiffGeometry",
			"type": "ClassDoc",
			"brief": "<p>The geometry used by {@link DiffGeometryFactory}</p>",
			"description": "",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "_buffer",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Buffer used for position, color, texture IDs</p>",
					"description": ""
				},
				{
					"name": "_indexBuffer",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Index buffer data</p>",
					"description": ""
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				}
			]
		},
		{
			"name": "DiffGeometryFactory",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_geometryCache",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Cache of the geometries drawn in the last frame.</p>",
					"description": ""
				},
				{
					"name": "_geometryPipeline",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The geometries already drawn this frame.</p>",
					"description": ""
				},
				{
					"name": "_geometryPool",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Batch geometries that can be reused.</p>",
					"description": ""
				},
				{
					"name": "_indexCountProperty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "geometryMerger",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>This lazy getter returns the geometry-merger function. This function\ntakes one argument - the display-object to be appended to the batch -\nand pushes its geometry to the batch geometry.</p>\n<p>You can overwrite this property with a custom geometry-merger function\nif customizing <code>PIXI.brend.BatchGeometryFactory</code>.</p>"
				},
				{
					"name": "append",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Append's the display-object geometry to this batch's geometry. You must override\nthis you need to &quot;modify&quot; the geometry of the display-object before merging into\nthe composite geometry (for example, adding an ID to a special uniform)</p>"
				},
				{
					"name": "build",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "diffCache",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculates the regions different in the cached &amp; updated versions of a buffer. The cache is expected to not be smaller\nthan the updated data.</p>"
				},
				{
					"name": "getAttributeBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "getIndexBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "init",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Ensures this factory has enough space to buffer the given number of vertices\nand indices. This should be called before feeding display-objects from the\nbatch.</p>"
				},
				{
					"name": "postrender",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "release",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>{@code DiffGeometryFactory}</p>",
					"description": ""
				},
				{
					"name": "releaseCache",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Release the geometry cache</p>",
					"description": ""
				},
				{
					"name": "updateCache",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "EdgeLoopIterator",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>Iterator for traversing over the edges forming a loop around a face. It loops in the counterclockwise\ndirection.</p>\n<p>In order to guarantee that each edge is encountered only once, the face's edge list not be modified.</p>\n<p>You can get the shared iterator of a {@code Face}: <code>face[Symbol.iterator]</code></p>",
			"members": [
				{
					"name": "current",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The last half-edge returned by {@code this.next}.</p>",
					"description": ""
				},
				{
					"name": "done",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Whether this iterator has looped over all the edges of {@code this.face}.</p>",
					"description": ""
				},
				{
					"name": "face",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The face this iterator will iterate over.</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "next",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "reset",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Reset this iterator so it can be used from start.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "Face",
			"type": "ClassDoc",
			"brief": "<p>A face is bounded by a loop of edges.</p>",
			"description": "<p>You can use a for..of loop to iterate over the edges looping around this face:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Loops in counterclockwise direction</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> edge <span class=\"hljs-keyword\">of</span> face)\n{\n    assert(edge.leftFace === face);\n}\n</code></pre>",
			"members": [
				{
					"name": "connect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "G",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>Plugin class for <code>renderer.plugins.g</code>. This API provides utilties for managing PixiJS geometries\nand their data. This includes:</p>\n<ul>\n<li>Comparing &amp; merging geometries</li>\n<li>Manipulating data based on the data-type</li>\n<li>Factory for typed-array buffers.</li>\n</ul>",
			"members": [
				{
					"name": "compareStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Compares the geometry styles of two {@code PIXI.Geometry} objects. The style comprises of\nattributes (not their buffers) and instancing flags.</p>"
				},
				{
					"name": "copyBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Copies the elements in {@code src} into {@code dst}.</p>",
					"description": ""
				},
				{
					"name": "copyData",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Copies {@code geom} into the geometry {@code into}.</p>",
					"description": ""
				},
				{
					"name": "returnBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Frees the buffer previously allocated using {@code allocateBuffer}.</p>",
					"description": ""
				},
				{
					"name": "sizeOf",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the size of the {@code PIXI.TYPES} data type in bytes.</p>",
					"description": ""
				},
				{
					"name": "viewOf",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the array-buffer view for the given type.</p>",
					"description": ""
				},
				{
					"name": "allocateBuffer",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Returns a buffer with that can hold {@code byteCapacity} bytes. This uses a shared cache\nof buffers with power-of-two capacities.</p>"
				}
			]
		},
		{
			"name": "GeometryReporter",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "postrender",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "GradientFactory",
			"type": "ClassDoc",
			"brief": "<p>Factory class for generating color-gradient textures.</p>",
			"description": "",
			"members": [
				{
					"name": "createLinearGradient",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Renders a linear-gradient into <code>renderTexture</code> that starts from (x0, y0) and ends at (x1, y1). These\ncoordinates are defined in the <strong>texture's space</strong>. That means only the frame (0, 0, <code>renderTexture.width</code>, <code>renderTexture.height</code>)\nwill be rendered.</p>\n<p>This method can be called inside a render cycle, and will preserve the renderer state. However, the current implementation\ncauses a batch renderer flush.</p>"
				},
				{
					"name": "createRadialGradient",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Renders a radial-gradient into <code>renderTexture</code> that starts at the circle centered at (x0, y0) of radius r0 and\nends at the circle centered at (x1, y1) of radius r1.</p>\n<p>This method can be called inside a render cycle, and will preserve the renderer state. However, the current implementation\ncauses a batch renderer flush.</p>"
				}
			]
		},
		{
			"name": "GraphicsLayer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current fill style.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "geometry",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "line",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current line style.</p>",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Renderer plugin for batching</p>",
					"description": ""
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_fillStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current fill style</p>",
					"description": ""
				},
				{
					"name": "_holeMode",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current hole mode is enabled.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_lineStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current line style</p>",
					"description": ""
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_matrix",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current shape transform matrix.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "batchDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating batches.</p>",
					"description": ""
				},
				{
					"name": "batches",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
					"description": ""
				},
				{
					"name": "batchTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
					"description": ""
				},
				{
					"name": "currentPath",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current path</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Copy of the object vertex data.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "_renderDrawCallDirect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders specific DrawCall</p>",
					"description": ""
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "arc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "arcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				},
				{
					"name": "beginFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
				},
				{
					"name": "beginHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
				},
				{
					"name": "beginTextureFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Begin the texture fill</p>",
					"description": ""
				},
				{
					"name": "bezierCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
					"description": ""
				},
				{
					"name": "clearModify",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
				},
				{
					"name": "closePath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Closes the current path.</p>",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this graphics object</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "drawCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a circle.</p>",
					"description": ""
				},
				{
					"name": "drawEllipse",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an ellipse.</p>",
					"description": ""
				},
				{
					"name": "drawPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a polygon using the given path.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a rectangle shape.</p>",
					"description": ""
				},
				{
					"name": "drawRoundedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
					"description": ""
				},
				{
					"name": "drawShape",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw any shape.</p>",
					"description": ""
				},
				{
					"name": "drawStar",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "endFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
					"description": ""
				},
				{
					"name": "endHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>End adding holes to the last draw shape</p>"
				},
				{
					"name": "generateCanvasTexture",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "isFastRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
				},
				{
					"name": "lineStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
				},
				{
					"name": "lineTextureStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Like line style but support texture for line fill.</p>",
					"description": ""
				},
				{
					"name": "lineTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
				},
				{
					"name": "moveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Moves the current drawing position to x, y.</p>",
					"description": ""
				},
				{
					"name": "quadraticCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setMatrix",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Apply a matrix to the positional data.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
					"description": ""
				},
				{
					"name": "_initCurve",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Initialize the curve</p>",
					"description": ""
				},
				{
					"name": "_populateBatches",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Populating batches for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "_renderBatched",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
					"description": ""
				},
				{
					"name": "_renderDirect",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the graphics direct</p>",
					"description": ""
				},
				{
					"name": "_resolveDirectShader",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Resolves shader for direct rendering</p>",
					"description": ""
				},
				{
					"name": "calculateTints",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
				},
				{
					"name": "finishPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Finish the polygon object.</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "startPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Start a polygon object internally</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "HalfEdge",
			"type": "ClassDoc",
			"brief": "<p>A directed edge from its origin to destination.</p>",
			"description": "<p>{@code HalfEdge} is a node of the following circular linked-lists:</p>\n<ul>\n<li>the list of edges in the whole mesh: {@link HalfEdge#next}</li>\n<li>the list of edges around its left face: {@link HalfEdge#lnext}</li>\n<li>the list of edges directed from its origin vertex: {@link HalfEdge#onext}</li>\n<li>the list of edges directed to its destination vertex: {@link HalfEdge#dnext}</li>\n<li>the list of edges around its right face: {@link HalfEdge#rnext}</li>\n</ul>",
			"members": [
				{
					"name": "dlast",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The last edge sharing {@code this.dst} in the counterclockwise direction.</p>",
					"description": ""
				},
				{
					"name": "dnext",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The next edge sharing {@code this.dst} in the counterclockwise direction.</p>",
					"description": ""
				},
				{
					"name": "dst",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The destination vertex</p>",
					"description": ""
				},
				{
					"name": "leftFace",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The face on the left side of this edge. This edge is oriented counterclockwise to its left face.</p>",
					"description": ""
				},
				{
					"name": "lnext",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The next edge on the left face (pointing counterclockwise direction).</p>",
					"description": "<p>{@code this.lnext}'s origin vertex is this edge's destination vertex.</p>"
				},
				{
					"name": "lprev",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The previous edge on the left face (pointing counterclockwise direction).</p>",
					"description": "<p>{@code this.lprev}'s destination vertex is this edge's origin vertex.</p>"
				},
				{
					"name": "onext",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The next edge sharing {@code this.org} in the counterclockwise direction.</p>",
					"description": ""
				},
				{
					"name": "oprev",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The previous edge sharing {@code this.org} in the counterclockwise direction. It is also\nthe next edge in the clockwise direction.</p>"
				},
				{
					"name": "org",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The origin vertex</p>",
					"description": ""
				},
				{
					"name": "rightFace",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The face on the right side of this edge. This edge is oriented clockwise to its right face.</p>",
					"description": ""
				},
				{
					"name": "rlast",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The next edge on the right face in counterclockwise direction; however, this and {@code this.rlast}\nare directed in the clockwise direction of the right face.</p>\n<p>{@code this.rlast}'s origin vertex is this edge's destination vertex.</p>"
				},
				{
					"name": "rnext",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The next edge on the right face in counterclockwise direction; however, this and {@code this.rnext}\nare directed in the clockwise direction of the right face.</p>\n<p>{@code this.rnext}'s destination vertex is this edge's origin vertex.</p>"
				},
				{
					"name": "twin",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The half-edge directed from {@code this.dst}.</p>",
					"description": ""
				},
				{
					"name": "connect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "IBatchGeometryFactory",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "IGLUniformData",
			"type": "ClassDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "InheritedPaintProvider",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>Inherited paint, used for &lt;use /&gt; elements. The properties used on the inherited paint do not\noverride those on the parent.</p>",
			"members": [
				{
					"name": "dirtyId",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "opacity",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "stroke",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeDashArray",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeDashOffset",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeLineCap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeLineJoin",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeMiterLimit",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "strokeWidth",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Composes a <code>Paint</code> that will inherit properties from the <code>parent</code> if the <code>provider</code> does not\ndefine them.</p>"
				}
			]
		},
		{
			"name": "InstancedRenderer",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@code InstancedRenderer} is an object-renderer for drawing meshes/shapes/display-objects\nthat have a common geometry and some &quot;instanced&quot; attributes.</p>",
			"members": [
				{
					"name": "_instanceBuffer",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance buffer holds all instanced attributes in an interleaved fashion.</p>",
					"description": ""
				},
				{
					"name": "_shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The shader used to draw all instances.</p>",
					"description": ""
				},
				{
					"name": "_state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The WebGL state required for using the shader.</p>",
					"description": ""
				},
				{
					"name": "renderer",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The renderer this manager works for.</p>",
					"description": ""
				},
				{
					"name": "_geometry",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The reference geometry specifying the &quot;attribute style&quot;.</p>",
					"description": ""
				},
				{
					"name": "_instanceAttribSizes",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Object mapping (instanced) attribute IDs to their sizes in bytes.</p>",
					"description": ""
				},
				{
					"name": "_instanceAttribViews",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Object mapping (instanced) attribute IDs to their data type views (i.e. <code>uint32View</code>,\n<code>float32View</code>, <code>uint8View</code>, etc. in <code>PIXI.ViewableBuffer</code>).</p>"
				},
				{
					"name": "_instanceBuilder",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Maps display-object property names holding instanced attribute data to their attribute\nnames.</p>"
				},
				{
					"name": "_instanceSize",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The bytes used per instance/display-object.</p>",
					"description": ""
				},
				{
					"name": "_objectBuffer",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Buffered display-objects</p>",
					"description": ""
				},
				{
					"name": "_objectCount",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The number of display-objects buffered. This is different from the buffer's capacity\n{@code this._objectBuffer.length}.</p>"
				},
				{
					"name": "instanceRendererID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Unique ID for this instance renderer.</p>",
					"description": ""
				},
				{
					"name": "_initInstanceBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Replaces {@code this._geometry} with a new geometry such that each instanced attribute\npoints to the same buffer. Uninstanced attributes refer to their original buffers.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generic destruction method that frees all resources. This\nshould be called by subclasses.</p>"
				},
				{
					"name": "flush",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Flushes/draws all pending display-objects.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "start",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "stop",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
				},
				{
					"name": "_calculateInstanceSizesAndViews",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Returns the no. of bytes used for each instance.</p>",
					"description": ""
				},
				{
					"name": "_getBuffer",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Returns a (cached) buffer that can hold {@code size} bytes.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "InstancedRendererPluginFactory",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "from",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "<p>Returns a plugin wrapping an instanced renderer that can be registered.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "MaskSprite",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>A sprite that does not render anything. It can be used as a mask whose bounds can be updated by adding it\nas a child of the mask-target.</p>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "anchor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
					"description": ""
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the sprite, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' &amp; '_renderCanvas' methods.</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "roundPixels",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "texture",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The texture that the sprite is using</p>",
					"description": ""
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the sprite, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_cachedTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_height",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The height of the sprite (this is initially set by the texture)</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_tintedCanvas",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Cached tinted texture.</p>"
				},
				{
					"name": "_width",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The width of the sprite (this is initially set by the texture)</p>",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "_anchor",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
				},
				{
					"name": "_roundPixels",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal roundPixels field</p>",
					"description": ""
				},
				{
					"name": "_texture",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The texture that the sprite is using</p>",
					"description": ""
				},
				{
					"name": "_tint",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
					"description": ""
				},
				{
					"name": "_tintRGB",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "uvs",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
					"description": ""
				},
				{
					"name": "vertexTrimmedData",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "calculateTrimmedVertices",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this sprite</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys this sprite and optionally its texture and children</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Gets the local bounds of the sprite object.</p>",
					"description": ""
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Updates the bounds of the sprite.</p>",
					"description": ""
				},
				{
					"name": "_onTextureUpdate",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>When the texture is updated, this event will fire to update the scale and frame</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_onAnchorUpdate",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Called when the anchor position updates.</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "Mesh",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "addDegenerateFace",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a degenerate (one-point loop) face and adds it to this mesh.</p>",
					"description": ""
				},
				{
					"name": "addVertex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a vertex to {@code face} by splitting the last edge.</p>",
					"description": ""
				},
				{
					"name": "sharedEdgeIterator",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the shared edge iterator for this mesh. The first edge is a dummy.</p>",
					"description": "<p>CONTRACT: It is expected that the caller does not hold a reference to the iterator after immediate use.</p>"
				},
				{
					"name": "sharedFaceIterator",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the shared face iterator for this mesh. The first face is a dummy.</p>",
					"description": "<p>CONTRACT: It is expected that the caller does not hold a reference to the iterator after immediate use.</p>"
				},
				{
					"name": "sharedVertexIterator",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the shared vertex iterator for this mesh. The first vertex is a dummy.</p>",
					"description": "<p>CONTRACT: It is expected that the caller does not hold a reference to the iterator after immediate use.</p>"
				},
				{
					"name": "validate",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Validates the mesh and checks whether the following invariants hold true:</p>\n<ul>\n<li>{@code eachEdge.next.twin.next === eachEdge}</li>\n</ul>"
				}
			]
		},
		{
			"name": "MultiTextureResource",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "bind",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "upload",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "ObjectPool",
			"type": "ClassDoc",
			"access": "public",
			"brief": "",
			"description": "<p><code>ObjectPool</code> provides the framework necessary for pooling minus the object instantiation\nmethod. You can use <code>ObjectPoolFactory</code> for objects that can be created using a default\nconstructor.</p>",
			"members": [
				{
					"name": "_freeCount",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Number of objects in the pool. This is less than or equal to <code>_pool.length</code>.</p>",
					"description": ""
				},
				{
					"name": "_freeList",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Supply pool of objects that can be used to immediately lend.</p>",
					"description": ""
				},
				{
					"name": "capacity",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The number of objects that can be stored in the pool without allocating more space.</p>",
					"description": ""
				},
				{
					"name": "allocate",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Obtains an instance from this pool.</p>",
					"description": ""
				},
				{
					"name": "allocateArray",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Obtains an array of instances from this pool. This is faster than allocating multiple objects\nseparately from this pool.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "create",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Instantiates a new object of type <code>T</code>.</p>",
					"description": ""
				},
				{
					"name": "limit",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Dereferences objects for the GC to collect and brings the pool size down to <code>count</code>.</p>",
					"description": ""
				},
				{
					"name": "release",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the object to the pool.</p>",
					"description": ""
				},
				{
					"name": "releaseArray",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Releases all of the objects in the passed array. These need not be allocated using <code>allocateArray</code>, however.</p>",
					"description": ""
				},
				{
					"name": "reserve",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Preallocates objects so that the pool size is at least <code>count</code>.</p>",
					"description": ""
				},
				{
					"name": "startGC",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Install the GC on the shared ticker.</p>",
					"description": ""
				},
				{
					"name": "stopGC",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Stops running the GC on the pool.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "ObjectPoolFactory",
			"type": "ClassDoc",
			"access": "public",
			"brief": "",
			"description": "<p>Factory for creating pools of objects with default constructors. It will store the pool of\na given type and reuse it on further builds.</p>",
			"members": [
				{
					"name": "build",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "",
					"members": [
						{
							"name": "DefaultObjectPool",
							"type": "ClassDoc",
							"brief": "",
							"description": "",
							"members": [
								{
									"name": "_freeCount",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Number of objects in the pool. This is less than or equal to <code>_pool.length</code>.</p>",
									"description": ""
								},
								{
									"name": "_freeList",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>Supply pool of objects that can be used to immediately lend.</p>",
									"description": ""
								},
								{
									"name": "capacity",
									"type": "PropertyDoc",
									"access": "protected",
									"scope": "instance",
									"brief": "<p>The number of objects that can be stored in the pool without allocating more space.</p>",
									"description": ""
								},
								{
									"name": "allocate",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Obtains an instance from this pool.</p>",
									"description": ""
								},
								{
									"name": "allocateArray",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": "<p>Obtains an array of instances from this pool. This is faster than allocating multiple objects\nseparately from this pool.</p>"
								},
								{
									"name": "create",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "",
									"description": ""
								},
								{
									"name": "limit",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Dereferences objects for the GC to collect and brings the pool size down to <code>count</code>.</p>",
									"description": ""
								},
								{
									"name": "release",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Returns the object to the pool.</p>",
									"description": ""
								},
								{
									"name": "releaseArray",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Releases all of the objects in the passed array. These need not be allocated using <code>allocateArray</code>, however.</p>",
									"description": ""
								},
								{
									"name": "reserve",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Preallocates objects so that the pool size is at least <code>count</code>.</p>",
									"description": ""
								},
								{
									"name": "startGC",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Install the GC on the shared ticker.</p>",
									"description": ""
								},
								{
									"name": "stopGC",
									"type": "MethodDoc",
									"scope": "instance",
									"brief": "<p>Stops running the GC on the pool.</p>",
									"description": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "OooRenderer",
			"type": "ClassDoc",
			"access": "public",
			"brief": "<p>The out-of-order rendering pipeline</p>",
			"description": "",
			"members": [
				{
					"name": "batchList",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The list of batches created for the buffered objects</p>",
					"description": ""
				},
				{
					"name": "pluginProvider",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Provides the pipeline used to render an object. By default, the ooo-renderer will use the <code>pluginName</code> property\nto determine the pipeline.</p>"
				},
				{
					"name": "renderer",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The renderer this manager works for.</p>",
					"description": ""
				},
				{
					"name": "spatialHash",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>2D spatial hash of the buffered display-objects. This updated on each render call on this object-renderer.</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generic destruction method that frees all resources. This\nshould be called by subclasses.</p>"
				},
				{
					"name": "flush",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "start",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "stop",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
				}
			]
		},
		{
			"name": "OooRendererPluginFactory",
			"type": "ClassDoc",
			"brief": "<p>Plugin factory for the out-of-order pipeline</p>",
			"description": ""
		},
		{
			"name": "OrientedBounds",
			"type": "ClassDoc",
			"brief": "<p>An oriented bounding box is a rotated rectangle.</p>",
			"description": "<p>An oriented bounding box is modelled by rotating its (axis-aligned) {@link OrientedBounds#innerBounds}\nby an angle {@link OrientedBounds#angle} around its center. The center of an oriented bounding box and\nits axis-aligned inner-bounds coincide.</p>",
			"members": [
				{
					"name": "bottomLeft",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bottom-left corner of this bounding box. The returned instance should not be modified directly.</p>",
					"description": ""
				},
				{
					"name": "bottomRight",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bottom-right corner of this bounding box. The returned instance should not be modified directly.</p>",
					"description": ""
				},
				{
					"name": "center",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The center of this bounding box.</p>",
					"description": "<p>The center of this and {@code this.innerBounds} will always coincide.</p>"
				},
				{
					"name": "hull",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The four-corners of this bounding, in clockwise order starting from the top-left.</p>",
					"description": ""
				},
				{
					"name": "innerBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The unrotated version of this bounding box.</p>",
					"description": ""
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The angle, in radians, by which this bounding box is tilted.</p>",
					"description": ""
				},
				{
					"name": "topLeft",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The top-left corner of this bounding box. The returned instance should not be modified directly.</p>",
					"description": ""
				},
				{
					"name": "topRight",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The top-right corner of this bounding box. The returned instance should not be modified directly.</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "contains",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Whether this bounding box contains the given point</p>",
					"description": ""
				},
				{
					"name": "copyFrom",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Copies {@code bounds} into this instance.</p>",
					"description": ""
				},
				{
					"name": "equals",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Checks whether the given {@code bounds} are equal to this.</p>",
					"description": ""
				},
				{
					"name": "isDirty",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Whether any internal state needs to be recalculated.</p>",
					"description": ""
				},
				{
					"name": "update",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This will recalculate the center, orientation matrix, and the hull vertices. It should be called only if\n{@code this.isDirty} returns true.</p>"
				},
				{
					"name": "updateCenter",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>This will translate {@link this.innerBounds} after {@link this.center} is changed to ensure consistency.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "PaintProvider",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>Provides the <code>Paint</code> for an <code>SVGElement</code>. It will also respond to changes in the attributes of the element\n(not implemented).</p>",
			"members": [
				{
					"name": "parseColor",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Parses the color attribute into an RGBA hexadecimal equivalent, if encoded. If the <code>colorString</code> is <code>none</code> or\nis a <code>url(#id)</code> reference, it is returned as is.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "PaintServer",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>[Paint Servers]{@link https://svgwg.org/svg-next/pservers.html} are implemented as textures. This class is a lazy\nwrapper around paint textures, which can only be generated using the <code>renderer</code> drawing to the screen.</p>",
			"members": [
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a <code>PaintServer</code> wrapper.</p>",
					"description": ""
				},
				{
					"name": "createColorStops",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Extracts the color-stops from the children of a <code>SVGGradientElement</code>.</p>",
					"description": ""
				},
				{
					"name": "linearGradient",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders <code>this.paintServer</code> as a <code>SVGLinearGradientElement</code>.</p>",
					"description": ""
				},
				{
					"name": "radialGradient",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders <code>this.paintServer</code> as a <code>SVGRadialGradientElement</code>.</p>",
					"description": ""
				},
				{
					"name": "resolvePaint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Ensures the paint texture is updated for the renderer's WebGL context. This should be called before using the\npaint texture to render anything.</p>"
				},
				{
					"name": "resolvePaintDimensions",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculates the optimal texture dimensions for the paint texture, given the bounding box of the\nobject applying it. The paint texture is resized accordingly.</p>\n<p>If the paint texture is sized smaller than the bounding box, then it is expected that it will\nbe scaled up to fit it.</p>"
				},
				{
					"name": "updatePaint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the paint texture using the renderer immediately.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "PlaneGeometry",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "_updateId",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Dirty flag to limit update calls on Mesh. For example,\nlimiting updates on a single Mesh instance with a shared Geometry\nwithin the render loop.</p>"
				},
				{
					"name": "vertexDirtyId",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>If the vertex position is updated.</p>"
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				},
				{
					"name": "build",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Refreshes plane coordinates</p>"
				}
			]
		},
		{
			"name": "ProgramTemplate",
			"type": "ClassDoc",
			"access": "public",
			"brief": "<p>Helper class to create and manage a program template.</p>",
			"description": "",
			"members": [
				{
					"name": "fragmentMacroData",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The macros used in the fragment shader</p>",
					"description": ""
				},
				{
					"name": "fragmentTemplateSrc",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The fragment shader template</p>",
					"description": ""
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The name for generated programs</p>",
					"description": ""
				},
				{
					"name": "programCache",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The cache of generated programs for each passed macro value.</p>",
					"description": ""
				},
				{
					"name": "vertexMacroData",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The macros used in the vertex shader</p>",
					"description": ""
				},
				{
					"name": "vertexTemplateSrc",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The vertex shader template</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "extractData",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Extracts the macros used in the template source.</p>",
					"description": ""
				},
				{
					"name": "generateProgram",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Generates a shader program from this template and passed macro-data.</p>",
					"description": ""
				},
				{
					"name": "processData",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Evaluates the macros in the template and generates the shader's source.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "RectTileLayer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "addFrame",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "initialize",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "isModified",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderCanvasCore",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "tileAnimY",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "tileRotate",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "RectTileShader",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "program",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Program that the shader uses</p>",
					"description": ""
				},
				{
					"name": "uniforms",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Shader uniform values, shortcut for <code>uniformGroup.uniforms</code></p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "ShaderPreprocessor",
			"type": "ClassDoc",
			"access": "public",
			"brief": "",
			"description": "<p>Provides a high-level API to manage program template and generate shaders by passing macro data\nfor the shader templates.</p>",
			"members": [
				{
					"name": "from",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Creates a program template for given shader template sources. It will return a memoized instance if\nthe same sources are used together twice.</p>"
				},
				{
					"name": "generateShader",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "ShapeGeometry",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@code ShapeGeometry} is a semantic class that represents a generic shape geometry with the\nfollowing attribute(s):</p>\n<ul>\n<li><code>(vec2) aVertexPosition</code>: the local-space coordinates of the geometry vertices</li>\n<li>(optional) <code>(vec2) aTextureCoord</code>: the mapped texture coordinates for each vertex</li>\n</ul>",
			"members": [
				{
					"name": "instanceCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Number of instances in this geometry, pass it to <code>GeometrySystem.draw()</code></p>"
				},
				{
					"name": "refCount",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Count of existing (not destroyed) meshes that reference this geometry</p>"
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The calculated bounds for this geometry.</p>",
					"description": ""
				},
				{
					"name": "glVertexArrayObjects",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A map of renderer IDs to webgl VAOs</p>",
					"description": ""
				},
				{
					"name": "addAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an attribute to the geometry\nNote: <code>stride</code> and <code>start</code> should be <code>undefined</code> if you dont know them, not 0!</p>"
				},
				{
					"name": "addIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Adds an index buffer to the geometry\nThe index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.</p>"
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns a clone of the geometry</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the geometry.</p>",
					"description": ""
				},
				{
					"name": "dispose",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>disposes WebGL resources that are connected to this geometry</p>",
					"description": ""
				},
				{
					"name": "getAttribute",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested attribute</p>",
					"description": ""
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "getBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the requested buffer</p>",
					"description": ""
				},
				{
					"name": "getIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>returns the index buffer</p>",
					"description": ""
				},
				{
					"name": "interleave",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>this function modifies the structure so that all current attributes become interleaved into a single buffer\nThis can be useful if your model remains static as it offers a little performance boost</p>"
				},
				{
					"name": "resetBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Resets the bounds so that they become &quot;unknown&quot;.</p>",
					"description": ""
				},
				{
					"name": "updateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the bounds accordingly to include the given point.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGGraphicsNode",
			"type": "ClassDoc",
			"brief": "<p>This node can be used to directly embed the following elements:</p>",
			"description": "<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>Element</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVGGElement</td>\n<td>&lt;g /&gt;</td>\n</tr>\n<tr>\n<td>SVGCircleElement</td>\n<td>&lt;circle /&gt;</td>\n</tr>\n<tr>\n<td>SVGLineElement</td>\n<td>&lt;line /&gt;</td>\n</tr>\n<tr>\n<td>SVGPolylineElement</td>\n<td>&lt;polyline /&gt;</td>\n</tr>\n<tr>\n<td>SVGPolygonElement</td>\n<td>&lt;polygon /&gt;</td>\n</tr>\n<tr>\n<td>SVGRectElement</td>\n<td>&lt;rect /&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>It also provides an implementation for dashed stroking, by adding the <code>dashArray</code> and <code>dashOffset</code> properties\nto <code>LineStyle</code>.</p>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current fill style.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "geometry",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "line",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current line style.</p>",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Renderer plugin for batching</p>",
					"description": ""
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_fillStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current fill style</p>",
					"description": ""
				},
				{
					"name": "_holeMode",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current hole mode is enabled.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_lineStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current line style</p>",
					"description": ""
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_matrix",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current shape transform matrix.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "batchDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating batches.</p>",
					"description": ""
				},
				{
					"name": "batches",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
					"description": ""
				},
				{
					"name": "batchTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
					"description": ""
				},
				{
					"name": "currentPath",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current path</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Copy of the object vertex data.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "_renderDrawCallDirect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders specific DrawCall</p>",
					"description": ""
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "arc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "arcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				},
				{
					"name": "beginFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
				},
				{
					"name": "beginHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
				},
				{
					"name": "beginTextureFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Begin the texture fill</p>",
					"description": ""
				},
				{
					"name": "bezierCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
				},
				{
					"name": "closePath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Closes the current path.</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this graphics object</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "drawCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a circle.</p>",
					"description": ""
				},
				{
					"name": "drawEllipse",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an ellipse.</p>",
					"description": ""
				},
				{
					"name": "drawPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a polygon using the given path.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a rectangle shape.</p>",
					"description": ""
				},
				{
					"name": "drawRoundedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
					"description": ""
				},
				{
					"name": "drawShape",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw any shape.</p>",
					"description": ""
				},
				{
					"name": "drawStar",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
					"description": ""
				},
				{
					"name": "ellipticArc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc.</p>",
					"description": ""
				},
				{
					"name": "ellipticArcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc to the specified point.</p>",
					"description": "<p>If rx = 0 or ry = 0, then a line is drawn. If the radii provided are too small to draw the arc, then\nthey are scaled up appropriately.</p>"
				},
				{
					"name": "embedCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGCircleElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedLine",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGLineElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolygonElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolyline",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolylineElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGRectElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "endFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
					"description": ""
				},
				{
					"name": "endHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>End adding holes to the last draw shape</p>"
				},
				{
					"name": "generateCanvasTexture",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "isFastRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
				},
				{
					"name": "lineStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
				},
				{
					"name": "lineTextureStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "lineTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
				},
				{
					"name": "moveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Moves the current drawing position to x, y.</p>",
					"description": ""
				},
				{
					"name": "quadraticCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setMatrix",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Apply a matrix to the positional data.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
					"description": ""
				},
				{
					"name": "_initCurve",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Initialize the curve</p>",
					"description": ""
				},
				{
					"name": "_populateBatches",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Populating batches for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "_renderBatched",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
					"description": ""
				},
				{
					"name": "_renderDirect",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the graphics direct</p>",
					"description": ""
				},
				{
					"name": "_resolveDirectShader",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Resolves shader for direct rendering</p>",
					"description": ""
				},
				{
					"name": "calculateTints",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
				},
				{
					"name": "finishPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Finish the polygon object.</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "startPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Start a polygon object internally</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGImageNode",
			"type": "ClassDoc",
			"brief": "<p>Draws SVG &lt;image /&gt; elements.</p>",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current fill style.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "geometry",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "line",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current line style.</p>",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Renderer plugin for batching</p>",
					"description": ""
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_canvas",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The canvas used into which the <code>SVGImageElement</code> is drawn. This is because WebGL does not support\nusing <code>SVGImageElement</code> as an <code>ImageSource</code> for textures.</p>"
				},
				{
					"name": "_context",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The Canvas 2D context for <code>this._canvas</code>.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_fillStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current fill style</p>",
					"description": ""
				},
				{
					"name": "_holeMode",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current hole mode is enabled.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_lineStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current line style</p>",
					"description": ""
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_matrix",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current shape transform matrix.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_texture",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A texture backed by <code>this._canvas</code>.</p>",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "batchDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating batches.</p>",
					"description": ""
				},
				{
					"name": "batches",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
					"description": ""
				},
				{
					"name": "batchTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
					"description": ""
				},
				{
					"name": "currentPath",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current path</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Copy of the object vertex data.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "_renderDrawCallDirect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders specific DrawCall</p>",
					"description": ""
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "arc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "arcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				},
				{
					"name": "beginFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
				},
				{
					"name": "beginHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
				},
				{
					"name": "beginTextureFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Begin the texture fill</p>",
					"description": ""
				},
				{
					"name": "bezierCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
				},
				{
					"name": "closePath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Closes the current path.</p>",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this graphics object</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "drawCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a circle.</p>",
					"description": ""
				},
				{
					"name": "drawEllipse",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an ellipse.</p>",
					"description": ""
				},
				{
					"name": "drawPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a polygon using the given path.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a rectangle shape.</p>",
					"description": ""
				},
				{
					"name": "drawRoundedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
					"description": ""
				},
				{
					"name": "drawShape",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw any shape.</p>",
					"description": ""
				},
				{
					"name": "drawStar",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
					"description": ""
				},
				{
					"name": "ellipticArc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc.</p>",
					"description": ""
				},
				{
					"name": "ellipticArcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc to the specified point.</p>",
					"description": "<p>If rx = 0 or ry = 0, then a line is drawn. If the radii provided are too small to draw the arc, then\nthey are scaled up appropriately.</p>"
				},
				{
					"name": "embedCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGCircleElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedLine",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGLineElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolygonElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolyline",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolylineElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGRectElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "endFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
					"description": ""
				},
				{
					"name": "endHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>End adding holes to the last draw shape</p>"
				},
				{
					"name": "generateCanvasTexture",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "isFastRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
				},
				{
					"name": "lineStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
				},
				{
					"name": "lineTextureStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "lineTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
				},
				{
					"name": "moveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Moves the current drawing position to x, y.</p>",
					"description": ""
				},
				{
					"name": "quadraticCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setMatrix",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Apply a matrix to the positional data.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
					"description": ""
				},
				{
					"name": "_initCurve",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Initialize the curve</p>",
					"description": ""
				},
				{
					"name": "_populateBatches",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Populating batches for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "_renderBatched",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
					"description": ""
				},
				{
					"name": "_renderDirect",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the graphics direct</p>",
					"description": ""
				},
				{
					"name": "_resolveDirectShader",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Resolves shader for direct rendering</p>",
					"description": ""
				},
				{
					"name": "calculateTints",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
				},
				{
					"name": "finishPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Finish the polygon object.</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "startPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Start a polygon object internally</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGPathNode",
			"type": "ClassDoc",
			"brief": "<p>Draws SVG &lt;path /&gt; elements.</p>",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current fill style.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "geometry",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "line",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current line style.</p>",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Renderer plugin for batching</p>",
					"description": ""
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_fillStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current fill style</p>",
					"description": ""
				},
				{
					"name": "_holeMode",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current hole mode is enabled.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_lineStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current line style</p>",
					"description": ""
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_matrix",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current shape transform matrix.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "batchDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating batches.</p>",
					"description": ""
				},
				{
					"name": "batches",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
					"description": ""
				},
				{
					"name": "batchTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
					"description": ""
				},
				{
					"name": "currentPath",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current path</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Copy of the object vertex data.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "_renderDrawCallDirect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders specific DrawCall</p>",
					"description": ""
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "arc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "arcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				},
				{
					"name": "beginFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
				},
				{
					"name": "beginHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
				},
				{
					"name": "beginTextureFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Begin the texture fill</p>",
					"description": ""
				},
				{
					"name": "bezierCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
				},
				{
					"name": "closePath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Closes the current path.</p>",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this graphics object</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "drawCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a circle.</p>",
					"description": ""
				},
				{
					"name": "drawEllipse",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an ellipse.</p>",
					"description": ""
				},
				{
					"name": "drawPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a polygon using the given path.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a rectangle shape.</p>",
					"description": ""
				},
				{
					"name": "drawRoundedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
					"description": ""
				},
				{
					"name": "drawShape",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw any shape.</p>",
					"description": ""
				},
				{
					"name": "drawStar",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
					"description": ""
				},
				{
					"name": "ellipticArc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc.</p>",
					"description": ""
				},
				{
					"name": "ellipticArcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an elliptical arc to the specified point.</p>",
					"description": "<p>If rx = 0 or ry = 0, then a line is drawn. If the radii provided are too small to draw the arc, then\nthey are scaled up appropriately.</p>"
				},
				{
					"name": "embedCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGCircleElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedLine",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGLineElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPathElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolygonElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedPolyline",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGPolylineElement</code> element into this node.</p>",
					"description": ""
				},
				{
					"name": "embedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds the <code>SVGRectElement</code> into this node.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "endFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
					"description": ""
				},
				{
					"name": "endHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>End adding holes to the last draw shape</p>"
				},
				{
					"name": "generateCanvasTexture",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "isFastRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
				},
				{
					"name": "lineStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
				},
				{
					"name": "lineTextureStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "lineTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
				},
				{
					"name": "moveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Moves the current drawing position to x, y.</p>",
					"description": ""
				},
				{
					"name": "quadraticCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setMatrix",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Apply a matrix to the positional data.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
					"description": ""
				},
				{
					"name": "_initCurve",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Initialize the curve</p>",
					"description": ""
				},
				{
					"name": "_populateBatches",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Populating batches for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "_renderBatched",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
					"description": ""
				},
				{
					"name": "_renderDirect",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the graphics direct</p>",
					"description": ""
				},
				{
					"name": "_resolveDirectShader",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Resolves shader for direct rendering</p>",
					"description": ""
				},
				{
					"name": "calculateTints",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
				},
				{
					"name": "finishPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Finish the polygon object.</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "startPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Start a polygon object internally</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGScene",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@link SVGScene} can be used to build an interactive viewer for scalable vector graphics images. You must specify the size\nof the svg viewer.</p>\n<h2>SVG Scene Graph</h2>\n<p>SVGScene has an internal, disconnected scene graph that is optimized for lazy updates. It will listen to the following\nevents fired by a node:</p>\n<ul>\n<li><code>nodetransformdirty</code>: This will invalidate the transform calculations.</li>\n</ul>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "content",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The SVG image content being rendered by the scene.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The height at which the SVG scene is being rendered. By default, this is the viewbox height specified by\nthe root element.</p>"
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "renderServers",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Display objects that don't render to the screen, but are required to update before the rendering\nnodes, e.g. mask sprites.</p>"
				},
				{
					"name": "root",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The root display object of the scene.</p>",
					"description": ""
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The width at which the SVG scene is being rendered. By default, this is the viewbox width specified by\nthe root element.</p>"
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_cull",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>This is used to cull the SVG scene graph before rendering.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_height",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The height of the rendered scene in local space.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_transformDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags whether any transform is dirty in the SVG scene graph.</p>",
					"description": ""
				},
				{
					"name": "_width",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The width of the rendered scene in local space.</p>",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "_elementToMask",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Maps <code>SVGMaskElement</code> elements to their nodes. These are not added to the scene graph directly and are\nonly referenced as a <code>mask</code>.</p>"
				},
				{
					"name": "_elementToPaint",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Maps content elements to their paint. These paints do not inherit from their parent element. You must\ncompose an {@link InheritedPaintProvider} manually.</p>"
				},
				{
					"name": "onNodeTransformDirty",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Handles <code>nodetransformdirty</code> events fired by nodes. It will set {@link this._transformDirty} to true.</p>",
					"description": "<p>This will also emit <code>transformdirty</code>.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculates the bounds of this scene, which is defined by the set <code>width</code> and <code>height</code>. The contents\nof this scene are scaled to fit these bounds, and don't affect them whatsoever.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "createMask",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a lazy luminance mask for the <code>SVGMaskElement</code> or its rendering node.</p>",
					"description": ""
				},
				{
					"name": "createNode",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a display object that implements the corresponding <code>embed*</code> method for the given node.</p>",
					"description": ""
				},
				{
					"name": "createPaint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a <code>Paint</code> object for the given element. This should only be used when sharing the <code>Paint</code>\nis not desired; otherwise, use {@link SVGScene.queryPaint}.</p>\n<p>This will return <code>null</code> if the passed element is not an instance of <code>SVGElement</code>.</p>"
				},
				{
					"name": "createPaintServer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Creates a lazy paint texture for the paint server.</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Base destroy method for generic display objects. This will automatically\nremove the display object from its parent Container as well as remove\nall current event listeners and internal references. Do not use a DisplayObject\nafter calling <code>destroy()</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "embedIntoNode",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds a content <code>element</code> into the rendering <code>node</code>.</p>",
					"description": "<p>This is <strong>not</strong> a stable API.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": ""
				},
				{
					"name": "parseReference",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Parses the internal URL reference into a selector (that can be used to find the\nreferenced element using <code>this.content.querySelector</code>).</p>"
				},
				{
					"name": "populateScene",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Populates the entire SVG scene. This should only be called once after the {@link this.content} has been set.</p>",
					"description": ""
				},
				{
					"name": "populateSceneRecursive",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recursively populates a subscene graph that embeds {@code element}. The root of the subscene is returned.</p>",
					"description": ""
				},
				{
					"name": "queryInheritedPaint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns an (uncached) inherited paint of a content element.</p>",
					"description": ""
				},
				{
					"name": "queryMask",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the rendering node for a mask.</p>",
					"description": ""
				},
				{
					"name": "queryPaint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Returns the cached paint of a content element. The returned paint will not account for any paint\nattributes inherited from ancestor elements.</p>"
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGTextEngineImpl",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p><code>SVGTextEngineImpl</code> is the default implementation for {@link SVGTextEngine}. It is inspired by {@link PIXI.Text} that\nis provided by @pixi/text. It uses a &lt;canvas /&gt; to draw and cache the text. This may cause blurring issues when\nthe SVG is viewed at highly zoomed-in scales because it is rasterized.</p>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "anchor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\nand passed to the constructor.</p>\n<p>The default is <code>(0,0)</code>, this means the sprite's origin is the top left.</p>\n<p>Setting the anchor to <code>(0.5,0.5)</code> means the sprite's origin is centered.</p>\n<p>Setting the anchor to <code>(1,1)</code> would mean the sprite's origin point will be the bottom right corner.</p>\n<p>If you pass only single parameter, it will set both x and y to the same value as shown in the example below.</p>"
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The blend mode to be applied to the sprite. Apply a value of <code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.</p>",
					"description": ""
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the sprite, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Plugin that is responsible for rendering this element.\nAllows to customize the rendering process without overriding '_render' &amp; '_renderCanvas' methods.</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "roundPixels",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\nAdvantages can include sharper image quality (like text) and faster rendering on canvas.\nThe main disadvantage is movement of objects may appear less smooth.\nTo set the global default, change {@link PIXI.settings.ROUND_PIXELS}</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "texture",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The texture that the sprite is using</p>",
					"description": ""
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to the sprite. This is a hex value.\nA value of 0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the sprite, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_cachedTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Cached tint value so we can tell when the tint is changed.\nValue is used for 2d CanvasRenderer.</p>"
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_height",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The height of the sprite (this is initially set by the texture)</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_tintedCanvas",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Cached tinted texture.</p>"
				},
				{
					"name": "_width",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The width of the sprite (this is initially set by the texture)</p>",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "_anchor",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>The anchor point defines the normalized coordinates\nin the texture that map to the position of this\nsprite.</p>\n<p>By default, this is <code>(0,0)</code> (or <code>texture.defaultAnchor</code>\nif you have modified that), which means the position\n<code>(x,y)</code> of this <code>Sprite</code> will be the top-left corner.</p>\n<p>Note: Updating <code>texture.defaultAnchor</code> after\nconstructing a <code>Sprite</code> does <em>not</em> update its anchor.</p>\n<p>{@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}</p>"
				},
				{
					"name": "_roundPixels",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal roundPixels field</p>",
					"description": ""
				},
				{
					"name": "_texture",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The texture that the sprite is using</p>",
					"description": ""
				},
				{
					"name": "_tint",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</p>",
					"description": ""
				},
				{
					"name": "_tintRGB",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "uvs",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>this is used to store the uvs data of the sprite, assigned at the same time\nas the vertexData in calculateVertices()</p>"
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>this is used to store the vertex data of the sprite (basically a quad)</p>",
					"description": ""
				},
				{
					"name": "vertexTrimmedData",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>This is used to calculate the bounds of the object IF it is a trimmed sprite</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "calculateTrimmedVertices",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\nThis is used to ensure that the true width and height of a trimmed texture is respected</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>calculates worldTransform * vertices, store it in vertexData</p>",
					"description": ""
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this sprite</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys this sprite and optionally its texture and children</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Gets the local bounds of the sprite object.</p>",
					"description": ""
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateText",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Updates the bounds of the sprite.</p>",
					"description": ""
				},
				{
					"name": "_onTextureUpdate",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>When the texture is updated, this event will fire to update the scale and frame</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_onAnchorUpdate",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Called when the anchor position updates.</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGTextNode",
			"type": "ClassDoc",
			"brief": "<p>Draws SVG &lt;text /&gt; elements.</p>",
			"description": "",
			"members": [
				{
					"name": "defaultEngine",
					"type": "PropertyDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>The SVG text rendering engine to be used by default in <code>SVGTextNode</code>. This API is not stable and\ncan change anytime.</p>"
				},
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "engine",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>An instance of a SVG text engine used to layout and render text.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "embedText",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Embeds a <code>SVGTextElement</code> in this node.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "SVGUseNode",
			"type": "ClassDoc",
			"brief": "<p>Container for rendering SVG &lt;use /&gt; elements.</p>",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "ref",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The node that renders the element referenced by a &lt;element /&gt; element.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "TemporaryDisplayObject",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the display object.</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Base destroy method for generic display objects. This will automatically\nremove the display object from its parent Container as well as remove\nall current event listeners and internal references. Do not use a DisplayObject\nafter calling <code>destroy()</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the object transform for rendering.</p>",
					"description": "<p>TODO - Optimization pass!</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "TileRenderer",
			"type": "ClassDoc",
			"brief": "<p>Renderer for rectangle tiles.</p>",
			"description": "",
			"members": [
				{
					"name": "renderer",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The renderer this manager works for.</p>",
					"description": ""
				},
				{
					"name": "bindTextures",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "bindTexturesWithoutRT",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "checkIndexBuffer",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "createVb",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "flush",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Stub method that should be used to empty the current\nbatch by rendering objects now.</p>"
				},
				{
					"name": "getShader",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "initBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Keeps the object to render. It doesn't have to be\nrendered immediately.</p>"
				},
				{
					"name": "start",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "stop",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Stops the renderer. It should free up any state and\nbecome dormant.</p>"
				}
			]
		},
		{
			"name": "Transformer",
			"type": "ClassDoc",
			"brief": "",
			"description": "<p>{@code Transformer} provides an interactive interface for editing the transforms in a group. It supports translating,\nscaling, rotating, and skewing display-objects both through interaction and code.</p>\n<p>A transformer operates in world-space, and it is best to not position, scale, rotate, or skew one. If you do so, the\nwireframe itself will not distort (i.e. will adapt <em>against</em> your transforms). However, the wireframe may become\nthinner/thicker and the handles will scale &amp; rotate. For example, setting <code>transformer.scale.set(2)</code> will make the handles\ntwice as big, but will not scale the wireframe (assuming the display-object group itself has not been\nscaled up).</p>\n<p>To enable scaling via dragging the edges of the wireframe, set <code>boxScalingEnabled</code> to <code>true</code>.</p>\n<p>NOTE: The transformer needs to capture all interaction events that would otherwise go to the display-objects in the\ngroup. Hence, it must be placed after them in the scene graph.</p>",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "_skewX",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The horizontal skew value. Rotating the group by 𝜽 will also change this value by 𝜽.</p>",
					"description": ""
				},
				{
					"name": "_skewY",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The vertical skew value. Rotating the group by 𝜽 will also change this value by 𝜽.</p>",
					"description": ""
				},
				{
					"name": "_transformType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The current type of transform being applied by the user.</p>",
					"description": ""
				},
				{
					"name": "_wireframeStyle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The wireframe style applied on the transformer</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "boxRotationTolerance",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The thickness of the box rotation area</p>",
					"description": ""
				},
				{
					"name": "boxScalingTolerance",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The padding around the bounding-box to capture dragging on the edges.</p>",
					"description": ""
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "centeredScaling",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will prevent the wireframe's center from shifting on scaling.</p>",
					"description": ""
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "commitGroup",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This is called after the user finishes dragging a handle. If {@link this.transientGroupTilt} is enabled, it will\nreset the rotation of this group (if more than one display-object is grouped).</p>"
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "enabledHandles",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The list of enabled handles, if applied manually.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "group",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The group of display-objects under transformation.</p>",
					"description": ""
				},
				{
					"name": "handleAnchors",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>Positions of the various handles</p>",
					"description": ""
				},
				{
					"name": "handleStyle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The currently applied handle style. If you have edited the transformer handles directly, this may be inaccurate.</p>",
					"description": ""
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "projectionTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This is used when the display-object group are rendered through a projection transformation (i.e. are disconnected\nfrom the transformer in the scene graph). The transformer project itself into their frame-of-reference using this\ntransform.</p>\n<p>Specifically, the projection-transform converts points from the group's world space to the transformer's world\nspace. If you are not applying a projection on the transformer itself, this means it is the group's\nworld-to-screen transformation.</p>"
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotateEnabled",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will enable the rotate handles.</p>",
					"description": ""
				},
				{
					"name": "rotateGroup",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will rotate the group such that the handle will come to {@code pointerPosition}.</p>",
					"description": ""
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "rotationSnaps",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The angles at which rotation should snap.</p>",
					"description": ""
				},
				{
					"name": "rotationSnapTolerance",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The maximum angular difference for snapping rotation.</p>",
					"description": ""
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "scaleEnabled",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will enable the scale handles.</p>",
					"description": ""
				},
				{
					"name": "scaleGroup",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will scale the group such that the scale handle will come under {@code pointerPosition}.</p>",
					"description": ""
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "skewEnabled",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will enable the skew handles.</p>",
					"description": ""
				},
				{
					"name": "skewGroup",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will skew the group such that the skew handle would move to the {@code pointerPosition}.</p>",
					"description": ""
				},
				{
					"name": "skewRadius",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The distance of skewing handles from the group's center.</p>",
					"description": ""
				},
				{
					"name": "skewSnaps",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The angles at which both the horizontal &amp; vertical skew handles should snap.</p>",
					"description": ""
				},
				{
					"name": "skewSnapTolerance",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The maximum angular difference for snapping skew handles.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "transformType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This is the type of transformation being applied by the user on the group. It can be inaccurate if you call one of\n<code>translateGroup</code>, <code>scaleGroup</code>, <code>rotateGroup</code>, <code>skewGroup</code> without calling <code>commitGroup</code> afterwards.</p>"
				},
				{
					"name": "transientGroupTilt",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will reset the rotation angle after the user finishes rotating a group with more than one display-object.</p>",
					"description": ""
				},
				{
					"name": "translateEnabled",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will enable translation on dragging the transformer. By default, it is turned on.</p>",
					"description": ""
				},
				{
					"name": "translateGroup",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This will translate the group by {@code delta} in their world-space.</p>",
					"description": "<p>NOTE: There is no handle that provides translation. The user drags the transformer directly.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "wireframe",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Draws the bounding boxes</p>",
					"description": ""
				},
				{
					"name": "wireframeStyle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The currently applied wireframe style.</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "handles",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Object mapping handle-names to the handle display-objects.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "calculateGroupOrientedBounds",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "<p>Calculates the oriented bounding box of a group of display-objects at a specific angle.</p>",
					"description": ""
				},
				{
					"name": "calculateOrientedBounds",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Calculates the oriented bounding box of the display-object. This would not bending with any skew\napplied on the display-object, i.e. it is guaranteed to be rectangular.</p>"
				},
				{
					"name": "calculateTransformedCorners",
					"type": "MethodDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Calculates the positions of the four corners of the display-object. The quadrilateral formed by\nthese points will be the tightest fit around it.</p>"
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<table>\n<thead>\n<tr>\n<th>Handle</th>\n<th>Type</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rotator</td>\n<td>Rotate</td>\n<td></td>\n</tr>\n<tr>\n<td>boxRotateTopLeft</td>\n<td>Rotate</td>\n<td>Invisible</td>\n</tr>\n<tr>\n<td>boxRotateTopRight</td>\n<td>Rotate</td>\n<td>Invisible</td>\n</tr>\n<tr>\n<td>boxRotateBottomLeft</td>\n<td>Rotate</td>\n<td>Invisible</td>\n</tr>\n<tr>\n<td>boxRotateBottomRight</td>\n<td>Rotate</td>\n<td>Invisible</td>\n</tr>\n<tr>\n<td>topLeft</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>topCenter</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>topRight</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>middleLeft</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>middleCenter</td>\n<td>Scale</td>\n<td>This cannot be enabled!</td>\n</tr>\n<tr>\n<td>middleRight</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>bottomLeft</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>bottomCenter</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>bottomRight</td>\n<td>Scale</td>\n<td></td>\n</tr>\n<tr>\n<td>skewHorizontal</td>\n<td>Skew</td>\n<td>Applies vertical shear. Handle segment is horizontal at skew.y = 0!</td>\n</tr>\n<tr>\n<td>skewVertical</td>\n<td>Skew</td>\n<td>Applied horizontal shear. Handle segment is vertical at skew.x = 0!</td>\n</tr>\n</tbody>\n</table>"
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "draw",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the transformer's geometry. This is called on each render.</p>",
					"description": ""
				},
				{
					"name": "drawHandles",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw the handles and any remaining parts of the wireframe.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getGroupBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "onPointerDown",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on the <code>pointerdown</code> event. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "onPointerMove",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on the <code>pointermove</code> event. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "onPointerUp",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on the <code>pointerup</code> and <code>pointerupoutside</code> events. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "prependTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies the given transformation matrix {@code delta} to all the display-objects in the group.</p>",
					"description": ""
				},
				{
					"name": "projectToLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Projects {@code input} from the group's world space into the transformer's local space, and puts the result\ninto {@code output}.</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>This will update the transformer's geometry and render it to the canvas.</p>",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "snapAngle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Snaps the given {@code angle} to one of the snapping angles, if possible.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "swapHandles",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swap the handles represented by the two {@code TransformerHandle} instances.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateGroupBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates {@code this.groupBounds} at the same angle.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "TransformerHandle",
			"type": "ClassDoc",
			"brief": "<p>The transfomer handle base implementation.</p>",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_dirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>This flags whether this handle should be redrawn in the next frame due to style changes.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "blendMode",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The blend mode to be applied to the graphic shape. Apply a value of\n<code>PIXI.BLEND_MODES.NORMAL</code> to reset the blend mode.  Note that, since each\nprimitive in the GraphicsGeometry list is rendered sequentially, modes\nsuch as <code>PIXI.BLEND_MODES.ADD</code> and <code>PIXI.BLEND_MODES.MULTIPLY</code> will\nbe applied per-primitive.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\nThis is useful if your graphics element does not change often, as it will speed up the rendering\nof the object in exchange for taking up texture memory. It is also useful if you need the graphics\nobject to be anti-aliased, because it will be rendered using canvas. This is not recommended if\nyou are constantly redrawing the graphics element.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current fill style.</p>",
					"description": ""
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "geometry",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>Includes vertex positions, face indices, normals, colors, UVs, and\ncustom attributes within buffers, reducing the cost of passing all\nthis data to the GPU. Can be shared between multiple Mesh or Graphics objects.</p>"
				},
				{
					"name": "handle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "line",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "<p>The current line style.</p>",
					"description": ""
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "pluginName",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Renderer plugin for batching</p>",
					"description": ""
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "shader",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\nCan be shared between multiple Graphics objects.</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "state",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\nblend mode, culling, depth testing, direction of rendering triangles, backface, etc.</p>"
				},
				{
					"name": "style",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The currently applied handle style.</p>",
					"description": ""
				},
				{
					"name": "tint",
					"type": "PropertyDoc",
					"access": "public",
					"scope": "instance",
					"brief": "",
					"description": "<p>The tint applied to each graphic shape. This is a hex value. A value of\n0xFFFFFF will remove any tint effect.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_fillStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current fill style</p>",
					"description": ""
				},
				{
					"name": "_holeMode",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current hole mode is enabled.</p>",
					"description": ""
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_lineStyle",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current line style</p>",
					"description": ""
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_matrix",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current shape transform matrix.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "batchDirty",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating batches.</p>",
					"description": ""
				},
				{
					"name": "batches",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>A collections of batches! These can be drawn by the renderer batch system.</p>",
					"description": ""
				},
				{
					"name": "batchTint",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Update dirty for limiting calculating tints for batches.</p>",
					"description": ""
				},
				{
					"name": "currentPath",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Current path</p>",
					"description": ""
				},
				{
					"name": "vertexData",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Copy of the object vertex data.</p>",
					"description": ""
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "_renderDrawCallDirect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders specific DrawCall</p>",
					"description": ""
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "arc",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "arcTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				},
				{
					"name": "beginFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.</p>"
				},
				{
					"name": "beginHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Begin adding holes to the last draw shape\nIMPORTANT: holes must be fully inside a shape to work\nAlso weirdness ensues if holes overlap!\nEllipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\nplease use <code>moveTo</code> <code>lineTo</code>, <code>quadraticCurveTo</code> if you rely on pixi-legacy bundle.</p>"
				},
				{
					"name": "beginTextureFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Begin the texture fill</p>",
					"description": ""
				},
				{
					"name": "bezierCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculate the points for a bezier curve and then draws it.</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.</p>",
					"description": ""
				},
				{
					"name": "clone",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Creates a new Graphics object with the same values as this one.\nNote that only the geometry of the object is cloned, not its transform (position,scale,etc)</p>"
				},
				{
					"name": "closePath",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Closes the current path.</p>",
					"description": ""
				},
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "containsPoint",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Tests if a point is inside this graphics object</p>",
					"description": ""
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Destroys the Graphics object.</p>",
					"description": ""
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "draw",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Redraws the handle's geometry. This is called on a <code>render</code> if {@code this._dirty} is true.</p>",
					"description": ""
				},
				{
					"name": "drawCircle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a circle.</p>",
					"description": ""
				},
				{
					"name": "drawEllipse",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws an ellipse.</p>",
					"description": ""
				},
				{
					"name": "drawPolygon",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a polygon using the given path.</p>",
					"description": ""
				},
				{
					"name": "drawRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draws a rectangle shape.</p>",
					"description": ""
				},
				{
					"name": "drawRoundedRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a rectangle shape with rounded/beveled corners.</p>",
					"description": ""
				},
				{
					"name": "drawShape",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw any shape.</p>",
					"description": ""
				},
				{
					"name": "drawStar",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Draw a star shape with an arbitrary number of points.</p>",
					"description": ""
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "endFill",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.</p>",
					"description": ""
				},
				{
					"name": "endHole",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>End adding holes to the last draw shape</p>"
				},
				{
					"name": "generateCanvasTexture",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Generates a canvas texture. Only available with <strong>pixi.js-legacy</strong> bundle\nor the <strong>@pixi/canvas-graphics</strong> package.</p>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "isFastRect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\nmasked with gl.scissor.</p>"
				},
				{
					"name": "lineStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\nmethod or the drawCircle() method.</p>"
				},
				{
					"name": "lineTextureStyle",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Like line style but support texture for line fill.</p>",
					"description": ""
				},
				{
					"name": "lineTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Draws a line using the current line style from the current drawing position to (x, y);\nThe current drawing position is then set to (x, y).</p>"
				},
				{
					"name": "moveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Moves the current drawing position to x, y.</p>",
					"description": ""
				},
				{
					"name": "onDrag",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on a <code>pointermove</code> when {@code this._pointerDown} &amp; {@code this._pointerDragging}.</p>",
					"description": ""
				},
				{
					"name": "onDragEnd",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on a <code>pointerup</code> or <code>pointerupoutside</code> &amp; {@code this._pointerDragging} was true.</p>",
					"description": ""
				},
				{
					"name": "onDragStart",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Called on the first <code>pointermove</code> when {@code this._pointerDown} is true. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "onPointerDown",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Handles the <code>pointerdown</code> event. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "onPointerMove",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Handles the <code>pointermove</code> event. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "onPointerUp",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Handles the <code>pointerup</code> event. You must call the super implementation.</p>",
					"description": ""
				},
				{
					"name": "quadraticCurveTo",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Renders the object using the Canvas renderer</p>"
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setMatrix",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Apply a matrix to the positional data.</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Retrieves the bounds of the graphic shape as a rectangle object</p>",
					"description": ""
				},
				{
					"name": "_initCurve",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Initialize the curve</p>",
					"description": ""
				},
				{
					"name": "_populateBatches",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Populating batches for rendering</p>",
					"description": ""
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer</p>",
					"description": ""
				},
				{
					"name": "_renderBatched",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the batches using the BathedRenderer plugin</p>",
					"description": ""
				},
				{
					"name": "_renderDirect",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Renders the graphics direct</p>",
					"description": ""
				},
				{
					"name": "_resolveDirectShader",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Resolves shader for direct rendering</p>",
					"description": ""
				},
				{
					"name": "calculateTints",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalcuate the tint by applying tin to batches using Graphics tint.</p>"
				},
				{
					"name": "calculateVertices",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>If there's a transform update or a change to the shape of the\ngeometry, recaculate the vertices.</p>"
				},
				{
					"name": "finishPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Finish the polygon object.</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "startPoly",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Start a polygon object internally</p>"
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders the object using the Canvas renderer</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "Vertex",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "connect",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "ZLayer",
			"type": "ClassDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "_accessibleActive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_accessibleDiv",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_bounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The bounds object, this is used to calculate and store the bounds of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "_localBounds",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Local bounds object, swapped with <code>_bounds</code> when using <code>getLocalBounds()</code>.</p>",
					"description": ""
				},
				{
					"name": "accessible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Flag for if the object is accessible. If true AccessibilityManager will overlay a\nshadow div with attributes set</p>"
				},
				{
					"name": "accessibleChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Setting to false will prevent any children inside this container to\nbe accessible. Defaults to true.</p>"
				},
				{
					"name": "accessibleHint",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Sets the aria-label attribute of the shadow div</p>",
					"description": ""
				},
				{
					"name": "accessiblePointerEvents",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the pointer-events the accessible div will use\nDefaults to auto.</p>"
				},
				{
					"name": "accessibleTitle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the title attribute of the shadow div\nIf accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'</p>"
				},
				{
					"name": "accessibleType",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Specify the type of div the accessible layer is. Screen readers treat the element differently\ndepending on this type. Defaults to button.</p>"
				},
				{
					"name": "alpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The opacity of the object.</p>",
					"description": ""
				},
				{
					"name": "angle",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The angle of the object in degrees.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "buttonMode",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\nSetting this changes the 'cursor' property to <code>'pointer'</code>.</p>"
				},
				{
					"name": "cacheAsBitmap",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Set this to true if you want this display object to be cached as a bitmap.\nThis basically takes a snap shot of the display object as it is at that moment. It can\nprovide a performance benefit for complex static displayObjects.\nTo remove simply set this property to <code>false</code></p>\n<p>IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\nas it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.</p>"
				},
				{
					"name": "children",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The array of children of this container.</p>",
					"description": ""
				},
				{
					"name": "cursor",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>This defines what cursor mode is used when the mouse cursor\nis hovered over the displayObject.</p>"
				},
				{
					"name": "filterArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The area the filter is applied to. This is used as more of an optimization\nrather than figuring out the dimensions of the displayObject each frame you can set this rectangle.</p>\n<p>Also works as an interaction mask.</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets the filters for the displayObject.</p>\n<ul>\n<li>IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\nTo remove filters simply set this property to <code>'null'</code>.</li>\n</ul>"
				},
				{
					"name": "height",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The height of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "hitArea",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Interaction shape. Children will be hit first, then this shape will be checked.\nSetting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.</p>"
				},
				{
					"name": "interactive",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Enable interaction events for the DisplayObject. Touch, pointer and mouse\nevents will not be emitted unless <code>interactive</code> is set to <code>true</code>.</p>"
				},
				{
					"name": "interactiveChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Determines if the children to the displayObject can be clicked/touched\nSetting this to false allows PixiJS to bypass a recursive <code>hitTest</code> function</p>"
				},
				{
					"name": "isMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Does any other displayObject use this object as a mask?</p>"
				},
				{
					"name": "isSprite",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>used to fast check if a sprite is.. a sprite!</p>"
				},
				{
					"name": "localTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on local factors: position, scale, other stuff.</p>",
					"description": ""
				},
				{
					"name": "mask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Sets a mask for the displayObject. A mask is an object that limits the visibility of an\nobject to the shape of the mask applied to it. In PixiJS a regular mask must be a\n{@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\nutilities shape clipping. To remove a mask, set this property to <code>null</code>.</p>\n<p>For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.</p>"
				},
				{
					"name": "name",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The instance name of the object.</p>",
					"description": ""
				},
				{
					"name": "parent",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The display object container that contains this display object.</p>",
					"description": ""
				},
				{
					"name": "pivot",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The center of rotation, scaling, and skewing for this display object in its local space. The <code>position</code>\nis the projection of <code>pivot</code> in the parent's local space.</p>\n<p>By default, the pivot is the origin (0, 0).</p>"
				},
				{
					"name": "position",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The coordinate of the object relative to the local coordinates of the parent.</p>",
					"description": ""
				},
				{
					"name": "renderable",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Can this object be rendered, if false the object will not be drawn but the updateTransform\nmethods will still be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds manually.</p>"
				},
				{
					"name": "rotation",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The rotation of the object in radians.\n'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.</p>"
				},
				{
					"name": "scale",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The scale factors of this object along the local coordinate axes.</p>",
					"description": "<p>The default scale is (1, 1).</p>"
				},
				{
					"name": "skew",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The skew factor for the object in radians.</p>",
					"description": ""
				},
				{
					"name": "smartMask",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>It enable smart-masking, set this property. Before rendering the scene graph, you must invoke\n{@code updateSmartMask} on each display-object to enable masking.</p>"
				},
				{
					"name": "sortableChildren",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>If set to true, the container will sort its children by zIndex value\nwhen updateTransform() is called, or manually if sortChildren() is called.</p>\n<p>This actually changes the order of elements in the array, so should be treated\nas a basic solution that is not performant compared to other solutions,\nsuch as @link https://github.com/pixijs/pixi-display</p>\n<p>Also be aware of that this may not work nicely with the addChildAt() function,\nas the zIndex sorting may cause the child to automatically sorted to another position.</p>"
				},
				{
					"name": "sortDirty",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Should children be sorted by zIndex at the next updateTransform call.</p>",
					"description": "<p>Will get automatically set to true if a new child is added, or if a child's zIndex changes.</p>"
				},
				{
					"name": "transform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>World transform and local transform of this object.\nThis will become read-only later, please do not assign anything there unless you know what are you doing.</p>"
				},
				{
					"name": "visible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The visibility of the object. If false the object will not be drawn, and\nthe updateTransform function will not be called.</p>\n<p>Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.</p>"
				},
				{
					"name": "width",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The width of the Container, setting this will actually modify the scale to achieve the value set</p>",
					"description": ""
				},
				{
					"name": "worldAlpha",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The multiplied alpha of the displayObject.</p>",
					"description": ""
				},
				{
					"name": "worldTransform",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Current transform of the object based on world (parent) factors.</p>",
					"description": ""
				},
				{
					"name": "worldVisible",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>Indicates if the object is globally visible.</p>",
					"description": ""
				},
				{
					"name": "x",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the x axis relative to the local coordinates of the parent.\nAn alias to position.x</p>"
				},
				{
					"name": "y",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>The position of the displayObject on the y axis relative to the local coordinates of the parent.\nAn alias to position.y</p>"
				},
				{
					"name": "zIndex",
					"type": "PropertyDoc",
					"scope": "instance",
					"brief": "<p>The zIndex of the displayObject.</p>",
					"description": "<p>If a container has the sortableChildren property set to true, children will be automatically\nsorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\nand thus rendered on top of other display objects within the same container.</p>"
				},
				{
					"name": "_boundsID",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Flags the cached bounds as dirty.</p>",
					"description": ""
				},
				{
					"name": "_boundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's bounds-rectangle.</p>",
					"description": ""
				},
				{
					"name": "_destroyed",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>If the object has been destroyed via destroy(). If true, it should not be used.</p>",
					"description": ""
				},
				{
					"name": "_enabledFilters",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Currently enabled filters</p>"
				},
				{
					"name": "_lastSortedIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Which index in the children array the display component was before the previous zIndex sort.\nUsed by containers to help sort objects with the same zIndex, by using previous array index as the decider.</p>"
				},
				{
					"name": "_localBoundsRect",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Cache of this display-object's local-bounds rectangle.</p>",
					"description": ""
				},
				{
					"name": "_mask",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>The original, cached mask of the object.</p>",
					"description": ""
				},
				{
					"name": "_tempDisplayObjectParent",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "_zIndex",
					"type": "PropertyDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>The zIndex of the displayObject.\nA higher value will mean it will be rendered on top of other displayObjects within the same container.</p>"
				},
				{
					"name": "tabIndex",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "trackedPointers",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Internal set of all active pointers, by identifier</p>",
					"description": ""
				},
				{
					"name": "_recursivePostUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recursively updates transform of all objects from the root to this one\ninternal function for toLocal()</p>"
				},
				{
					"name": "addChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds one or more children to the container.</p>",
					"description": "<p>Multiple items can be added like so: <code>myContainer.addChild(thingOne, thingTwo, thingThree)</code></p>"
				},
				{
					"name": "addChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown</p>",
					"description": ""
				},
				{
					"name": "calculateBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Recalculates the bounds of the container.</p>",
					"description": "<p>This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\nis limited to its mask's bounds or filterArea, if any is applied.</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "containerUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Container default updateTransform, does update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "destroy",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>Removes all internal references and listeners as well as removes children from the display list.\nDo not use a Container after calling <code>destroy</code>.</p>"
				},
				{
					"name": "disableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Pair method for <code>enableTempParent</code></p>",
					"description": ""
				},
				{
					"name": "displayObjectUpdateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": "<p>DisplayObject default updateTransform, does not update children of container.\nWill crash if there's no parent element.</p>"
				},
				{
					"name": "enableTempParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Used in Renderer, cacheAsBitmap and other places where you call an <code>updateTransform</code> on root</p>",
					"description": "<pre><code class=\"hljs\">const cacheParent = elem.enable<span class=\"hljs-constructor\">TempParent()</span>;\nelem.update<span class=\"hljs-constructor\">Transform()</span>;\nelem.disable<span class=\"hljs-constructor\">TempParent(<span class=\"hljs-params\">cacheParent</span>)</span>;\n</code></pre>"
				},
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.</p>",
					"description": "<p>This method is expensive on containers with a large subtree (like the stage). This is because the bounds\nof a container depend on its children's bounds, which recursively causes all bounds in the subtree to\nbe recalculated. The upside, however, is that calling <code>getBounds</code> once on a container will indeed update\nthe bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n<code>displayObject._bounds.getRectangle()</code> when traversing through all the bounds in a scene graph. Otherwise,\ncalling <code>getBounds</code> on each object in a subtree will cause the total cost to increase quadratically as\nits height increases.</p>\n<ul>\n<li>The transforms of all objects in a container's <strong>subtree</strong> and of all <strong>ancestors</strong> are updated.</li>\n<li>The world bounds of all display objects in a container's <strong>subtree</strong> will also be recalculated.</li>\n</ul>\n<p>The <code>_bounds</code> object stores the last calculation of the bounds. You can use to entirely skip bounds\ncalculation if needed.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n</code></pre>\n<p>Do know that usage of <code>getLocalBounds</code> can corrupt the <code>_bounds</code> of children (the whole subtree, actually). This\nis a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\ndetails.</p>\n<p><code>getBounds</code> should be called with <code>skipUpdate</code> equal to <code>true</code> in a render() call. This is because the transforms\nare guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\ncases.</p>"
				},
				{
					"name": "getChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the child at the specified index</p>",
					"description": ""
				},
				{
					"name": "getChildByName",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the display object in the container.</p>",
					"description": "<p>Recursive searches are done in a preorder traversal.</p>"
				},
				{
					"name": "getChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the index position of a child DisplayObject instance</p>",
					"description": ""
				},
				{
					"name": "getGlobalPosition",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.</p>",
					"description": ""
				},
				{
					"name": "getLocalBounds",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Retrieves the local bounds of the displayObject as a rectangle object.</p>",
					"description": "<p>Calling <code>getLocalBounds</code> may invalidate the <code>_bounds</code> of the whole subtree below. If using it inside a render()\ncall, it is advised to call <code>getBounds()</code> immediately after to recalculate the world bounds of the subtree.</p>"
				},
				{
					"name": "removeChild",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes one or more children from the container.</p>",
					"description": ""
				},
				{
					"name": "removeChildAt",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes a child from the specified index position.</p>",
					"description": ""
				},
				{
					"name": "removeChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Removes all children from this container that are within the begin and end indexes.</p>",
					"description": ""
				},
				{
					"name": "render",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Renders the object using the WebGL renderer.</p>",
					"description": "<p>The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\ncontainer itself. This <code>render</code> method will invoke it, and also invoke the <code>render</code> methods of all\nchildren afterward.</p>\n<p>If <code>renderable</code> or <code>visible</code> is false or if <code>worldAlpha</code> is not positive, this implementation will entirely\nskip rendering. See {@link PIXI.DisplayObject} for choosing between <code>renderable</code> or <code>visible</code>. Generally,\nsetting alpha to zero is not recommended for purely skipping rendering.</p>\n<p>When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\nadvised to employ <strong>culling</strong> to automatically skip rendering objects outside of the current screen. The\n[@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n[pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.</p>\n<p>The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\nfiltering is applied on a container. This does, however, break batching and can affect performance when\nmasking and filtering is applied extensively throughout the scene graph.</p>"
				},
				{
					"name": "renderCanvas",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "renderWebGL",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "setChildIndex",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Changes the position of an existing child in the display object container</p>",
					"description": ""
				},
				{
					"name": "setParent",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Set the parent Container of this DisplayObject.</p>",
					"description": ""
				},
				{
					"name": "setTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Convenience function to set the position, scale, skew and pivot at once.</p>",
					"description": ""
				},
				{
					"name": "sortChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.</p>",
					"description": ""
				},
				{
					"name": "swapChildren",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Swaps the position of 2 Display Objects within this container.</p>",
					"description": ""
				},
				{
					"name": "toGlobal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the global position of the display object.</p>",
					"description": ""
				},
				{
					"name": "toLocal",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Calculates the local position of the display object relative to another point.</p>",
					"description": ""
				},
				{
					"name": "updateTransform",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "<p>Updates the transform on all children of this container for rendering</p>",
					"description": ""
				},
				{
					"name": "_calculateBounds",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>Recalculates the content bounds of this object. This should be overriden to\ncalculate the bounds of this specific object (not including children).</p>"
				},
				{
					"name": "_render",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>To be overridden by the subclasses.</p>",
					"description": ""
				},
				{
					"name": "_renderCanvas",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "",
					"description": "<p>To be overridden by the subclass</p>"
				},
				{
					"name": "onChildrenChange",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Overridable method that can be used by Container subclasses whenever the children array is modified</p>",
					"description": ""
				},
				{
					"name": "renderAdvanced",
					"type": "MethodDoc",
					"access": "protected",
					"scope": "instance",
					"brief": "<p>Render the object using the WebGL renderer and advanced features.</p>",
					"description": ""
				},
				{
					"name": "_cacheAsBitmapDestroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached object.</p>",
					"description": ""
				},
				{
					"name": "_calculateCachedBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Calculates the bounds of the cached sprite</p>",
					"description": ""
				},
				{
					"name": "_destroyCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Destroys the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_getCachedLocalBounds",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Gets the bounds of the cached sprite.</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObject",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the WebGL renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_initCachedDisplayObjectCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Prepares the Canvas renderer to cache the sprite</p>",
					"description": ""
				},
				{
					"name": "_renderCached",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with WebGL</p>",
					"description": ""
				},
				{
					"name": "_renderCachedCanvas",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "<p>Renders a cached version of the sprite with canvas</p>",
					"description": ""
				},
				{
					"name": "childAdded",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is added to this Container.</p>",
					"description": ""
				},
				{
					"name": "click",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed and released on\nthe display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousedown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mousemove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device (usually a mouse) is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released over the display\nobject. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "mouseupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button (usually a mouse left-button) is released outside the\ndisplay object that initially registered a\n[mousedown]{@link PIXI.DisplayObject#event:mousedown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointercancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a pointer event.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointermove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved while over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerout",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved off the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerover",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device is moved onto the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointertap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is pressed and released on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released over the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "pointerupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device button is released outside the display object that initially\nregistered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "removedFrom",
					"type": "EventDoc",
					"scope": "static",
					"brief": "<p>Fired when a DisplayObject is removed from this Container.</p>",
					"description": ""
				},
				{
					"name": "rightclick",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\nand released on the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightdown",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is pressed\non the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightup",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\nover the display object. DisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "rightupoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a pointer device secondary button (usually a mouse right-button) is released\noutside the display object that initially registered a\n[rightdown]{@link PIXI.DisplayObject#event:rightdown}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "tap",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed and removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchcancel",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when the operating system cancels a touch.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchend",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed from the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchendoutside",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is removed outside of the display object that initially\nregistered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchmove",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is moved along the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "touchstart",
					"type": "EventDoc",
					"scope": "static",
					"brief": "",
					"description": "<p>Fired when a touch point is placed on the display object.\nDisplayObject's <code>interactive</code> property must be set to <code>true</code> to fire event.</p>"
				},
				{
					"name": "added",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>Fired when this DisplayObject is added to a Container.</p>",
					"description": ""
				},
				{
					"name": "removed",
					"type": "EventDoc",
					"brief": "<p>Fired when this DisplayObject is removed from a Container.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "ArcUtils",
			"type": "ClassDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utilities for arc curves</p>",
			"members": [
				{
					"name": "arc",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>The arc method creates an arc/curve (used to create circles, or parts of circles).</p>",
					"description": ""
				},
				{
					"name": "curveTo",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>The arcTo() method creates an arc/curve between two tangents on the canvas.</p>",
					"description": "<p>&quot;borrowed&quot; from https://code.google.com/p/fxcanvas/ - thanks google!</p>"
				}
			]
		},
		{
			"name": "BezierUtils",
			"type": "ClassDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utilities for bezier curves</p>",
			"members": [
				{
					"name": "curveLength",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "",
					"description": "<p>Calculate length of bezier curve.\nAnalytical solution is impossible, since it involves an integral that does not integrate in general.\nTherefore numerical solution is used.</p>"
				}
			]
		},
		{
			"name": "CacheData",
			"type": "ClassDoc",
			"access": "private",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "constructor",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "FilterState",
			"type": "ClassDoc",
			"access": "private",
			"brief": "<p>System plugin to the renderer to manage filter states.</p>",
			"description": "",
			"members": [
				{
					"name": "destinationFrame",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Destination frame</p>"
				},
				{
					"name": "filters",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Collection of filters</p>"
				},
				{
					"name": "legacy",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Compatibility with PixiJS v4 filters</p>"
				},
				{
					"name": "resolution",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Resolution of filters</p>"
				},
				{
					"name": "sourceFrame",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Source frame</p>"
				},
				{
					"name": "target",
					"type": "PropertyDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>Target of the filters\nWe store for case when custom filter wants to know the element it was applied on</p>"
				},
				{
					"name": "clear",
					"type": "MethodDoc",
					"access": "private",
					"scope": "instance",
					"brief": "",
					"description": "<p>clears the state</p>"
				}
			]
		},
		{
			"name": "QuadraticUtils",
			"type": "ClassDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utilities for quadratic curves</p>",
			"members": [
				{
					"name": "curveLength",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "",
					"description": "<p>Calculate length of quadratic curve</p>"
				},
				{
					"name": "curveTo",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "",
					"description": "<p>Calculate the points for a quadratic bezier curve and then draws it.\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>"
				}
			]
		},
		{
			"name": "ResizePlugin",
			"type": "ClassDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Middleware for for Application's resize functionality</p>",
			"members": [
				{
					"name": "destroy",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Clean up the ticker, scoped to application</p>",
					"description": ""
				},
				{
					"name": "init",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "",
					"description": "<p>Initialize the plugin with scope of application instance</p>",
					"members": [
						{
							"name": "get",
							"type": "MethodDoc",
							"scope": "instance",
							"brief": "",
							"description": ""
						}
					]
				}
			]
		},
		{
			"name": "TextFormat",
			"type": "ClassDoc",
			"access": "private",
			"brief": "<p>BitmapFont format that's Text-based.</p>",
			"description": "",
			"members": [
				{
					"name": "parse",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Convert text font data to a javascript object.</p>",
					"description": ""
				},
				{
					"name": "test",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Check if resource refers to txt font data.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "XMLFormat",
			"type": "ClassDoc",
			"access": "private",
			"brief": "<p>BitmapFont format that's XML-based.</p>",
			"description": "",
			"members": [
				{
					"name": "parse",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Convert the XML into BitmapFontData that we can use.</p>",
					"description": ""
				},
				{
					"name": "test",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Check if resource refers to xml font data.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "XMLStringFormat",
			"type": "ClassDoc",
			"access": "private",
			"brief": "<p>BitmapFont format that's XML-based.</p>",
			"description": "",
			"members": [
				{
					"name": "parse",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Convert the text XML into BitmapFontData that we can use.</p>",
					"description": ""
				},
				{
					"name": "test",
					"type": "MethodDoc",
					"access": "private",
					"scope": "static",
					"brief": "<p>Check if resource refers to text xml font data.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "D3D10_RESOURCE_DIMENSION",
			"type": "EnumDoc",
			"brief": "<p>Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}</p>",
			"description": ""
		},
		{
			"name": "BASIS_FORMAT_TO_INTERNAL_FORMAT",
			"type": "PropertyDoc",
			"brief": "<p>Maps {@link BASIS_FORMATS} to {@link PIXI.INTERNAL_FORMATS}</p>",
			"description": ""
		},
		{
			"name": "DDS_DX10_FIELDS",
			"type": "PropertyDoc",
			"brief": "<p>DWORD offsets of the DDS_HEADER_DX10 fields.</p>",
			"description": ""
		},
		{
			"name": "DDS_FIELDS",
			"type": "PropertyDoc",
			"brief": "<p>DWORD offsets of the DDS file header fields (relative to file start).</p>",
			"description": ""
		},
		{
			"name": "DEFAULT_ROTATION_SNAP_TOLERANCE",
			"type": "PropertyDoc",
			"brief": "<p>The default snap tolerance, i.e. the maximum angle b/w the pointer &amp; nearest snap ray for snapping.</p>",
			"description": ""
		},
		{
			"name": "DEFAULT_SKEW_SNAP_TOLERANCE",
			"type": "PropertyDoc",
			"brief": "<p>The default snap tolerance for skewing.</p>",
			"description": ""
		},
		{
			"name": "DEFAULT_WIREFRAME_STYLE",
			"type": "PropertyDoc",
			"brief": "<p>The default wireframe style for {@link Transformer}.</p>",
			"description": ""
		},
		{
			"name": "DEFUALT_BOX_ROTATION_TOLERANCE",
			"type": "PropertyDoc",
			"brief": "<p>The default tolerance for box-rotation handles.</p>",
			"description": ""
		},
		{
			"name": "DXGI_TO_FORMAT",
			"type": "PropertyDoc",
			"brief": "<p>Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})</p>",
			"description": ""
		},
		{
			"name": "ENDIANNESS",
			"type": "PropertyDoc",
			"brief": "<p>The value stored in the &quot;endiannness&quot; field.</p>",
			"description": ""
		},
		{
			"name": "FILE_HEADER_SIZE",
			"type": "PropertyDoc",
			"brief": "<p>Byte size of the file header fields in {@code KTX_FIELDS}</p>",
			"description": ""
		},
		{
			"name": "FORMATS_TO_COMPONENTS",
			"type": "PropertyDoc",
			"brief": "<p>Number of components in each {@link PIXI.FORMATS}</p>",
			"description": ""
		},
		{
			"name": "HANDLES",
			"type": "PropertyDoc",
			"brief": "<p>All possible values of {@link Handle}.</p>",
			"description": ""
		},
		{
			"name": "INSIG_REGION_DIST",
			"type": "PropertyDoc",
			"brief": "<p>20% of {@link SIG_REGION_LEN}</p>",
			"description": ""
		},
		{
			"name": "INTERNAL_FORMAT_TO_BASIS_FORMAT",
			"type": "PropertyDoc",
			"brief": "<p>Maps {@link PIXI.INTERNAL_FORMATS} to {@link BASIS_FORMATS}</p>",
			"description": ""
		},
		{
			"name": "SCALE_HANDLES",
			"type": "PropertyDoc",
			"brief": "<p>An array of all {@link ScaleHandle} values.</p>",
			"description": ""
		},
		{
			"name": "Transformer",
			"type": "PropertyDoc",
			"brief": "<p>Transformer component</p>",
			"description": "",
			"members": [
				{
					"name": "transformchange",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>This is fired when the transformer modifies the transforms of display-objects.</p>",
					"description": ""
				},
				{
					"name": "transformcommit",
					"type": "EventDoc",
					"scope": "instance",
					"brief": "<p>This is fired when the user lifts the mouse button after dragging a transformer handle. It can be used</p>",
					"description": ""
				}
			]
		},
		{
			"name": "buildRectangle",
			"type": "PropertyDoc",
			"access": "private",
			"brief": "<p>Builds a rectangle to draw</p>",
			"description": "<p>Ignored from docs since it is not directly exposed.</p>",
			"members": [
				{
					"name": "build",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				},
				{
					"name": "triangulate",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "rotationCayley",
			"type": "PropertyDoc",
			"access": "private",
			"brief": "",
			"description": "<p>[Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\nfor the composition of each rotation in the dihederal group D8.</p>"
		},
		{
			"name": "rotationMatrices",
			"type": "PropertyDoc",
			"access": "private",
			"brief": "<p>Matrices for each <code>GD8Symmetry</code> rotation.</p>",
			"description": ""
		},
		{
			"name": "_sizeOf",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "bool",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "bvec3",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "compile",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "generateVertexCountExpr",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "get",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "int",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "ivec3",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "mat2",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "mat4",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "samplerCube",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "uint",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "uvec3",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "vec2",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "vec4",
			"type": "MethodDoc",
			"scope": "instance",
			"brief": "",
			"description": ""
		},
		{
			"name": "getTestContext",
			"type": "FunctionDoc",
			"access": "private",
			"scope": "static",
			"brief": "<p>returns a little WebGL context to use for program inspection.</p>",
			"description": ""
		},
		{
			"name": "applyEventProps",
			"type": "FunctionDoc",
			"brief": "<p>Removes old listeners and applies the new ones passed in the props</p>",
			"description": ""
		},
		{
			"name": "Boundable",
			"type": "InterfaceDoc",
			"brief": "<p>An object that can be represented by an axis-aligned bounding box</p>",
			"description": "",
			"members": [
				{
					"name": "getBounds",
					"type": "MethodDoc",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "buildDashedLine",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "checkMaxIfStatementsInShader",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "ColorStop",
			"type": "InterfaceDoc",
			"brief": "<p>Color stop used to generate gradients</p>",
			"description": ""
		},
		{
			"name": "convertLinearGradientAxis",
			"type": "FunctionDoc",
			"brief": "<p>Converts the linear gradient's x1, x2, y1, y2 attributes into percentage units.</p>",
			"description": ""
		},
		{
			"name": "createVerticalSkew",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "decomposeTransform",
			"type": "FunctionDoc",
			"brief": "<p>Decomposes the matrix into transform, while preserving rotation &amp; the pivot.</p>",
			"description": ""
		},
		{
			"name": "determineCrossOrigin",
			"type": "FunctionDoc",
			"brief": "",
			"description": "<p>Sets the <code>crossOrigin</code> property for this resource based on if the url\nfor this resource is cross-origin. If crossOrigin was manually set, this\nfunction does nothing.\nNipped from the resource loader!</p>"
		},
		{
			"name": "distanceTo",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "extractUniformsFromString",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "generateBlurVertSource",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "generateFragmentSrc",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "generateUniformsSync",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "getBufferType",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "IArrayBuffer",
			"type": "InterfaceDoc",
			"brief": "<p>Marks places in PixiJS where you can pass Float32Array, UInt32Array, any typed arrays, and ArrayBuffer</p>",
			"description": "<p>Same as ArrayBuffer in typescript lib, defined here just for documentation</p>"
		},
		{
			"name": "IBatchableElement",
			"type": "InterfaceDoc",
			"brief": "<p>Interface for elements like Sprite, Mesh etc. for batching.</p>",
			"description": ""
		},
		{
			"name": "ICubeResourceOptions",
			"type": "InterfaceDoc",
			"brief": "<p>Constructor options for CubeResource</p>",
			"description": ""
		},
		{
			"name": "IDoublyLinkedListNode",
			"type": "InterfaceDoc",
			"brief": "<p>A node in a doubly linked-list data structure.</p>",
			"description": ""
		},
		{
			"name": "IGraphicsBatchElement",
			"type": "InterfaceDoc",
			"brief": "<p>Batch element computed from Graphics geometry</p>",
			"description": ""
		},
		{
			"name": "ILinkedListNode",
			"type": "InterfaceDoc",
			"brief": "<p>A node in a linked-list data-structure.</p>",
			"description": "",
			"members": [
				{
					"name": "next",
					"type": "PropertyDoc",
					"brief": "<p>The next node in the linked-list.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "inDash",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "injectTexturesPerBatch",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "install",
			"type": "FunctionDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "syncUniforms",
					"type": "MethodDoc",
					"scope": "instance",
					"brief": "",
					"description": ""
				}
			]
		},
		{
			"name": "interleaveTypedArrays",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "IObjectPoolOptions",
			"type": "InterfaceDoc",
			"access": "public",
			"brief": "",
			"description": ""
		},
		{
			"name": "IOooRendererOptions",
			"type": "InterfaceDoc",
			"access": "public",
			"brief": "",
			"description": ""
		},
		{
			"name": "IRenderingContext",
			"type": "InterfaceDoc",
			"brief": "",
			"description": "<p>Mixed WebGL1/WebGL2 Rendering Context.\nEither its WebGL2, either its WebGL1 with PixiJS polyfills on it</p>"
		},
		{
			"name": "ISpritesheetData",
			"type": "InterfaceDoc",
			"brief": "<p>Atlas format.</p>",
			"description": ""
		},
		{
			"name": "ISpritesheetFrameData",
			"type": "InterfaceDoc",
			"brief": "<p>Represents the JSON data for a spritesheet atlas.</p>",
			"description": ""
		},
		{
			"name": "ITranscodeMessage",
			"type": "InterfaceDoc",
			"brief": "<p>Request parameters for transcoding basis files. It only supports transcoding all of the basis file at once.</p>",
			"description": ""
		},
		{
			"name": "ITranscodeResponse",
			"type": "InterfaceDoc",
			"brief": "<p>Response format for {@link TranscoderWorker}.</p>",
			"description": ""
		},
		{
			"name": "ITransformerHandleStyle",
			"type": "InterfaceDoc",
			"brief": "",
			"description": "",
			"members": [
				{
					"name": "color",
					"type": "PropertyDoc",
					"brief": "<p>Fill color of the handle</p>",
					"description": ""
				},
				{
					"name": "outlineColor",
					"type": "PropertyDoc",
					"brief": "<p>Outline color of the handle</p>",
					"description": ""
				},
				{
					"name": "outlineThickness",
					"type": "PropertyDoc",
					"brief": "<p>Outline thickness around the handle</p>",
					"description": ""
				},
				{
					"name": "radius",
					"type": "PropertyDoc",
					"brief": "<p>Radius (or size for non-circular handles) of the handle</p>",
					"description": ""
				},
				{
					"name": "shape",
					"type": "PropertyDoc",
					"brief": "<p>{@link TransformerHandle} provides three types of handle shapes - 'circle', 'square', 'tooth'.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "ITypedArray",
			"type": "InterfaceDoc",
			"brief": "",
			"description": "<p>PixiJS classes use this type instead of ArrayBuffer and typed arrays\nto support expressions like <code>geometry.buffers[0].data[0] = position.x</code>.</p>\n<p>Gives access to indexing and <code>length</code> field</p>"
		},
		{
			"name": "multiplyTransform",
			"type": "FunctionDoc",
			"brief": "<p>Multiplies the transformation matrix {@code transform} to the display-object's transform.</p>",
			"description": ""
		},
		{
			"name": "OffscreenCanvas",
			"type": "InterfaceDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "Paint",
			"type": "InterfaceDoc",
			"brief": "",
			"description": "<p>Internal, parsed form of painting attributes. If a paint attribute was not defined, it <strong>must</strong> be\n<code>null</code> (not <code>undefined</code>).</p>",
			"members": [
				{
					"name": "dirtyId",
					"type": "PropertyDoc",
					"brief": "<p>Flags when the paint is updated.</p>",
					"description": ""
				},
				{
					"name": "fill",
					"type": "PropertyDoc",
					"brief": "<p>The interior paint for the shape.</p>",
					"description": ""
				},
				{
					"name": "opacity",
					"type": "PropertyDoc",
					"brief": "<p>The opacity of the fill.</p>",
					"description": ""
				},
				{
					"name": "stroke",
					"type": "PropertyDoc",
					"brief": "<p>The color of the stroke outline applied on the shape.</p>",
					"description": ""
				},
				{
					"name": "strokeDashArray",
					"type": "PropertyDoc",
					"brief": "<p>The dash pattern for stroking the shape.</p>",
					"description": ""
				},
				{
					"name": "strokeDashOffset",
					"type": "PropertyDoc",
					"brief": "<p>The distance into the dash pattern at which the stroking is started.</p>",
					"description": ""
				},
				{
					"name": "strokeLineCap",
					"type": "PropertyDoc",
					"brief": "<p>The line caps applied at the end of the stroke. This is not applied for closed shapes.</p>",
					"description": ""
				},
				{
					"name": "strokeLineJoin",
					"type": "PropertyDoc",
					"brief": "<p>The line join applied at the joint to line segments.</p>",
					"description": ""
				},
				{
					"name": "strokeMiterLimit",
					"type": "PropertyDoc",
					"brief": "<p>The maximum miter distance.</p>",
					"description": ""
				},
				{
					"name": "strokeWidth",
					"type": "PropertyDoc",
					"brief": "<p>The width of the stroke outline applied on the shape.</p>",
					"description": ""
				}
			]
		},
		{
			"name": "registerCompressedTextures",
			"type": "FunctionDoc",
			"brief": "",
			"description": "<p>Creates base-textures and textures for each compressed-texture resource and adds them into the global\ntexture cache. The first texture has two IDs - <code>${url}</code>, <code>${url}-1</code>; while the rest have an ID of the\nform <code>${url}-i</code>.</p>"
		},
		{
			"name": "removeAllHandlers",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "resolveConstantOrProperty",
			"type": "FunctionDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "SharedArrayBuffer",
			"type": "InterfaceDoc",
			"brief": "",
			"description": ""
		},
		{
			"name": "SVGTextEngine",
			"type": "InterfaceDoc",
			"brief": "",
			"description": "<p>The <code>SVGTextEngine</code> interface is used to layout text content authored in SVG files. The @pixi-essentials/svg\npackage provides {@link SVGTextEngineImpl} as a default implementation for users.</p>\n<p>Text engines are allowed to have async behaviour so that fonts can be loaded before text metrics are measured.</p>\n<p>It is expected an implementation inherits from {@link PIXI.DisplayObject}.</p>",
			"members": [
				{
					"name": "clear",
					"type": "MethodDoc",
					"brief": "",
					"description": "<p>Clears the text content laid out already. This should reset the state of the engine to before any calls\nto {@link SVGTextEngine.put} were made.</p>"
				},
				{
					"name": "put",
					"type": "MethodDoc",
					"brief": "",
					"description": "<p>Puts the text {@code content} into the local space of the engine at {@code position}. {@code matrix} can\nbe used to transform the glyphs, although it is as optional feature for implementations.</p>"
				}
			]
		},
		{
			"name": "areArraysEqual",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\nThis version can also convert array of colors</p>"
		},
		{
			"name": "autoDetectFormat",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Auto-detect BitmapFont parsing format based on data.</p>"
		},
		{
			"name": "buildLine",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Builds a line to draw</p>",
			"description": "<p>Ignored from docs since it is not directly exposed.</p>"
		},
		{
			"name": "buildNonNativeLine",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Builds a line to draw using the polygon method.</p>",
			"description": "<p>Ignored from docs since it is not directly exposed.</p>"
		},
		{
			"name": "calculateTextStyle",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to calculate a text style for a PIXI.Text object.</p>",
			"description": ""
		},
		{
			"name": "canUploadSameBuffer",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Uploading the same buffer multiple times in a single frame can cause performance issues.\nApparent on iOS so only check for that at the moment\nThis check may become more complex if this issue pops up elsewhere.</p>"
		},
		{
			"name": "canUseNewCanvasBlendModes",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Checks whether the Canvas BlendModes are supported by the current browser</p>",
			"description": ""
		},
		{
			"name": "compileShader",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": ""
		},
		{
			"name": "CrossPlatformCanvasRenderingContext2D",
			"type": "InterfaceDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Renderering context for all browsers. This includes platform-specific\nproperties that are not included in the spec for CanvasRenderingContext2D</p>"
		},
		{
			"name": "deepCopyProperties",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utility function to ensure that object properties are copied by value, and not by reference</p>"
		},
		{
			"name": "drawText",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to draw PIXI.Text to its texture.</p>",
			"description": ""
		},
		{
			"name": "findBaseTexture",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find BaseTextures from Texture.</p>",
			"description": ""
		},
		{
			"name": "findGraphics",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find graphics.</p>",
			"description": ""
		},
		{
			"name": "findMultipleBaseTextures",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find multiple textures from objects like AnimatedSprites.</p>",
			"description": ""
		},
		{
			"name": "findText",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find Text objects.</p>",
			"description": ""
		},
		{
			"name": "findTextStyle",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find TextStyle objects.</p>",
			"description": ""
		},
		{
			"name": "findTexture",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to find textures from objects.</p>",
			"description": ""
		},
		{
			"name": "generateFillStyle",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Generates the fill style. Can automatically generate a gradient based on the fill style being an array</p>",
			"description": ""
		},
		{
			"name": "getColor",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\nThis version can also convert array of colors</p>"
		},
		{
			"name": "getSingleColor",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.</p>"
		},
		{
			"name": "IBitmapFontRawData",
			"type": "InterfaceDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Internal data format used to convert to BitmapFontData.</p>"
		},
		{
			"name": "maxRecommendedTextures",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>The maximum recommended texture units to use.\nIn theory the bigger the better, and for desktop we'll use as many as we can.\nBut some mobile devices slow down if there is to many branches in the shader.\nSo in practice there seems to be a sweet spot size that varies depending on the device.</p>\n<p>In v4, all mobile devices were limited to 4 texture units because for this.\nIn v5, we allow all texture units to be used on modern Apple or Android devices.</p>"
		},
		{
			"name": "quadraticBezierCurve",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Calculate the points for a quadratic bezier curve. (helper function..)\nBased on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c</p>\n<p>Ignored from docs since it is not directly exposed.</p>"
		},
		{
			"name": "round",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Buffers vertices to draw an arc at the line joint or cap.</p>",
			"description": "<p>Ignored from docs since it is not directly exposed.</p>"
		},
		{
			"name": "setPrecision",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Sets the float precision on the shader, ensuring the device supports the request precision.\nIf the precision is already present, it just ensures that the device is able to handle it.</p>"
		},
		{
			"name": "setVertexAttribArrays",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": ""
		},
		{
			"name": "square",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Buffers vertices to draw a square cap.</p>",
			"description": "<p>Ignored from docs since it is not directly exposed.</p>"
		},
		{
			"name": "unsafeEvalSupported",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "",
			"description": "<p>Not all platforms allow to generate function code (e.g., <code>new Function</code>).\nthis provides the platform-level detection.</p>"
		},
		{
			"name": "uploadBaseTextures",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to upload PIXI.Texture objects to the GPU.</p>",
			"description": ""
		},
		{
			"name": "uploadBaseTextures",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to upload PIXI.Texture objects to the GPU.</p>",
			"description": ""
		},
		{
			"name": "uploadGraphics",
			"type": "FunctionDoc",
			"access": "private",
			"brief": "<p>Built-in hook to upload PIXI.Graphics to the GPU.</p>",
			"description": ""
		}
	]
}